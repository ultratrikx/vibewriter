/*! For license information please see sidebar.js.LICENSE.txt */
(()=>{"use strict";var e={221:(e,t,n)=>{var r=n(540);function a(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function o(){}var s={d:{f:o,r:function(){throw Error(a(522))},D:o,C:o,L:o,m:o,X:o,S:o,M:o},p:0,findDOMNode:null},i=Symbol.for("react.portal"),l=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function u(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=s,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(a(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:i,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=l.T,n=s.p;try{if(l.T=null,s.p=2,e)return e()}finally{l.T=t,s.p=n,s.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,s.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&s.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin),a="string"==typeof t.integrity?t.integrity:void 0,o="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?s.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:a,fetchPriority:o}):"script"===n&&s.d.X(e,{crossOrigin:r,integrity:a,fetchPriority:o,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=u(t.as,t.crossOrigin);s.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&s.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin);s.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=u(t.as,t.crossOrigin);s.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else s.d.m(e)},t.requestFormReset=function(e){s.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return l.H.useFormState(e,t,n)},t.useFormStatus=function(){return l.H.useHostTransitionStatus()},t.version="19.1.0"},247:(e,t,n)=>{var r=n(982),a=n(540),o=n(961);function s(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function i(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function l(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function u(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function c(e){if(l(e)!==e)throw Error(s(188))}function d(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=d(e)))return t;e=e.sibling}return null}var f=Object.assign,p=Symbol.for("react.element"),h=Symbol.for("react.transitional.element"),m=Symbol.for("react.portal"),g=Symbol.for("react.fragment"),y=Symbol.for("react.strict_mode"),v=Symbol.for("react.profiler"),b=Symbol.for("react.provider"),w=Symbol.for("react.consumer"),k=Symbol.for("react.context"),S=Symbol.for("react.forward_ref"),_=Symbol.for("react.suspense"),x=Symbol.for("react.suspense_list"),E=Symbol.for("react.memo"),C=Symbol.for("react.lazy");Symbol.for("react.scope");var P=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var A=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var T=Symbol.iterator;function N(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=T&&e[T]||e["@@iterator"])?e:null}var O=Symbol.for("react.client.reference");function R(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===O?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case g:return"Fragment";case v:return"Profiler";case y:return"StrictMode";case _:return"Suspense";case x:return"SuspenseList";case P:return"Activity"}if("object"==typeof e)switch(e.$$typeof){case m:return"Portal";case k:return(e.displayName||"Context")+".Provider";case w:return(e._context.displayName||"Context")+".Consumer";case S:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case E:return null!==(t=e.displayName||null)?t:R(e.type)||"Memo";case C:t=e._payload,e=e._init;try{return R(e(t))}catch(e){}}return null}var I=Array.isArray,L=a.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,D=o.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,z={pending:!1,data:null,method:null,action:null},M=[],$=-1;function F(e){return{current:e}}function j(e){0>$||(e.current=M[$],M[$]=null,$--)}function U(e,t){$++,M[$]=e.current,e.current=t}var B=F(null),q=F(null),H=F(null),W=F(null);function V(e,t){switch(U(H,t),U(q,e),U(B,null),t.nodeType){case 9:case 11:e=(e=t.documentElement)&&(e=e.namespaceURI)?ad(e):0;break;default:if(e=t.tagName,t=t.namespaceURI)e=od(t=ad(t),e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}j(B),U(B,e)}function Q(){j(B),j(q),j(H)}function K(e){null!==e.memoizedState&&U(W,e);var t=B.current,n=od(t,e.type);t!==n&&(U(q,e),U(B,n))}function X(e){q.current===e&&(j(B),j(q)),W.current===e&&(j(W),Kd._currentValue=z)}var G=Object.prototype.hasOwnProperty,J=r.unstable_scheduleCallback,Y=r.unstable_cancelCallback,Z=r.unstable_shouldYield,ee=r.unstable_requestPaint,te=r.unstable_now,ne=r.unstable_getCurrentPriorityLevel,re=r.unstable_ImmediatePriority,ae=r.unstable_UserBlockingPriority,oe=r.unstable_NormalPriority,se=r.unstable_LowPriority,ie=r.unstable_IdlePriority,le=r.log,ue=r.unstable_setDisableYieldValue,ce=null,de=null;function fe(e){if("function"==typeof le&&ue(e),de&&"function"==typeof de.setStrictMode)try{de.setStrictMode(ce,e)}catch(e){}}var pe=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(he(e)/me|0)|0},he=Math.log,me=Math.LN2,ge=256,ye=4194304;function ve(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function be(e,t,n){var r=e.pendingLanes;if(0===r)return 0;var a=0,o=e.suspendedLanes,s=e.pingedLanes;e=e.warmLanes;var i=134217727&r;return 0!==i?0!==(r=i&~o)?a=ve(r):0!==(s&=i)?a=ve(s):n||0!==(n=i&~e)&&(a=ve(n)):0!==(i=r&~o)?a=ve(i):0!==s?a=ve(s):n||0!==(n=r&~e)&&(a=ve(n)),0===a?0:0!==t&&t!==a&&0===(t&o)&&((o=a&-a)>=(n=t&-t)||32===o&&4194048&n)?t:a}function we(e,t){return 0===(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function ke(e,t){switch(e){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function Se(){var e=ge;return!(4194048&(ge<<=1))&&(ge=256),e}function _e(){var e=ye;return!(62914560&(ye<<=1))&&(ye=4194304),e}function xe(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ee(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Ce(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-pe(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&n}function Pe(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-pe(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}function Ae(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function Te(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Ne(){var e=D.p;return 0!==e?e:void 0===(e=window.event)?32:cf(e.type)}var Oe=Math.random().toString(36).slice(2),Re="__reactFiber$"+Oe,Ie="__reactProps$"+Oe,Le="__reactContainer$"+Oe,De="__reactEvents$"+Oe,ze="__reactListeners$"+Oe,Me="__reactHandles$"+Oe,$e="__reactResources$"+Oe,Fe="__reactMarker$"+Oe;function je(e){delete e[Re],delete e[Ie],delete e[De],delete e[ze],delete e[Me]}function Ue(e){var t=e[Re];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Le]||n[Re]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=bd(e);null!==e;){if(n=e[Re])return n;e=bd(e)}return t}n=(e=n).parentNode}return null}function Be(e){if(e=e[Re]||e[Le]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function qe(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(s(33))}function He(e){var t=e[$e];return t||(t=e[$e]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function We(e){e[Fe]=!0}var Ve=new Set,Qe={};function Ke(e,t){Xe(e,t),Xe(e+"Capture",t)}function Xe(e,t){for(Qe[e]=t,e=0;e<t.length;e++)Ve.add(t[e])}var Ge,Je,Ye=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Ze={},et={};function tt(e,t,n){if(a=t,G.call(et,a)||!G.call(Ze,a)&&(Ye.test(a)?et[a]=!0:(Ze[a]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var a}function nt(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function rt(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function at(e){if(void 0===Ge)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);Ge=t&&t[1]||"",Je=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Ge+e+Je}var ot=!1;function st(e,t){if(!e||ot)return"";ot=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var a=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");a&&a.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var o=r.DetermineComponentFrameRoot(),s=o[0],i=o[1];if(s&&i){var l=s.split("\n"),u=i.split("\n");for(a=r=0;r<l.length&&!l[r].includes("DetermineComponentFrameRoot");)r++;for(;a<u.length&&!u[a].includes("DetermineComponentFrameRoot");)a++;if(r===l.length||a===u.length)for(r=l.length-1,a=u.length-1;1<=r&&0<=a&&l[r]!==u[a];)a--;for(;1<=r&&0<=a;r--,a--)if(l[r]!==u[a]){if(1!==r||1!==a)do{if(r--,0>--a||l[r]!==u[a]){var c="\n"+l[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=a);break}}}finally{ot=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?at(n):""}function it(e){switch(e.tag){case 26:case 27:case 5:return at(e.type);case 16:return at("Lazy");case 13:return at("Suspense");case 19:return at("SuspenseList");case 0:case 15:return st(e.type,!1);case 11:return st(e.type.render,!1);case 1:return st(e.type,!0);case 31:return at("Activity");default:return""}}function lt(e){try{var t="";do{t+=it(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function ut(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ct(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function dt(e){e._valueTracker||(e._valueTracker=function(e){var t=ct(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ft(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ct(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function pt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var ht=/[\n"\\]/g;function mt(e){return e.replace(ht,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function gt(e,t,n,r,a,o,s,i){e.name="",null!=s&&"function"!=typeof s&&"symbol"!=typeof s&&"boolean"!=typeof s?e.type=s:e.removeAttribute("type"),null!=t?"number"===s?(0===t&&""===e.value||e.value!=t)&&(e.value=""+ut(t)):e.value!==""+ut(t)&&(e.value=""+ut(t)):"submit"!==s&&"reset"!==s||e.removeAttribute("value"),null!=t?vt(e,s,ut(t)):null!=n?vt(e,s,ut(n)):null!=r&&e.removeAttribute("value"),null==a&&null!=o&&(e.defaultChecked=!!o),null!=a&&(e.checked=a&&"function"!=typeof a&&"symbol"!=typeof a),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.name=""+ut(i):e.removeAttribute("name")}function yt(e,t,n,r,a,o,s,i){if(null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.type=o),null!=t||null!=n){if(("submit"===o||"reset"===o)&&null==t)return;n=null!=n?""+ut(n):"",t=null!=t?""+ut(t):n,i||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:a)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=s&&"function"!=typeof s&&"symbol"!=typeof s&&"boolean"!=typeof s&&(e.name=s)}function vt(e,t,n){"number"===t&&pt(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function bt(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ut(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function wt(e,t,n){null==t||((t=""+ut(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+ut(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function kt(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(s(92));if(I(r)){if(1<r.length)throw Error(s(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=ut(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function St(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var _t=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function xt(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||_t.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function Et(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(s(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var a in t)r=t[a],t.hasOwnProperty(a)&&n[a]!==r&&xt(e,a,r)}else for(var o in t)t.hasOwnProperty(o)&&xt(e,o,t[o])}function Ct(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Pt=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),At=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Tt(e){return At.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Nt=null;function Ot(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Rt=null,It=null;function Lt(e){var t=Be(e);if(t&&(e=t.stateNode)){var n=e[Ie]||null;e:switch(e=t.stateNode,t.type){case"input":if(gt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+mt(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=r[Ie]||null;if(!a)throw Error(s(90));gt(r,a.value,a.defaultValue,a.defaultValue,a.checked,a.defaultChecked,a.type,a.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&ft(r)}break e;case"textarea":wt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&bt(e,!!n.multiple,t,!1)}}}var Dt=!1;function zt(e,t,n){if(Dt)return e(t,n);Dt=!0;try{return e(t)}finally{if(Dt=!1,(null!==Rt||null!==It)&&(Uu(),Rt&&(t=Rt,e=It,It=Rt=null,Lt(t),e)))for(t=0;t<e.length;t++)Lt(e[t])}}function Mt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Ie]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(s(231,t,typeof n));return n}var $t=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),Ft=!1;if($t)try{var jt={};Object.defineProperty(jt,"passive",{get:function(){Ft=!0}}),window.addEventListener("test",jt,jt),window.removeEventListener("test",jt,jt)}catch(e){Ft=!1}var Ut=null,Bt=null,qt=null;function Ht(){if(qt)return qt;var e,t,n=Bt,r=n.length,a="value"in Ut?Ut.value:Ut.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var s=r-e;for(t=1;t<=s&&n[r-t]===a[o-t];t++);return qt=a.slice(e,1<t?1-t:void 0)}function Wt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Vt(){return!0}function Qt(){return!1}function Kt(e){function t(t,n,r,a,o){for(var s in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(s)&&(t=e[s],this[s]=t?t(a):a[s]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?Vt:Qt,this.isPropagationStopped=Qt,this}return f(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Vt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Vt)},persist:function(){},isPersistent:Vt}),t}var Xt,Gt,Jt,Yt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Zt=Kt(Yt),en=f({},Yt,{view:0,detail:0}),tn=Kt(en),nn=f({},en,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:hn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Jt&&(Jt&&"mousemove"===e.type?(Xt=e.screenX-Jt.screenX,Gt=e.screenY-Jt.screenY):Gt=Xt=0,Jt=e),Xt)},movementY:function(e){return"movementY"in e?e.movementY:Gt}}),rn=Kt(nn),an=Kt(f({},nn,{dataTransfer:0})),on=Kt(f({},en,{relatedTarget:0})),sn=Kt(f({},Yt,{animationName:0,elapsedTime:0,pseudoElement:0})),ln=Kt(f({},Yt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),un=Kt(f({},Yt,{data:0})),cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},dn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function pn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=fn[e])&&!!t[e]}function hn(){return pn}var mn=Kt(f({},en,{key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Wt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?dn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:hn,charCode:function(e){return"keypress"===e.type?Wt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Wt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),gn=Kt(f({},nn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),yn=Kt(f({},en,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:hn})),vn=Kt(f({},Yt,{propertyName:0,elapsedTime:0,pseudoElement:0})),bn=Kt(f({},nn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),wn=Kt(f({},Yt,{newState:0,oldState:0})),kn=[9,13,27,32],Sn=$t&&"CompositionEvent"in window,_n=null;$t&&"documentMode"in document&&(_n=document.documentMode);var xn=$t&&"TextEvent"in window&&!_n,En=$t&&(!Sn||_n&&8<_n&&11>=_n),Cn=String.fromCharCode(32),Pn=!1;function An(e,t){switch(e){case"keyup":return-1!==kn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Tn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Nn=!1,On={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Rn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!On[e.type]:"textarea"===t}function In(e,t,n,r){Rt?It?It.push(r):It=[r]:Rt=r,0<(t=Hc(t,"onChange")).length&&(n=new Zt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Ln=null,Dn=null;function zn(e){zc(e,0)}function Mn(e){if(ft(qe(e)))return e}function $n(e,t){if("change"===e)return t}var Fn=!1;if($t){var jn;if($t){var Un="oninput"in document;if(!Un){var Bn=document.createElement("div");Bn.setAttribute("oninput","return;"),Un="function"==typeof Bn.oninput}jn=Un}else jn=!1;Fn=jn&&(!document.documentMode||9<document.documentMode)}function qn(){Ln&&(Ln.detachEvent("onpropertychange",Hn),Dn=Ln=null)}function Hn(e){if("value"===e.propertyName&&Mn(Dn)){var t=[];In(t,Dn,e,Ot(e)),zt(zn,t)}}function Wn(e,t,n){"focusin"===e?(qn(),Dn=n,(Ln=t).attachEvent("onpropertychange",Hn)):"focusout"===e&&qn()}function Vn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Mn(Dn)}function Qn(e,t){if("click"===e)return Mn(t)}function Kn(e,t){if("input"===e||"change"===e)return Mn(t)}var Xn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Gn(e,t){if(Xn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!G.call(t,a)||!Xn(e[a],t[a]))return!1}return!0}function Jn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Yn(e,t){var n,r=Jn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Jn(r)}}function Zn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Zn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function er(e){for(var t=pt((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=pt((e=t.contentWindow).document)}return t}function tr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var nr=$t&&"documentMode"in document&&11>=document.documentMode,rr=null,ar=null,or=null,sr=!1;function ir(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;sr||null==rr||rr!==pt(r)||(r="selectionStart"in(r=rr)&&tr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},or&&Gn(or,r)||(or=r,0<(r=Hc(ar,"onSelect")).length&&(t=new Zt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=rr)))}function lr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var ur={animationend:lr("Animation","AnimationEnd"),animationiteration:lr("Animation","AnimationIteration"),animationstart:lr("Animation","AnimationStart"),transitionrun:lr("Transition","TransitionRun"),transitionstart:lr("Transition","TransitionStart"),transitioncancel:lr("Transition","TransitionCancel"),transitionend:lr("Transition","TransitionEnd")},cr={},dr={};function fr(e){if(cr[e])return cr[e];if(!ur[e])return e;var t,n=ur[e];for(t in n)if(n.hasOwnProperty(t)&&t in dr)return cr[e]=n[t];return e}$t&&(dr=document.createElement("div").style,"AnimationEvent"in window||(delete ur.animationend.animation,delete ur.animationiteration.animation,delete ur.animationstart.animation),"TransitionEvent"in window||delete ur.transitionend.transition);var pr=fr("animationend"),hr=fr("animationiteration"),mr=fr("animationstart"),gr=fr("transitionrun"),yr=fr("transitionstart"),vr=fr("transitioncancel"),br=fr("transitionend"),wr=new Map,kr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Sr(e,t){wr.set(e,t),Ke(t,[e])}kr.push("scrollEnd");var _r=new WeakMap;function xr(e,t){if("object"==typeof e&&null!==e){var n=_r.get(e);return void 0!==n?n:(t={value:e,source:t,stack:lt(t)},_r.set(e,t),t)}return{value:e,source:t,stack:lt(t)}}var Er=[],Cr=0,Pr=0;function Ar(){for(var e=Cr,t=Pr=Cr=0;t<e;){var n=Er[t];Er[t++]=null;var r=Er[t];Er[t++]=null;var a=Er[t];Er[t++]=null;var o=Er[t];if(Er[t++]=null,null!==r&&null!==a){var s=r.pending;null===s?a.next=a:(a.next=s.next,s.next=a),r.pending=a}0!==o&&Rr(n,a,o)}}function Tr(e,t,n,r){Er[Cr++]=e,Er[Cr++]=t,Er[Cr++]=n,Er[Cr++]=r,Pr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Nr(e,t,n,r){return Tr(e,t,n,r),Ir(e)}function Or(e,t){return Tr(e,null,null,t),Ir(e)}function Rr(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var a=!1,o=e.return;null!==o;)o.childLanes|=n,null!==(r=o.alternate)&&(r.childLanes|=n),22===o.tag&&(null===(e=o.stateNode)||1&e._visibility||(a=!0)),e=o,o=o.return;return 3===e.tag?(o=e.stateNode,a&&null!==t&&(a=31-pe(n),null===(r=(e=o.hiddenUpdates)[a])?e[a]=[t]:r.push(t),t.lane=536870912|n),o):null}function Ir(e){if(50<Ru)throw Ru=0,Iu=null,Error(s(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Lr={};function Dr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function zr(e,t,n,r){return new Dr(e,t,n,r)}function Mr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function $r(e,t){var n=e.alternate;return null===n?((n=zr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=65011712&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Fr(e,t){e.flags&=65011714;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function jr(e,t,n,r,a,o){var i=0;if(r=e,"function"==typeof e)Mr(e)&&(i=1);else if("string"==typeof e)i=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,B.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case P:return(e=zr(31,n,t,a)).elementType=P,e.lanes=o,e;case g:return Ur(n.children,a,o,t);case y:i=8,a|=24;break;case v:return(e=zr(12,n,t,2|a)).elementType=v,e.lanes=o,e;case _:return(e=zr(13,n,t,a)).elementType=_,e.lanes=o,e;case x:return(e=zr(19,n,t,a)).elementType=x,e.lanes=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case b:case k:i=10;break e;case w:i=9;break e;case S:i=11;break e;case E:i=14;break e;case C:i=16,r=null;break e}i=29,n=Error(s(130,null===e?"null":typeof e,"")),r=null}return(t=zr(i,n,t,a)).elementType=e,t.type=r,t.lanes=o,t}function Ur(e,t,n,r){return(e=zr(7,e,r,t)).lanes=n,e}function Br(e,t,n){return(e=zr(6,e,null,t)).lanes=n,e}function qr(e,t,n){return(t=zr(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}var Hr=[],Wr=0,Vr=null,Qr=0,Kr=[],Xr=0,Gr=null,Jr=1,Yr="";function Zr(e,t){Hr[Wr++]=Qr,Hr[Wr++]=Vr,Vr=e,Qr=t}function ea(e,t,n){Kr[Xr++]=Jr,Kr[Xr++]=Yr,Kr[Xr++]=Gr,Gr=e;var r=Jr;e=Yr;var a=32-pe(r)-1;r&=~(1<<a),n+=1;var o=32-pe(t)+a;if(30<o){var s=a-a%5;o=(r&(1<<s)-1).toString(32),r>>=s,a-=s,Jr=1<<32-pe(t)+a|n<<a|r,Yr=o+e}else Jr=1<<o|n<<a|r,Yr=e}function ta(e){null!==e.return&&(Zr(e,1),ea(e,1,0))}function na(e){for(;e===Vr;)Vr=Hr[--Wr],Hr[Wr]=null,Qr=Hr[--Wr],Hr[Wr]=null;for(;e===Gr;)Gr=Kr[--Xr],Kr[Xr]=null,Yr=Kr[--Xr],Kr[Xr]=null,Jr=Kr[--Xr],Kr[Xr]=null}var ra=null,aa=null,oa=!1,sa=null,ia=!1,la=Error(s(519));function ua(e){throw ma(xr(Error(s(418,"")),e)),la}function ca(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Re]=e,t[Ie]=r,n){case"dialog":Mc("cancel",t),Mc("close",t);break;case"iframe":case"object":case"embed":Mc("load",t);break;case"video":case"audio":for(n=0;n<Lc.length;n++)Mc(Lc[n],t);break;case"source":Mc("error",t);break;case"img":case"image":case"link":Mc("error",t),Mc("load",t);break;case"details":Mc("toggle",t);break;case"input":Mc("invalid",t),yt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),dt(t);break;case"select":Mc("invalid",t);break;case"textarea":Mc("invalid",t),kt(t,r.value,r.defaultValue,r.children),dt(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Gc(t.textContent,n)?(null!=r.popover&&(Mc("beforetoggle",t),Mc("toggle",t)),null!=r.onScroll&&Mc("scroll",t),null!=r.onScrollEnd&&Mc("scrollend",t),null!=r.onClick&&(t.onclick=Jc),t=!0):t=!1,t||ua(e)}function da(e){for(ra=e.return;ra;)switch(ra.tag){case 5:case 13:return void(ia=!1);case 27:case 3:return void(ia=!0);default:ra=ra.return}}function fa(e){if(e!==ra)return!1;if(!oa)return da(e),oa=!0,!1;var t,n=e.tag;if((t=3!==n&&27!==n)&&((t=5===n)&&(t=!("form"!==(t=e.type)&&"button"!==t)||sd(e.type,e.memoizedProps)),t=!t),t&&aa&&ua(e),da(e),13===n){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(s(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){aa=yd(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}aa=null}}else 27===n?(n=aa,pd(e.type)?(e=vd,vd=null,aa=e):aa=n):aa=ra?yd(e.stateNode.nextSibling):null;return!0}function pa(){aa=ra=null,oa=!1}function ha(){var e=sa;return null!==e&&(null===bu?bu=e:bu.push.apply(bu,e),sa=null),e}function ma(e){null===sa?sa=[e]:sa.push(e)}var ga=F(null),ya=null,va=null;function ba(e,t,n){U(ga,t._currentValue),t._currentValue=n}function wa(e){e._currentValue=ga.current,j(ga)}function ka(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Sa(e,t,n,r){var a=e.child;for(null!==a&&(a.return=e);null!==a;){var o=a.dependencies;if(null!==o){var i=a.child;o=o.firstContext;e:for(;null!==o;){var l=o;o=a;for(var u=0;u<t.length;u++)if(l.context===t[u]){o.lanes|=n,null!==(l=o.alternate)&&(l.lanes|=n),ka(o.return,n,e),r||(i=null);break e}o=l.next}}else if(18===a.tag){if(null===(i=a.return))throw Error(s(341));i.lanes|=n,null!==(o=i.alternate)&&(o.lanes|=n),ka(i,n,e),i=null}else i=a.child;if(null!==i)i.return=a;else for(i=a;null!==i;){if(i===e){i=null;break}if(null!==(a=i.sibling)){a.return=i.return,i=a;break}i=i.return}a=i}}function _a(e,t,n,r){e=null;for(var a=t,o=!1;null!==a;){if(!o)if(524288&a.flags)o=!0;else if(262144&a.flags)break;if(10===a.tag){var i=a.alternate;if(null===i)throw Error(s(387));if(null!==(i=i.memoizedProps)){var l=a.type;Xn(a.pendingProps.value,i.value)||(null!==e?e.push(l):e=[l])}}else if(a===W.current){if(null===(i=a.alternate))throw Error(s(387));i.memoizedState.memoizedState!==a.memoizedState.memoizedState&&(null!==e?e.push(Kd):e=[Kd])}a=a.return}null!==e&&Sa(t,e,n,r),t.flags|=262144}function xa(e){for(e=e.firstContext;null!==e;){if(!Xn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Ea(e){ya=e,va=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Ca(e){return Aa(ya,e)}function Pa(e,t){return null===ya&&Ea(e),Aa(e,t)}function Aa(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===va){if(null===e)throw Error(s(308));va=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else va=va.next=t;return n}var Ta="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Na=r.unstable_scheduleCallback,Oa=r.unstable_NormalPriority,Ra={$$typeof:k,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Ia(){return{controller:new Ta,data:new Map,refCount:0}}function La(e){e.refCount--,0===e.refCount&&Na(Oa,(function(){e.controller.abort()}))}var Da=null,za=0,Ma=0,$a=null;function Fa(){if(0===--za&&null!==Da){null!==$a&&($a.status="fulfilled");var e=Da;Da=null,Ma=0,$a=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var ja=L.S;L.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Da){var n=Da=[];za=0,Ma=Tc(),$a={status:"pending",value:void 0,then:function(e){n.push(e)}}}za++,t.then(Fa,Fa)}(0,t),null!==ja&&ja(e,t)};var Ua=F(null);function Ba(){var e=Ua.current;return null!==e?e:ru.pooledCache}function qa(e,t){U(Ua,null===t?Ua.current:t.pool)}function Ha(){var e=Ba();return null===e?null:{parent:Ra._currentValue,pool:e}}var Wa=Error(s(460)),Va=Error(s(474)),Qa=Error(s(542)),Ka={then:function(){}};function Xa(e){return"fulfilled"===(e=e.status)||"rejected"===e}function Ga(){}function Ja(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(Ga,Ga),t=n),t.status){case"fulfilled":return t.value;case"rejected":throw eo(e=t.reason),e;default:if("string"==typeof t.status)t.then(Ga,Ga);else{if(null!==(e=ru)&&100<e.shellSuspendCounter)throw Error(s(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":throw eo(e=t.reason),e}throw Ya=t,Wa}}var Ya=null;function Za(){if(null===Ya)throw Error(s(459));var e=Ya;return Ya=null,e}function eo(e){if(e===Wa||e===Qa)throw Error(s(483))}var to=!1;function no(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function ro(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function ao(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function oo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&nu){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,t=Ir(e),Rr(e,null,n),t}return Tr(e,r,t,n),Ir(e)}function so(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194048&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Pe(e,n)}}function io(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var s={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===o?a=o=s:o=o.next=s,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var lo=!1;function uo(){if(lo&&null!==$a)throw $a}function co(e,t,n,r){lo=!1;var a=e.updateQueue;to=!1;var o=a.firstBaseUpdate,s=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var l=i,u=l.next;l.next=null,null===s?o=u:s.next=u,s=l;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==s&&(null===i?c.firstBaseUpdate=u:i.next=u,c.lastBaseUpdate=l)}if(null!==o){var d=a.baseState;for(s=0,c=u=l=null,i=o;;){var p=-536870913&i.lane,h=p!==i.lane;if(h?(ou&p)===p:(r&p)===p){0!==p&&p===Ma&&(lo=!0),null!==c&&(c=c.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{var m=e,g=i;p=t;var y=n;switch(g.tag){case 1:if("function"==typeof(m=g.payload)){d=m.call(y,d,p);break e}d=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(p="function"==typeof(m=g.payload)?m.call(y,d,p):m))break e;d=f({},d,p);break e;case 2:to=!0}}null!==(p=i.callback)&&(e.flags|=64,h&&(e.flags|=8192),null===(h=a.callbacks)?a.callbacks=[p]:h.push(p))}else h={lane:p,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(u=c=h,l=d):c=c.next=h,s|=p;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(h=i).next,h.next=null,a.lastBaseUpdate=h,a.shared.pending=null}}null===c&&(l=d),a.baseState=l,a.firstBaseUpdate=u,a.lastBaseUpdate=c,null===o&&(a.shared.lanes=0),pu|=s,e.lanes=s,e.memoizedState=d}}function fo(e,t){if("function"!=typeof e)throw Error(s(191,e));e.call(t)}function po(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)fo(n[e],t)}var ho=F(null),mo=F(0);function go(e,t){U(mo,e=du),U(ho,t),du=e|t.baseLanes}function yo(){U(mo,du),U(ho,ho.current)}function vo(){du=mo.current,j(ho),j(mo)}var bo=0,wo=null,ko=null,So=null,_o=!1,xo=!1,Eo=!1,Co=0,Po=0,Ao=null,To=0;function No(){throw Error(s(321))}function Oo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Xn(e[n],t[n]))return!1;return!0}function Ro(e,t,n,r,a,o){return bo=o,wo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,L.H=null===e||null===e.memoizedState?Vs:Qs,Eo=!1,o=n(r,a),Eo=!1,xo&&(o=Lo(t,n,r,a)),Io(e),o}function Io(e){L.H=Ws;var t=null!==ko&&null!==ko.next;if(bo=0,So=ko=wo=null,_o=!1,Po=0,Ao=null,t)throw Error(s(300));null===e||Pi||null!==(e=e.dependencies)&&xa(e)&&(Pi=!0)}function Lo(e,t,n,r){wo=e;var a=0;do{if(xo&&(Ao=null),Po=0,xo=!1,25<=a)throw Error(s(301));if(a+=1,So=ko=null,null!=e.updateQueue){var o=e.updateQueue;o.lastEffect=null,o.events=null,o.stores=null,null!=o.memoCache&&(o.memoCache.index=0)}L.H=Ks,o=t(n,r)}while(xo);return o}function Do(){var e=L.H,t=e.useState()[0];return t="function"==typeof t.then?Uo(t):t,e=e.useState()[0],(null!==ko?ko.memoizedState:null)!==e&&(wo.flags|=1024),t}function zo(){var e=0!==Co;return Co=0,e}function Mo(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function $o(e){if(_o){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}_o=!1}bo=0,So=ko=wo=null,xo=!1,Po=Co=0,Ao=null}function Fo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===So?wo.memoizedState=So=e:So=So.next=e,So}function jo(){if(null===ko){var e=wo.alternate;e=null!==e?e.memoizedState:null}else e=ko.next;var t=null===So?wo.memoizedState:So.next;if(null!==t)So=t,ko=e;else{if(null===e){if(null===wo.alternate)throw Error(s(467));throw Error(s(310))}e={memoizedState:(ko=e).memoizedState,baseState:ko.baseState,baseQueue:ko.baseQueue,queue:ko.queue,next:null},null===So?wo.memoizedState=So=e:So=So.next=e}return So}function Uo(e){var t=Po;return Po+=1,null===Ao&&(Ao=[]),e=Ja(Ao,e,t),t=wo,null===(null===So?t.memoizedState:So.next)&&(t=t.alternate,L.H=null===t||null===t.memoizedState?Vs:Qs),e}function Bo(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return Uo(e);if(e.$$typeof===k)return Ca(e)}throw Error(s(438,String(e)))}function qo(e){var t=null,n=wo.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=wo.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},wo.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=A;return t.index++,n}function Ho(e,t){return"function"==typeof t?t(e):t}function Wo(e){return Vo(jo(),ko,e)}function Vo(e,t,n){var r=e.queue;if(null===r)throw Error(s(311));r.lastRenderedReducer=n;var a=e.baseQueue,o=r.pending;if(null!==o){if(null!==a){var i=a.next;a.next=o.next,o.next=i}t.baseQueue=a=o,r.pending=null}if(o=e.baseState,null===a)e.memoizedState=o;else{var l=i=null,u=null,c=t=a.next,d=!1;do{var f=-536870913&c.lane;if(f!==c.lane?(ou&f)===f:(bo&f)===f){var p=c.revertLane;if(0===p)null!==u&&(u=u.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),f===Ma&&(d=!0);else{if((bo&p)===p){c=c.next,p===Ma&&(d=!0);continue}f={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(l=u=f,i=o):u=u.next=f,wo.lanes|=p,pu|=p}f=c.action,Eo&&n(o,f),o=c.hasEagerState?c.eagerState:n(o,f)}else p={lane:f,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(l=u=p,i=o):u=u.next=p,wo.lanes|=f,pu|=f;c=c.next}while(null!==c&&c!==t);if(null===u?i=o:u.next=l,!Xn(o,e.memoizedState)&&(Pi=!0,d&&null!==(n=$a)))throw n;e.memoizedState=o,e.baseState=i,e.baseQueue=u,r.lastRenderedState=o}return null===a&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Qo(e){var t=jo(),n=t.queue;if(null===n)throw Error(s(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{o=e(o,i.action),i=i.next}while(i!==a);Xn(o,t.memoizedState)||(Pi=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function Ko(e,t,n){var r=wo,a=jo(),o=oa;if(o){if(void 0===n)throw Error(s(407));n=n()}else n=t();var i=!Xn((ko||a).memoizedState,n);if(i&&(a.memoizedState=n,Pi=!0),a=a.queue,ys(2048,8,Jo.bind(null,r,a,e),[e]),a.getSnapshot!==t||i||null!==So&&1&So.memoizedState.tag){if(r.flags|=2048,hs(9,{destroy:void 0,resource:void 0},Go.bind(null,r,a,n,t),null),null===ru)throw Error(s(349));o||124&bo||Xo(r,t,n)}return n}function Xo(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=wo.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},wo.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Go(e,t,n,r){t.value=n,t.getSnapshot=r,Yo(t)&&Zo(e)}function Jo(e,t,n){return n((function(){Yo(t)&&Zo(e)}))}function Yo(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Xn(e,n)}catch(e){return!0}}function Zo(e){var t=Or(e,2);null!==t&&zu(t,0,2)}function es(e){var t=Fo();if("function"==typeof e){var n=e;if(e=n(),Eo){fe(!0);try{n()}finally{fe(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ho,lastRenderedState:e},t}function ts(e,t,n,r){return e.baseState=n,Vo(e,ko,"function"==typeof r?r:Ho)}function ns(e,t,n,r,a){if(Bs(e))throw Error(s(485));if(null!==(e=t.action)){var o={payload:a,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){o.listeners.push(e)}};null!==L.T?n(!0):o.isTransition=!1,r(o),null===(n=t.pending)?(o.next=t.pending=o,rs(t,o)):(o.next=n.next,t.pending=n.next=o)}}function rs(e,t){var n=t.action,r=t.payload,a=e.state;if(t.isTransition){var o=L.T,s={};L.T=s;try{var i=n(a,r),l=L.S;null!==l&&l(s,i),as(e,t,i)}catch(n){ss(e,t,n)}finally{L.T=o}}else try{as(e,t,o=n(a,r))}catch(n){ss(e,t,n)}}function as(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){os(e,t,n)}),(function(n){return ss(e,t,n)})):os(e,t,n)}function os(e,t,n){t.status="fulfilled",t.value=n,is(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,rs(e,n)))}function ss(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,is(t),t=t.next}while(t!==r)}e.action=null}function is(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function ls(e,t){return t}function us(e,t){if(oa){var n=ru.formState;if(null!==n){e:{var r=wo;if(oa){if(aa){t:{for(var a=aa,o=ia;8!==a.nodeType;){if(!o){a=null;break t}if(null===(a=yd(a.nextSibling))){a=null;break t}}a="F!"===(o=a.data)||"F"===o?a:null}if(a){aa=yd(a.nextSibling),r="F!"===a.data;break e}}ua(r)}r=!1}r&&(t=n[0])}}return(n=Fo()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:ls,lastRenderedState:t},n.queue=r,n=Fs.bind(null,wo,r),r.dispatch=n,r=es(!1),o=Us.bind(null,wo,!1,r.queue),a={state:t,dispatch:null,action:e,pending:null},(r=Fo()).queue=a,n=ns.bind(null,wo,a,o,n),a.dispatch=n,r.memoizedState=e,[t,n,!1]}function cs(e){return ds(jo(),ko,e)}function ds(e,t,n){if(t=Vo(e,t,ls)[0],e=Wo(Ho)[0],"object"==typeof t&&null!==t&&"function"==typeof t.then)try{var r=Uo(t)}catch(e){if(e===Wa)throw Qa;throw e}else r=t;var a=(t=jo()).queue,o=a.dispatch;return n!==t.memoizedState&&(wo.flags|=2048,hs(9,{destroy:void 0,resource:void 0},fs.bind(null,a,n),null)),[r,o,e]}function fs(e,t){e.action=t}function ps(e){var t=jo(),n=ko;if(null!==n)return ds(t,n,e);jo(),t=t.memoizedState;var r=(n=jo()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function hs(e,t,n,r){return e={tag:e,create:n,deps:r,inst:t,next:null},null===(t=wo.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},wo.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ms(){return jo().memoizedState}function gs(e,t,n,r){var a=Fo();r=void 0===r?null:r,wo.flags|=e,a.memoizedState=hs(1|t,{destroy:void 0,resource:void 0},n,r)}function ys(e,t,n,r){var a=jo();r=void 0===r?null:r;var o=a.memoizedState.inst;null!==ko&&null!==r&&Oo(r,ko.memoizedState.deps)?a.memoizedState=hs(t,o,n,r):(wo.flags|=e,a.memoizedState=hs(1|t,o,n,r))}function vs(e,t){gs(8390656,8,e,t)}function bs(e,t){ys(2048,8,e,t)}function ws(e,t){return ys(4,2,e,t)}function ks(e,t){return ys(4,4,e,t)}function Ss(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function _s(e,t,n){n=null!=n?n.concat([e]):null,ys(4,4,Ss.bind(null,t,e),n)}function xs(){}function Es(e,t){var n=jo();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&Oo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Cs(e,t){var n=jo();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&Oo(t,r[1]))return r[0];if(r=e(),Eo){fe(!0);try{e()}finally{fe(!1)}}return n.memoizedState=[r,t],r}function Ps(e,t,n){return void 0===n||1073741824&bo?e.memoizedState=t:(e.memoizedState=n,e=Du(),wo.lanes|=e,pu|=e,n)}function As(e,t,n,r){return Xn(n,t)?n:null!==ho.current?(e=Ps(e,n,r),Xn(e,t)||(Pi=!0),e):42&bo?(e=Du(),wo.lanes|=e,pu|=e,t):(Pi=!0,e.memoizedState=n)}function Ts(e,t,n,r,a){var o=D.p;D.p=0!==o&&8>o?o:8;var s,i,l,u=L.T,c={};L.T=c,Us(e,!1,t,n);try{var d=a(),f=L.S;null!==f&&f(c,d),null!==d&&"object"==typeof d&&"function"==typeof d.then?js(e,t,(s=r,i=[],l={status:"pending",value:null,reason:null,then:function(e){i.push(e)}},d.then((function(){l.status="fulfilled",l.value=s;for(var e=0;e<i.length;e++)(0,i[e])(s)}),(function(e){for(l.status="rejected",l.reason=e,e=0;e<i.length;e++)(0,i[e])(void 0)})),l),Lu()):js(e,t,r,Lu())}catch(n){js(e,t,{then:function(){},status:"rejected",reason:n},Lu())}finally{D.p=o,L.T=u}}function Ns(){}function Os(e,t,n,r){if(5!==e.tag)throw Error(s(476));var a=Rs(e).queue;Ts(e,a,t,z,null===n?Ns:function(){return Is(e),n(r)})}function Rs(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:z,baseState:z,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ho,lastRenderedState:z},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ho,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function Is(e){js(e,Rs(e).next.queue,{},Lu())}function Ls(){return Ca(Kd)}function Ds(){return jo().memoizedState}function zs(){return jo().memoizedState}function Ms(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Lu(),r=oo(t,e=ao(n),n);return null!==r&&(zu(r,0,n),so(r,t,n)),t={cache:Ia()},void(e.payload=t)}t=t.return}}function $s(e,t,n){var r=Lu();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},Bs(e)?qs(t,n):null!==(n=Nr(e,t,n,r))&&(zu(n,0,r),Hs(n,t,r))}function Fs(e,t,n){js(e,t,n,Lu())}function js(e,t,n,r){var a={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(Bs(e))qs(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var s=t.lastRenderedState,i=o(s,n);if(a.hasEagerState=!0,a.eagerState=i,Xn(i,s))return Tr(e,t,a,0),null===ru&&Ar(),!1}catch(e){}if(null!==(n=Nr(e,t,a,r)))return zu(n,0,r),Hs(n,t,r),!0}return!1}function Us(e,t,n,r){if(r={lane:2,revertLane:Tc(),action:r,hasEagerState:!1,eagerState:null,next:null},Bs(e)){if(t)throw Error(s(479))}else null!==(t=Nr(e,n,r,2))&&zu(t,0,2)}function Bs(e){var t=e.alternate;return e===wo||null!==t&&t===wo}function qs(e,t){xo=_o=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Hs(e,t,n){if(4194048&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Pe(e,n)}}var Ws={readContext:Ca,use:Bo,useCallback:No,useContext:No,useEffect:No,useImperativeHandle:No,useLayoutEffect:No,useInsertionEffect:No,useMemo:No,useReducer:No,useRef:No,useState:No,useDebugValue:No,useDeferredValue:No,useTransition:No,useSyncExternalStore:No,useId:No,useHostTransitionStatus:No,useFormState:No,useActionState:No,useOptimistic:No,useMemoCache:No,useCacheRefresh:No},Vs={readContext:Ca,use:Bo,useCallback:function(e,t){return Fo().memoizedState=[e,void 0===t?null:t],e},useContext:Ca,useEffect:vs,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,gs(4194308,4,Ss.bind(null,t,e),n)},useLayoutEffect:function(e,t){return gs(4194308,4,e,t)},useInsertionEffect:function(e,t){gs(4,2,e,t)},useMemo:function(e,t){var n=Fo();t=void 0===t?null:t;var r=e();if(Eo){fe(!0);try{e()}finally{fe(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=Fo();if(void 0!==n){var a=n(t);if(Eo){fe(!0);try{n(t)}finally{fe(!1)}}}else a=t;return r.memoizedState=r.baseState=a,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:a},r.queue=e,e=e.dispatch=$s.bind(null,wo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Fo().memoizedState=e},useState:function(e){var t=(e=es(e)).queue,n=Fs.bind(null,wo,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:xs,useDeferredValue:function(e,t){return Ps(Fo(),e,t)},useTransition:function(){var e=es(!1);return e=Ts.bind(null,wo,e.queue,!0,!1),Fo().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=wo,a=Fo();if(oa){if(void 0===n)throw Error(s(407));n=n()}else{if(n=t(),null===ru)throw Error(s(349));124&ou||Xo(r,t,n)}a.memoizedState=n;var o={value:n,getSnapshot:t};return a.queue=o,vs(Jo.bind(null,r,o,e),[e]),r.flags|=2048,hs(9,{destroy:void 0,resource:void 0},Go.bind(null,r,o,n,t),null),n},useId:function(){var e=Fo(),t=ru.identifierPrefix;if(oa){var n=Yr;t="«"+t+"R"+(n=(Jr&~(1<<32-pe(Jr)-1)).toString(32)+n),0<(n=Co++)&&(t+="H"+n.toString(32)),t+="»"}else t="«"+t+"r"+(n=To++).toString(32)+"»";return e.memoizedState=t},useHostTransitionStatus:Ls,useFormState:us,useActionState:us,useOptimistic:function(e){var t=Fo();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=Us.bind(null,wo,!0,n),n.dispatch=t,[e,t]},useMemoCache:qo,useCacheRefresh:function(){return Fo().memoizedState=Ms.bind(null,wo)}},Qs={readContext:Ca,use:Bo,useCallback:Es,useContext:Ca,useEffect:bs,useImperativeHandle:_s,useInsertionEffect:ws,useLayoutEffect:ks,useMemo:Cs,useReducer:Wo,useRef:ms,useState:function(){return Wo(Ho)},useDebugValue:xs,useDeferredValue:function(e,t){return As(jo(),ko.memoizedState,e,t)},useTransition:function(){var e=Wo(Ho)[0],t=jo().memoizedState;return["boolean"==typeof e?e:Uo(e),t]},useSyncExternalStore:Ko,useId:Ds,useHostTransitionStatus:Ls,useFormState:cs,useActionState:cs,useOptimistic:function(e,t){return ts(jo(),0,e,t)},useMemoCache:qo,useCacheRefresh:zs},Ks={readContext:Ca,use:Bo,useCallback:Es,useContext:Ca,useEffect:bs,useImperativeHandle:_s,useInsertionEffect:ws,useLayoutEffect:ks,useMemo:Cs,useReducer:Qo,useRef:ms,useState:function(){return Qo(Ho)},useDebugValue:xs,useDeferredValue:function(e,t){var n=jo();return null===ko?Ps(n,e,t):As(n,ko.memoizedState,e,t)},useTransition:function(){var e=Qo(Ho)[0],t=jo().memoizedState;return["boolean"==typeof e?e:Uo(e),t]},useSyncExternalStore:Ko,useId:Ds,useHostTransitionStatus:Ls,useFormState:ps,useActionState:ps,useOptimistic:function(e,t){var n=jo();return null!==ko?ts(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])},useMemoCache:qo,useCacheRefresh:zs},Xs=null,Gs=0;function Js(e){var t=Gs;return Gs+=1,null===Xs&&(Xs=[]),Ja(Xs,e,t)}function Ys(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function Zs(e,t){if(t.$$typeof===p)throw Error(s(525));throw e=Object.prototype.toString.call(t),Error(s(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ei(e){return(0,e._init)(e._payload)}function ti(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function a(e,t){return(e=$r(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=67108866,n):r:(t.flags|=67108866,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=67108866),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Br(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function u(e,t,n,r){var o=n.type;return o===g?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===C&&ei(o)===t.type)?(Ys(t=a(t,n.props),n),t.return=e,t):(Ys(t=jr(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=qr(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Ur(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Br(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case h:return Ys(n=jr(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case m:return(t=qr(t,e.mode,n)).return=e,t;case C:return f(e,t=(0,t._init)(t._payload),n)}if(I(t)||N(t))return(t=Ur(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return f(e,Js(t),n);if(t.$$typeof===k)return f(e,Pa(e,t),n);Zs(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==a?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case h:return n.key===a?u(e,t,n,r):null;case m:return n.key===a?c(e,t,n,r):null;case C:return p(e,t,n=(a=n._init)(n._payload),r)}if(I(n)||N(n))return null!==a?null:d(e,t,n,r,null);if("function"==typeof n.then)return p(e,t,Js(n),r);if(n.$$typeof===k)return p(e,t,Pa(e,n),r);Zs(e,n)}return null}function y(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return l(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case h:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a);case m:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case C:return y(e,t,n,r=(0,r._init)(r._payload),a)}if(I(r)||N(r))return d(t,e=e.get(n)||null,r,a,null);if("function"==typeof r.then)return y(e,t,n,Js(r),a);if(r.$$typeof===k)return y(e,t,n,Pa(t,r),a);Zs(t,r)}return null}function v(l,u,c,d){if("object"==typeof c&&null!==c&&c.type===g&&null===c.key&&(c=c.props.children),"object"==typeof c&&null!==c){switch(c.$$typeof){case h:e:{for(var b=c.key;null!==u;){if(u.key===b){if((b=c.type)===g){if(7===u.tag){n(l,u.sibling),(d=a(u,c.props.children)).return=l,l=d;break e}}else if(u.elementType===b||"object"==typeof b&&null!==b&&b.$$typeof===C&&ei(b)===u.type){n(l,u.sibling),Ys(d=a(u,c.props),c),d.return=l,l=d;break e}n(l,u);break}t(l,u),u=u.sibling}c.type===g?((d=Ur(c.props.children,l.mode,d,c.key)).return=l,l=d):(Ys(d=jr(c.type,c.key,c.props,null,l.mode,d),c),d.return=l,l=d)}return i(l);case m:e:{for(b=c.key;null!==u;){if(u.key===b){if(4===u.tag&&u.stateNode.containerInfo===c.containerInfo&&u.stateNode.implementation===c.implementation){n(l,u.sibling),(d=a(u,c.children||[])).return=l,l=d;break e}n(l,u);break}t(l,u),u=u.sibling}(d=qr(c,l.mode,d)).return=l,l=d}return i(l);case C:return v(l,u,c=(b=c._init)(c._payload),d)}if(I(c))return function(a,s,i,l){for(var u=null,c=null,d=s,h=s=0,m=null;null!==d&&h<i.length;h++){d.index>h?(m=d,d=null):m=d.sibling;var g=p(a,d,i[h],l);if(null===g){null===d&&(d=m);break}e&&d&&null===g.alternate&&t(a,d),s=o(g,s,h),null===c?u=g:c.sibling=g,c=g,d=m}if(h===i.length)return n(a,d),oa&&Zr(a,h),u;if(null===d){for(;h<i.length;h++)null!==(d=f(a,i[h],l))&&(s=o(d,s,h),null===c?u=d:c.sibling=d,c=d);return oa&&Zr(a,h),u}for(d=r(d);h<i.length;h++)null!==(m=y(d,a,h,i[h],l))&&(e&&null!==m.alternate&&d.delete(null===m.key?h:m.key),s=o(m,s,h),null===c?u=m:c.sibling=m,c=m);return e&&d.forEach((function(e){return t(a,e)})),oa&&Zr(a,h),u}(l,u,c,d);if(N(c)){if("function"!=typeof(b=N(c)))throw Error(s(150));return function(a,i,l,u){if(null==l)throw Error(s(151));for(var c=null,d=null,h=i,m=i=0,g=null,v=l.next();null!==h&&!v.done;m++,v=l.next()){h.index>m?(g=h,h=null):g=h.sibling;var b=p(a,h,v.value,u);if(null===b){null===h&&(h=g);break}e&&h&&null===b.alternate&&t(a,h),i=o(b,i,m),null===d?c=b:d.sibling=b,d=b,h=g}if(v.done)return n(a,h),oa&&Zr(a,m),c;if(null===h){for(;!v.done;m++,v=l.next())null!==(v=f(a,v.value,u))&&(i=o(v,i,m),null===d?c=v:d.sibling=v,d=v);return oa&&Zr(a,m),c}for(h=r(h);!v.done;m++,v=l.next())null!==(v=y(h,a,m,v.value,u))&&(e&&null!==v.alternate&&h.delete(null===v.key?m:v.key),i=o(v,i,m),null===d?c=v:d.sibling=v,d=v);return e&&h.forEach((function(e){return t(a,e)})),oa&&Zr(a,m),c}(l,u,c=b.call(c),d)}if("function"==typeof c.then)return v(l,u,Js(c),d);if(c.$$typeof===k)return v(l,u,Pa(l,c),d);Zs(l,c)}return"string"==typeof c&&""!==c||"number"==typeof c||"bigint"==typeof c?(c=""+c,null!==u&&6===u.tag?(n(l,u.sibling),(d=a(u,c)).return=l,l=d):(n(l,u),(d=Br(c,l.mode,d)).return=l,l=d),i(l)):n(l,u)}return function(e,t,n,r){try{Gs=0;var a=v(e,t,n,r);return Xs=null,a}catch(t){if(t===Wa||t===Qa)throw t;var o=zr(29,t,null,e.mode);return o.lanes=r,o.return=e,o}}}var ni=ti(!0),ri=ti(!1),ai=F(null),oi=null;function si(e){var t=e.alternate;U(ci,1&ci.current),U(ai,e),null===oi&&(null===t||null!==ho.current||null!==t.memoizedState)&&(oi=e)}function ii(e){if(22===e.tag){if(U(ci,ci.current),U(ai,e),null===oi){var t=e.alternate;null!==t&&null!==t.memoizedState&&(oi=e)}}else li()}function li(){U(ci,ci.current),U(ai,ai.current)}function ui(e){j(ai),oi===e&&(oi=null),j(ci)}var ci=F(0);function di(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||gd(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function fi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:f({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pi={enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Lu(),a=ao(r);a.payload=t,null!=n&&(a.callback=n),null!==(t=oo(e,a,r))&&(zu(t,0,r),so(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Lu(),a=ao(r);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=oo(e,a,r))&&(zu(t,0,r),so(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Lu(),r=ao(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=oo(e,r,n))&&(zu(t,0,n),so(t,e,n))}};function hi(e,t,n,r,a,o,s){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,s):!(t.prototype&&t.prototype.isPureReactComponent&&Gn(n,r)&&Gn(a,o))}function mi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pi.enqueueReplaceState(t,t.state,null)}function gi(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var a in n===t&&(n=f({},n)),e)void 0===n[a]&&(n[a]=e[a]);return n}var yi="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function vi(e){yi(e)}function bi(e){console.error(e)}function wi(e){yi(e)}function ki(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function Si(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function _i(e,t,n){return(n=ao(n)).tag=3,n.payload={element:null},n.callback=function(){ki(e,t)},n}function xi(e){return(e=ao(e)).tag=3,e}function Ei(e,t,n,r){var a=n.type.getDerivedStateFromError;if("function"==typeof a){var o=r.value;e.payload=function(){return a(o)},e.callback=function(){Si(t,n,r)}}var s=n.stateNode;null!==s&&"function"==typeof s.componentDidCatch&&(e.callback=function(){Si(t,n,r),"function"!=typeof a&&(null===xu?xu=new Set([this]):xu.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Ci=Error(s(461)),Pi=!1;function Ai(e,t,n,r){t.child=null===e?ri(t,null,n,r):ni(t,e.child,n,r)}function Ti(e,t,n,r,a){n=n.render;var o=t.ref;if("ref"in r){var s={};for(var i in r)"ref"!==i&&(s[i]=r[i])}else s=r;return Ea(t),r=Ro(e,t,n,s,o,a),i=zo(),null===e||Pi?(oa&&i&&ta(t),t.flags|=1,Ai(e,t,r,a),t.child):(Mo(e,t,a),Xi(e,t,a))}function Ni(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Mr(o)||void 0!==o.defaultProps||null!==n.compare?((e=jr(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Oi(e,t,o,r,a))}if(o=e.child,!Gi(e,a)){var s=o.memoizedProps;if((n=null!==(n=n.compare)?n:Gn)(s,r)&&e.ref===t.ref)return Xi(e,t,a)}return t.flags|=1,(e=$r(o,r)).ref=t.ref,e.return=t,t.child=e}function Oi(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(Gn(o,r)&&e.ref===t.ref){if(Pi=!1,t.pendingProps=r=o,!Gi(e,a))return t.lanes=e.lanes,Xi(e,t,a);131072&e.flags&&(Pi=!0)}}return Di(e,t,n,r,a)}function Ri(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&t.flags){if(r=null!==o?o.baseLanes|n:n,null!==e){for(a=t.child=e.child,o=0;null!==a;)o=o|a.lanes|a.childLanes,a=a.sibling;t.childLanes=o&~r}else t.childLanes=0,t.child=null;return Ii(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Ii(e,t,null!==o?o.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&qa(0,null!==o?o.cachePool:null),null!==o?go(t,o):yo(),ii(t)}else null!==o?(qa(0,o.cachePool),go(t,o),li(),t.memoizedState=null):(null!==e&&qa(0,null),yo(),li());return Ai(e,t,a,n),t.child}function Ii(e,t,n,r){var a=Ba();return a=null===a?null:{parent:Ra._currentValue,pool:a},t.memoizedState={baseLanes:n,cachePool:a},null!==e&&qa(0,null),yo(),ii(t),null!==e&&_a(e,t,r,!0),null}function Li(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=4194816);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(s(284));null!==e&&e.ref===n||(t.flags|=4194816)}}function Di(e,t,n,r,a){return Ea(t),n=Ro(e,t,n,r,void 0,a),r=zo(),null===e||Pi?(oa&&r&&ta(t),t.flags|=1,Ai(e,t,n,a),t.child):(Mo(e,t,a),Xi(e,t,a))}function zi(e,t,n,r,a,o){return Ea(t),t.updateQueue=null,n=Lo(t,r,n,a),Io(e),r=zo(),null===e||Pi?(oa&&r&&ta(t),t.flags|=1,Ai(e,t,n,o),t.child):(Mo(e,t,o),Xi(e,t,o))}function Mi(e,t,n,r,a){if(Ea(t),null===t.stateNode){var o=Lr,s=n.contextType;"object"==typeof s&&null!==s&&(o=Ca(s)),o=new n(r,o),t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,o.updater=pi,t.stateNode=o,o._reactInternals=t,(o=t.stateNode).props=r,o.state=t.memoizedState,o.refs={},no(t),s=n.contextType,o.context="object"==typeof s&&null!==s?Ca(s):Lr,o.state=t.memoizedState,"function"==typeof(s=n.getDerivedStateFromProps)&&(fi(t,n,s,r),o.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(s=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),s!==o.state&&pi.enqueueReplaceState(o,o.state,null),co(t,r,o,a),uo(),o.state=t.memoizedState),"function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){o=t.stateNode;var i=t.memoizedProps,l=gi(n,i);o.props=l;var u=o.context,c=n.contextType;s=Lr,"object"==typeof c&&null!==c&&(s=Ca(c));var d=n.getDerivedStateFromProps;c="function"==typeof d||"function"==typeof o.getSnapshotBeforeUpdate,i=t.pendingProps!==i,c||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(i||u!==s)&&mi(t,o,r,s),to=!1;var f=t.memoizedState;o.state=f,co(t,r,o,a),uo(),u=t.memoizedState,i||f!==u||to?("function"==typeof d&&(fi(t,n,d,r),u=t.memoizedState),(l=to||hi(t,n,l,r,f,u,s))?(c||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4194308)):("function"==typeof o.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),o.props=r,o.state=u,o.context=s,r=l):("function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,ro(e,t),c=gi(n,s=t.memoizedProps),o.props=c,d=t.pendingProps,f=o.context,u=n.contextType,l=Lr,"object"==typeof u&&null!==u&&(l=Ca(u)),(u="function"==typeof(i=n.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==d||f!==l)&&mi(t,o,r,l),to=!1,f=t.memoizedState,o.state=f,co(t,r,o,a),uo();var p=t.memoizedState;s!==d||f!==p||to||null!==e&&null!==e.dependencies&&xa(e.dependencies)?("function"==typeof i&&(fi(t,n,i,r),p=t.memoizedState),(c=to||hi(t,n,c,r,f,p,l)||null!==e&&null!==e.dependencies&&xa(e.dependencies))?(u||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,p,l),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),o.props=r,o.state=p,o.context=l,r=c):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return o=r,Li(e,t),r=!!(128&t.flags),o||r?(o=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:o.render(),t.flags|=1,null!==e&&r?(t.child=ni(t,e.child,null,a),t.child=ni(t,null,n,a)):Ai(e,t,n,a),t.memoizedState=o.state,e=t.child):e=Xi(e,t,a),e}function $i(e,t,n,r){return pa(),t.flags|=256,Ai(e,t,n,r),t.child}var Fi={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function ji(e){return{baseLanes:e,cachePool:Ha()}}function Ui(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=gu),e}function Bi(e,t,n){var r,a=t.pendingProps,o=!1,i=!!(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(2&ci.current)),r&&(o=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(oa){if(o?si(t):li(),oa){var l,u=aa;if(l=u){e:{for(l=u,u=ia;8!==l.nodeType;){if(!u){u=null;break e}if(null===(l=yd(l.nextSibling))){u=null;break e}}u=l}null!==u?(t.memoizedState={dehydrated:u,treeContext:null!==Gr?{id:Jr,overflow:Yr}:null,retryLane:536870912,hydrationErrors:null},(l=zr(18,null,null,0)).stateNode=u,l.return=t,t.child=l,ra=t,aa=null,l=!0):l=!1}l||ua(t)}if(null!==(u=t.memoizedState)&&null!==(u=u.dehydrated))return gd(u)?t.lanes=32:t.lanes=536870912,null;ui(t)}return u=a.children,a=a.fallback,o?(li(),u=Hi({mode:"hidden",children:u},o=t.mode),a=Ur(a,o,n,null),u.return=t,a.return=t,u.sibling=a,t.child=u,(o=t.child).memoizedState=ji(n),o.childLanes=Ui(e,r,n),t.memoizedState=Fi,a):(si(t),qi(t,u))}if(null!==(l=e.memoizedState)&&null!==(u=l.dehydrated)){if(i)256&t.flags?(si(t),t.flags&=-257,t=Wi(e,t,n)):null!==t.memoizedState?(li(),t.child=e.child,t.flags|=128,t=null):(li(),o=a.fallback,u=t.mode,a=Hi({mode:"visible",children:a.children},u),(o=Ur(o,u,n,null)).flags|=2,a.return=t,o.return=t,a.sibling=o,t.child=a,ni(t,e.child,null,n),(a=t.child).memoizedState=ji(n),a.childLanes=Ui(e,r,n),t.memoizedState=Fi,t=o);else if(si(t),gd(u)){if(r=u.nextSibling&&u.nextSibling.dataset)var c=r.dgst;r=c,(a=Error(s(419))).stack="",a.digest=r,ma({value:a,source:null,stack:null}),t=Wi(e,t,n)}else if(Pi||_a(e,t,n,!1),r=0!==(n&e.childLanes),Pi||r){if(null!==(r=ru)&&0!==(a=0!==((a=42&(a=n&-n)?1:Ae(a))&(r.suspendedLanes|n))?0:a)&&a!==l.retryLane)throw l.retryLane=a,Or(e,a),zu(r,0,a),Ci;"$?"===u.data||Qu(),t=Wi(e,t,n)}else"$?"===u.data?(t.flags|=192,t.child=e.child,t=null):(e=l.treeContext,aa=yd(u.nextSibling),ra=t,oa=!0,sa=null,ia=!1,null!==e&&(Kr[Xr++]=Jr,Kr[Xr++]=Yr,Kr[Xr++]=Gr,Jr=e.id,Yr=e.overflow,Gr=t),(t=qi(t,a.children)).flags|=4096);return t}return o?(li(),o=a.fallback,u=t.mode,c=(l=e.child).sibling,(a=$r(l,{mode:"hidden",children:a.children})).subtreeFlags=65011712&l.subtreeFlags,null!==c?o=$r(c,o):(o=Ur(o,u,n,null)).flags|=2,o.return=t,a.return=t,a.sibling=o,t.child=a,a=o,o=t.child,null===(u=e.child.memoizedState)?u=ji(n):(null!==(l=u.cachePool)?(c=Ra._currentValue,l=l.parent!==c?{parent:c,pool:c}:l):l=Ha(),u={baseLanes:u.baseLanes|n,cachePool:l}),o.memoizedState=u,o.childLanes=Ui(e,r,n),t.memoizedState=Fi,a):(si(t),e=(n=e.child).sibling,(n=$r(n,{mode:"visible",children:a.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function qi(e,t){return(t=Hi({mode:"visible",children:t},e.mode)).return=e,e.child=t}function Hi(e,t){return(e=zr(22,e,null,t)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function Wi(e,t,n){return ni(t,e.child,null,n),(e=qi(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Vi(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),ka(e.return,t,n)}function Qi(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Ki(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Ai(e,t,r.children,n),2&(r=ci.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Vi(e,n,t);else if(19===e.tag)Vi(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(U(ci,r),a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===di(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Qi(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===di(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Qi(t,!0,n,null,o);break;case"together":Qi(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Xi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),pu|=t.lanes,0===(n&t.childLanes)){if(null===e)return null;if(_a(e,t,n,!1),0===(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(s(153));if(null!==t.child){for(n=$r(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$r(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Gi(e,t){return 0!==(e.lanes&t)||!(null===(e=e.dependencies)||!xa(e))}function Ji(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Pi=!0;else{if(!(Gi(e,n)||128&t.flags))return Pi=!1,function(e,t,n){switch(t.tag){case 3:V(t,t.stateNode.containerInfo),ba(0,Ra,e.memoizedState.cache),pa();break;case 27:case 5:K(t);break;case 4:V(t,t.stateNode.containerInfo);break;case 10:ba(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(si(t),t.flags|=128,null):0!==(n&t.child.childLanes)?Bi(e,t,n):(si(t),null!==(e=Xi(e,t,n))?e.sibling:null);si(t);break;case 19:var a=!!(128&e.flags);if((r=0!==(n&t.childLanes))||(_a(e,t,n,!1),r=0!==(n&t.childLanes)),a){if(r)return Ki(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),U(ci,ci.current),r)break;return null;case 22:case 23:return t.lanes=0,Ri(e,t,n);case 24:ba(0,Ra,e.memoizedState.cache)}return Xi(e,t,n)}(e,t,n);Pi=!!(131072&e.flags)}else Pi=!1,oa&&1048576&t.flags&&ea(t,Qr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,a=r._init;if(r=a(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((a=r.$$typeof)===S){t.tag=11,t=Ti(null,t,r,e,n);break e}if(a===E){t.tag=14,t=Ni(null,t,r,e,n);break e}}throw t=R(r)||r,Error(s(306,t,""))}Mr(r)?(e=gi(r,e),t.tag=1,t=Mi(null,t,r,e,n)):(t.tag=0,t=Di(null,t,r,e,n))}return t;case 0:return Di(e,t,t.type,t.pendingProps,n);case 1:return Mi(e,t,r=t.type,a=gi(r,t.pendingProps),n);case 3:e:{if(V(t,t.stateNode.containerInfo),null===e)throw Error(s(387));r=t.pendingProps;var o=t.memoizedState;a=o.element,ro(e,t),co(t,r,null,n);var i=t.memoizedState;if(r=i.cache,ba(0,Ra,r),r!==o.cache&&Sa(t,[Ra],n,!0),uo(),r=i.element,o.isDehydrated){if(o={element:r,isDehydrated:!1,cache:i.cache},t.updateQueue.baseState=o,t.memoizedState=o,256&t.flags){t=$i(e,t,r,n);break e}if(r!==a){ma(a=xr(Error(s(424)),t)),t=$i(e,t,r,n);break e}for(e=9===(e=t.stateNode.containerInfo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,aa=yd(e.firstChild),ra=t,oa=!0,sa=null,ia=!0,n=ri(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(pa(),r===a){t=Xi(e,t,n);break e}Ai(e,t,r,n)}t=t.child}return t;case 26:return Li(e,t),null===e?(n=Ad(t.type,null,t.pendingProps,null))?t.memoizedState=n:oa||(n=t.type,e=t.pendingProps,(r=rd(H.current).createElement(n))[Re]=t,r[Ie]=e,ed(r,n,e),We(r),t.stateNode=r):t.memoizedState=Ad(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return K(t),null===e&&oa&&(r=t.stateNode=wd(t.type,t.pendingProps,H.current),ra=t,ia=!0,a=aa,pd(t.type)?(vd=a,aa=yd(r.firstChild)):aa=a),Ai(e,t,t.pendingProps.children,n),Li(e,t),null===e&&(t.flags|=4194304),t.child;case 5:return null===e&&oa&&((a=r=aa)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var a=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Fe])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(o=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(o!==a.rel||e.getAttribute("href")!==(null==a.href||""===a.href?null:a.href)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin)||e.getAttribute("title")!==(null==a.title?null:a.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((o=e.getAttribute("src"))!==(null==a.src?null:a.src)||e.getAttribute("type")!==(null==a.type?null:a.type)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin))&&o&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var o=null==a.name?null:""+a.name;if("hidden"===a.type&&e.getAttribute("name")===o)return e}if(null===(e=yd(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,ia))?(t.stateNode=r,ra=t,aa=yd(r.firstChild),ia=!1,a=!0):a=!1),a||ua(t)),K(t),a=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,r=o.children,sd(a,o)?r=null:null!==i&&sd(a,i)&&(t.flags|=32),null!==t.memoizedState&&(a=Ro(e,t,Do,null,null,n),Kd._currentValue=a),Li(e,t),Ai(e,t,r,n),t.child;case 6:return null===e&&oa&&((e=n=aa)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=yd(e.nextSibling)))return null}return e}(n,t.pendingProps,ia))?(t.stateNode=n,ra=t,aa=null,e=!0):e=!1),e||ua(t)),null;case 13:return Bi(e,t,n);case 4:return V(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ni(t,null,r,n):Ai(e,t,r,n),t.child;case 11:return Ti(e,t,t.type,t.pendingProps,n);case 7:return Ai(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ai(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,ba(0,t.type,r.value),Ai(e,t,r.children,n),t.child;case 9:return a=t.type._context,r=t.pendingProps.children,Ea(t),r=r(a=Ca(a)),t.flags|=1,Ai(e,t,r,n),t.child;case 14:return Ni(e,t,t.type,t.pendingProps,n);case 15:return Oi(e,t,t.type,t.pendingProps,n);case 19:return Ki(e,t,n);case 31:return r=t.pendingProps,n=t.mode,r={mode:r.mode,children:r.children},null===e?((n=Hi(r,n)).ref=t.ref,t.child=n,n.return=t,t=n):((n=$r(e.child,r)).ref=t.ref,t.child=n,n.return=t,t=n),t;case 22:return Ri(e,t,n);case 24:return Ea(t),r=Ca(Ra),null===e?(null===(a=Ba())&&(a=ru,o=Ia(),a.pooledCache=o,o.refCount++,null!==o&&(a.pooledCacheLanes|=n),a=o),t.memoizedState={parent:r,cache:a},no(t),ba(0,Ra,a)):(0!==(e.lanes&n)&&(ro(e,t),co(t,null,null,n),uo()),a=e.memoizedState,o=t.memoizedState,a.parent!==r?(a={parent:r,cache:r},t.memoizedState=a,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=a),ba(0,Ra,r)):(r=o.cache,ba(0,Ra,r),r!==a.cache&&Sa(t,[Ra],n,!0))),Ai(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(s(156,t.tag))}function Yi(e){e.flags|=4}function Zi(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Ud(t)){if(null!==(t=ai.current)&&((4194048&ou)===ou?null!==oi:(62914560&ou)!==ou&&!(536870912&ou)||t!==oi))throw Ya=Ka,Va;e.flags|=8192}}function el(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?_e():536870912,e.lanes|=t,yu|=t)}function tl(e,t){if(!oa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function nl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=65011712&a.subtreeFlags,r|=65011712&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function rl(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return nl(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),wa(Ra),Q(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(fa(t)?Yi(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,ha())),nl(t),null;case 26:return n=t.memoizedState,null===e?(Yi(t),null!==n?(nl(t),Zi(t,n)):(nl(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Yi(t),nl(t),Zi(t,n)):(nl(t),t.flags&=-16777217):(e.memoizedProps!==r&&Yi(t),nl(t),t.flags&=-16777217),null;case 27:X(t),n=H.current;var a=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Yi(t);else{if(!r){if(null===t.stateNode)throw Error(s(166));return nl(t),null}e=B.current,fa(t)?ca(t):(e=wd(a,r,n),t.stateNode=e,Yi(t))}return nl(t),null;case 5:if(X(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Yi(t);else{if(!r){if(null===t.stateNode)throw Error(s(166));return nl(t),null}if(e=B.current,fa(t))ca(t);else{switch(a=rd(H.current),e){case 1:e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=a.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?a.createElement("select",{is:r.is}):a.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?a.createElement(n,{is:r.is}):a.createElement(n)}}e[Re]=t,e[Ie]=r;e:for(a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&27!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break e;for(;null===a.sibling;){if(null===a.return||a.return===t)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}t.stateNode=e;e:switch(ed(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Yi(t)}}return nl(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Yi(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(s(166));if(e=H.current,fa(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(a=ra))switch(a.tag){case 27:case 5:r=a.memoizedProps}e[Re]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Gc(e.nodeValue,n)))||ua(t)}else(e=rd(e).createTextNode(r))[Re]=t,t.stateNode=e}return nl(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(a=fa(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(s(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(s(317));a[Re]=t}else pa(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;nl(t),a=!1}else a=ha(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=a),a=!0;if(!a)return 256&t.flags?(ui(t),t):(ui(t),null)}if(ui(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){a=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(a=r.alternate.memoizedState.cachePool.pool);var o=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(o=r.memoizedState.cachePool.pool),o!==a&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),el(t,t.updateQueue),nl(t),null;case 4:return Q(),null===e&&jc(t.stateNode.containerInfo),nl(t),null;case 10:return wa(t.type),nl(t),null;case 19:if(j(ci),null===(a=t.memoizedState))return nl(t),null;if(r=!!(128&t.flags),null===(o=a.rendering))if(r)tl(a,!1);else{if(0!==fu||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(o=di(e))){for(t.flags|=128,tl(a,!1),e=o.updateQueue,t.updateQueue=e,el(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Fr(n,e),n=n.sibling;return U(ci,1&ci.current|2),t.child}e=e.sibling}null!==a.tail&&te()>Su&&(t.flags|=128,r=!0,tl(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=di(o))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,el(t,e),tl(a,!0),null===a.tail&&"hidden"===a.tailMode&&!o.alternate&&!oa)return nl(t),null}else 2*te()-a.renderingStartTime>Su&&536870912!==n&&(t.flags|=128,r=!0,tl(a,!1),t.lanes=4194304);a.isBackwards?(o.sibling=t.child,t.child=o):(null!==(e=a.last)?e.sibling=o:t.child=o,a.last=o)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=te(),t.sibling=null,e=ci.current,U(ci,r?1&e|2:1&e),t):(nl(t),null);case 22:case 23:return ui(t),vo(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(nl(t),6&t.subtreeFlags&&(t.flags|=8192)):nl(t),null!==(n=t.updateQueue)&&el(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&j(Ua),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),wa(Ra),nl(t),null;case 25:case 30:return null}throw Error(s(156,t.tag))}function al(e,t){switch(na(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return wa(Ra),Q(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return X(t),null;case 13:if(ui(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(s(340));pa()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return j(ci),null;case 4:return Q(),null;case 10:return wa(t.type),null;case 22:case 23:return ui(t),vo(),null!==e&&j(Ua),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return wa(Ra),null;default:return null}}function ol(e,t){switch(na(t),t.tag){case 3:wa(Ra),Q();break;case 26:case 27:case 5:X(t);break;case 4:Q();break;case 13:ui(t);break;case 19:j(ci);break;case 10:wa(t.type);break;case 22:case 23:ui(t),vo(),null!==e&&j(Ua);break;case 24:wa(Ra)}}function sl(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var a=r.next;n=a;do{if((n.tag&e)===e){r=void 0;var o=n.create,s=n.inst;r=o(),s.destroy=r}n=n.next}while(n!==a)}}catch(e){cc(t,t.return,e)}}function il(e,t,n){try{var r=t.updateQueue,a=null!==r?r.lastEffect:null;if(null!==a){var o=a.next;r=o;do{if((r.tag&e)===e){var s=r.inst,i=s.destroy;if(void 0!==i){s.destroy=void 0,a=t;var l=n,u=i;try{u()}catch(e){cc(a,l,e)}}}r=r.next}while(r!==o)}}catch(e){cc(t,t.return,e)}}function ll(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{po(t,n)}catch(t){cc(e,e.return,t)}}}function ul(e,t,n){n.props=gi(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){cc(e,t,n)}}function cl(e,t){try{var n=e.ref;if(null!==n){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}"function"==typeof n?e.refCleanup=n(r):n.current=r}}catch(n){cc(e,t,n)}}function dl(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){cc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){cc(e,t,n)}else n.current=null}function fl(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){cc(e,e.return,t)}}function pl(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var a=null,o=null,i=null,l=null,u=null,c=null,d=null;for(h in n){var f=n[h];if(n.hasOwnProperty(h)&&null!=f)switch(h){case"checked":case"value":break;case"defaultValue":u=f;default:r.hasOwnProperty(h)||Yc(e,t,h,null,r,f)}}for(var p in r){var h=r[p];if(f=n[p],r.hasOwnProperty(p)&&(null!=h||null!=f))switch(p){case"type":o=h;break;case"name":a=h;break;case"checked":c=h;break;case"defaultChecked":d=h;break;case"value":i=h;break;case"defaultValue":l=h;break;case"children":case"dangerouslySetInnerHTML":if(null!=h)throw Error(s(137,t));break;default:h!==f&&Yc(e,t,p,h,r,f)}}return void gt(e,i,l,u,c,d,o,a);case"select":for(o in h=i=l=p=null,n)if(u=n[o],n.hasOwnProperty(o)&&null!=u)switch(o){case"value":break;case"multiple":h=u;default:r.hasOwnProperty(o)||Yc(e,t,o,null,r,u)}for(a in r)if(o=r[a],u=n[a],r.hasOwnProperty(a)&&(null!=o||null!=u))switch(a){case"value":p=o;break;case"defaultValue":l=o;break;case"multiple":i=o;default:o!==u&&Yc(e,t,a,o,r,u)}return t=l,n=i,r=h,void(null!=p?bt(e,!!n,p,!1):!!r!=!!n&&(null!=t?bt(e,!!n,t,!0):bt(e,!!n,n?[]:"",!1)));case"textarea":for(l in h=p=null,n)if(a=n[l],n.hasOwnProperty(l)&&null!=a&&!r.hasOwnProperty(l))switch(l){case"value":case"children":break;default:Yc(e,t,l,null,r,a)}for(i in r)if(a=r[i],o=n[i],r.hasOwnProperty(i)&&(null!=a||null!=o))switch(i){case"value":p=a;break;case"defaultValue":h=a;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=a)throw Error(s(91));break;default:a!==o&&Yc(e,t,i,a,r,o)}return void wt(e,p,h);case"option":for(var m in n)p=n[m],n.hasOwnProperty(m)&&null!=p&&!r.hasOwnProperty(m)&&("selected"===m?e.selected=!1:Yc(e,t,m,null,r,p));for(u in r)p=r[u],h=n[u],!r.hasOwnProperty(u)||p===h||null==p&&null==h||("selected"===u?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Yc(e,t,u,p,r,h));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Yc(e,t,g,null,r,p);for(c in r)if(p=r[c],h=n[c],r.hasOwnProperty(c)&&p!==h&&(null!=p||null!=h))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(s(137,t));break;default:Yc(e,t,c,p,r,h)}return;default:if(Ct(t)){for(var y in n)p=n[y],n.hasOwnProperty(y)&&void 0!==p&&!r.hasOwnProperty(y)&&Zc(e,t,y,void 0,r,p);for(d in r)p=r[d],h=n[d],!r.hasOwnProperty(d)||p===h||void 0===p&&void 0===h||Zc(e,t,d,p,r,h);return}}for(var v in n)p=n[v],n.hasOwnProperty(v)&&null!=p&&!r.hasOwnProperty(v)&&Yc(e,t,v,null,r,p);for(f in r)p=r[f],h=n[f],!r.hasOwnProperty(f)||p===h||null==p&&null==h||Yc(e,t,f,p,r,h)}(r,e.type,n,t),r[Ie]=t}catch(t){cc(e,e.return,t)}}function hl(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&pd(e.type)||4===e.tag}function ml(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||hl(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&pd(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function gl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?(9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).insertBefore(e,t):((t=9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jc));else if(4!==r&&(27===r&&pd(e.type)&&(n=e.stateNode,t=null),null!==(e=e.child)))for(gl(e,t,n),e=e.sibling;null!==e;)gl(e,t,n),e=e.sibling}function yl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&(27===r&&pd(e.type)&&(n=e.stateNode),null!==(e=e.child)))for(yl(e,t,n),e=e.sibling;null!==e;)yl(e,t,n),e=e.sibling}function vl(e){var t=e.stateNode,n=e.memoizedProps;try{for(var r=e.type,a=t.attributes;a.length;)t.removeAttributeNode(a[0]);ed(t,r,n),t[Re]=e,t[Ie]=n}catch(t){cc(e,e.return,t)}}var bl=!1,wl=!1,kl=!1,Sl="function"==typeof WeakSet?WeakSet:Set,_l=null;function xl(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:Ml(e,n),4&r&&sl(5,n);break;case 1:if(Ml(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){cc(n,n.return,e)}else{var a=gi(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(a,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){cc(n,n.return,e)}}64&r&&ll(n),512&r&&cl(n,n.return);break;case 3:if(Ml(e,n),64&r&&null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:t=n.child.stateNode}try{po(e,t)}catch(e){cc(n,n.return,e)}}break;case 27:null===t&&4&r&&vl(n);case 26:case 5:Ml(e,n),null===t&&4&r&&fl(n),512&r&&cl(n,n.return);break;case 12:Ml(e,n);break;case 13:Ml(e,n),4&r&&Nl(e,n),64&r&&null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)&&function(e,t){var n=e.ownerDocument;if("$?"!==e.data||"complete"===n.readyState)t();else{var r=function(){t(),n.removeEventListener("DOMContentLoaded",r)};n.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,n=hc.bind(null,n));break;case 22:if(!(r=null!==n.memoizedState||bl)){t=null!==t&&null!==t.memoizedState||wl,a=bl;var o=wl;bl=r,(wl=t)&&!o?Fl(e,n,!!(8772&n.subtreeFlags)):Ml(e,n),bl=a,wl=o}break;case 30:break;default:Ml(e,n)}}function El(e){var t=e.alternate;null!==t&&(e.alternate=null,El(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&je(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var Cl=null,Pl=!1;function Al(e,t,n){for(n=n.child;null!==n;)Tl(e,t,n),n=n.sibling}function Tl(e,t,n){if(de&&"function"==typeof de.onCommitFiberUnmount)try{de.onCommitFiberUnmount(ce,n)}catch(e){}switch(n.tag){case 26:wl||dl(n,t),Al(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:wl||dl(n,t);var r=Cl,a=Pl;pd(n.type)&&(Cl=n.stateNode,Pl=!1),Al(e,t,n),kd(n.stateNode),Cl=r,Pl=a;break;case 5:wl||dl(n,t);case 6:if(r=Cl,a=Pl,Cl=null,Al(e,t,n),Pl=a,null!==(Cl=r))if(Pl)try{(9===Cl.nodeType?Cl.body:"HTML"===Cl.nodeName?Cl.ownerDocument.body:Cl).removeChild(n.stateNode)}catch(e){cc(n,t,e)}else try{Cl.removeChild(n.stateNode)}catch(e){cc(n,t,e)}break;case 18:null!==Cl&&(Pl?(hd(9===(e=Cl).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,n.stateNode),Af(e)):hd(Cl,n.stateNode));break;case 4:r=Cl,a=Pl,Cl=n.stateNode.containerInfo,Pl=!0,Al(e,t,n),Cl=r,Pl=a;break;case 0:case 11:case 14:case 15:wl||il(2,n,t),wl||il(4,n,t),Al(e,t,n);break;case 1:wl||(dl(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&ul(n,t,r)),Al(e,t,n);break;case 21:Al(e,t,n);break;case 22:wl=(r=wl)||null!==n.memoizedState,Al(e,t,n),wl=r;break;default:Al(e,t,n)}}function Nl(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{Af(e)}catch(e){cc(t,t.return,e)}}function Ol(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new Sl),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new Sl),t;default:throw Error(s(435,e.tag))}}(e);t.forEach((function(t){var r=mc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function Rl(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r],o=e,i=t,l=i;e:for(;null!==l;){switch(l.tag){case 27:if(pd(l.type)){Cl=l.stateNode,Pl=!1;break e}break;case 5:Cl=l.stateNode,Pl=!1;break e;case 3:case 4:Cl=l.stateNode.containerInfo,Pl=!0;break e}l=l.return}if(null===Cl)throw Error(s(160));Tl(o,i,a),Cl=null,Pl=!1,null!==(o=a.alternate)&&(o.return=null),a.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)Ll(t,e),t=t.sibling}var Il=null;function Ll(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:Rl(t,e),Dl(e),4&r&&(il(3,e,e.return),sl(3,e),il(5,e,e.return));break;case 1:Rl(t,e),Dl(e),512&r&&(wl||null===n||dl(n,n.return)),64&r&&bl&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var a=Il;if(Rl(t,e),Dl(e),512&r&&(wl||null===n||dl(n,n.return)),4&r){var o=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,a=a.ownerDocument||a;t:switch(r){case"title":(!(o=a.getElementsByTagName("title")[0])||o[Fe]||o[Re]||"http://www.w3.org/2000/svg"===o.namespaceURI||o.hasAttribute("itemprop"))&&(o=a.createElement(r),a.head.insertBefore(o,a.querySelector("head > title"))),ed(o,r,n),o[Re]=e,We(o),r=o;break e;case"link":var i=Fd("link","href",a).get(r+(n.href||""));if(i)for(var l=0;l<i.length;l++)if((o=i[l]).getAttribute("href")===(null==n.href||""===n.href?null:n.href)&&o.getAttribute("rel")===(null==n.rel?null:n.rel)&&o.getAttribute("title")===(null==n.title?null:n.title)&&o.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){i.splice(l,1);break t}ed(o=a.createElement(r),r,n),a.head.appendChild(o);break;case"meta":if(i=Fd("meta","content",a).get(r+(n.content||"")))for(l=0;l<i.length;l++)if((o=i[l]).getAttribute("content")===(null==n.content?null:""+n.content)&&o.getAttribute("name")===(null==n.name?null:n.name)&&o.getAttribute("property")===(null==n.property?null:n.property)&&o.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&o.getAttribute("charset")===(null==n.charSet?null:n.charSet)){i.splice(l,1);break t}ed(o=a.createElement(r),r,n),a.head.appendChild(o);break;default:throw Error(s(468,r))}o[Re]=e,We(o),r=o}e.stateNode=r}else jd(a,e.type,e.stateNode);else e.stateNode=Ld(a,r,e.memoizedProps);else o!==r?(null===o?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):o.count--,null===r?jd(a,e.type,e.stateNode):Ld(a,r,e.memoizedProps)):null===r&&null!==e.stateNode&&pl(e,e.memoizedProps,n.memoizedProps)}break;case 27:Rl(t,e),Dl(e),512&r&&(wl||null===n||dl(n,n.return)),null!==n&&4&r&&pl(e,e.memoizedProps,n.memoizedProps);break;case 5:if(Rl(t,e),Dl(e),512&r&&(wl||null===n||dl(n,n.return)),32&e.flags){a=e.stateNode;try{St(a,"")}catch(t){cc(e,e.return,t)}}4&r&&null!=e.stateNode&&pl(e,a=e.memoizedProps,null!==n?n.memoizedProps:a),1024&r&&(kl=!0);break;case 6:if(Rl(t,e),Dl(e),4&r){if(null===e.stateNode)throw Error(s(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){cc(e,e.return,t)}}break;case 3:if($d=null,a=Il,Il=xd(t.containerInfo),Rl(t,e),Il=a,Dl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Af(t.containerInfo)}catch(t){cc(e,e.return,t)}kl&&(kl=!1,zl(e));break;case 4:r=Il,Il=xd(e.stateNode.containerInfo),Rl(t,e),Dl(e),Il=r;break;case 12:default:Rl(t,e),Dl(e);break;case 13:Rl(t,e),Dl(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(ku=te()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Ol(e,r));break;case 22:a=null!==e.memoizedState;var u=null!==n&&null!==n.memoizedState,c=bl,d=wl;if(bl=c||a,wl=d||u,Rl(t,e),wl=d,bl=c,Dl(e),8192&r)e:for(t=e.stateNode,t._visibility=a?-2&t._visibility:1|t._visibility,a&&(null===n||u||bl||wl||$l(e)),n=null,t=e;;){if(5===t.tag||26===t.tag){if(null===n){u=n=t;try{if(o=u.stateNode,a)"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none";else{l=u.stateNode;var f=u.memoizedProps.style,p=null!=f&&f.hasOwnProperty("display")?f.display:null;l.style.display=null==p||"boolean"==typeof p?"":(""+p).trim()}}catch(e){cc(u,u.return,e)}}}else if(6===t.tag){if(null===n){u=t;try{u.stateNode.nodeValue=a?"":u.memoizedProps}catch(e){cc(u,u.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,Ol(e,n));break;case 19:Rl(t,e),Dl(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Ol(e,r));case 30:case 21:}}function Dl(e){var t=e.flags;if(2&t){try{for(var n,r=e.return;null!==r;){if(hl(r)){n=r;break}r=r.return}if(null==n)throw Error(s(160));switch(n.tag){case 27:var a=n.stateNode;yl(e,ml(e),a);break;case 5:var o=n.stateNode;32&n.flags&&(St(o,""),n.flags&=-33),yl(e,ml(e),o);break;case 3:case 4:var i=n.stateNode.containerInfo;gl(e,ml(e),i);break;default:throw Error(s(161))}}catch(t){cc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function zl(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;zl(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function Ml(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)xl(e,t.alternate,t),t=t.sibling}function $l(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:il(4,t,t.return),$l(t);break;case 1:dl(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&ul(t,t.return,n),$l(t);break;case 27:kd(t.stateNode);case 26:case 5:dl(t,t.return),$l(t);break;case 22:null===t.memoizedState&&$l(t);break;default:$l(t)}e=e.sibling}}function Fl(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,a=e,o=t,s=o.flags;switch(o.tag){case 0:case 11:case 15:Fl(a,o,n),sl(4,o);break;case 1:if(Fl(a,o,n),"function"==typeof(a=(r=o).stateNode).componentDidMount)try{a.componentDidMount()}catch(e){cc(r,r.return,e)}if(null!==(a=(r=o).updateQueue)){var i=r.stateNode;try{var l=a.shared.hiddenCallbacks;if(null!==l)for(a.shared.hiddenCallbacks=null,a=0;a<l.length;a++)fo(l[a],i)}catch(e){cc(r,r.return,e)}}n&&64&s&&ll(o),cl(o,o.return);break;case 27:vl(o);case 26:case 5:Fl(a,o,n),n&&null===r&&4&s&&fl(o),cl(o,o.return);break;case 12:Fl(a,o,n);break;case 13:Fl(a,o,n),n&&4&s&&Nl(a,o);break;case 22:null===o.memoizedState&&Fl(a,o,n),cl(o,o.return);break;case 30:break;default:Fl(a,o,n)}t=t.sibling}}function jl(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&La(n))}function Ul(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&La(e))}function Bl(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)ql(e,t,n,r),t=t.sibling}function ql(e,t,n,r){var a=t.flags;switch(t.tag){case 0:case 11:case 15:Bl(e,t,n,r),2048&a&&sl(9,t);break;case 1:case 13:default:Bl(e,t,n,r);break;case 3:Bl(e,t,n,r),2048&a&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&La(e)));break;case 12:if(2048&a){Bl(e,t,n,r),e=t.stateNode;try{var o=t.memoizedProps,s=o.id,i=o.onPostCommit;"function"==typeof i&&i(s,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){cc(t,t.return,e)}}else Bl(e,t,n,r);break;case 23:break;case 22:o=t.stateNode,s=t.alternate,null!==t.memoizedState?2&o._visibility?Bl(e,t,n,r):Wl(e,t):2&o._visibility?Bl(e,t,n,r):(o._visibility|=2,Hl(e,t,n,r,!!(10256&t.subtreeFlags))),2048&a&&jl(s,t);break;case 24:Bl(e,t,n,r),2048&a&&Ul(t.alternate,t)}}function Hl(e,t,n,r,a){for(a=a&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var o=e,s=t,i=n,l=r,u=s.flags;switch(s.tag){case 0:case 11:case 15:Hl(o,s,i,l,a),sl(8,s);break;case 23:break;case 22:var c=s.stateNode;null!==s.memoizedState?2&c._visibility?Hl(o,s,i,l,a):Wl(o,s):(c._visibility|=2,Hl(o,s,i,l,a)),a&&2048&u&&jl(s.alternate,s);break;case 24:Hl(o,s,i,l,a),a&&2048&u&&Ul(s.alternate,s);break;default:Hl(o,s,i,l,a)}t=t.sibling}}function Wl(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,a=r.flags;switch(r.tag){case 22:Wl(n,r),2048&a&&jl(r.alternate,r);break;case 24:Wl(n,r),2048&a&&Ul(r.alternate,r);break;default:Wl(n,r)}t=t.sibling}}var Vl=8192;function Ql(e){if(e.subtreeFlags&Vl)for(e=e.child;null!==e;)Kl(e),e=e.sibling}function Kl(e){switch(e.tag){case 26:Ql(e),e.flags&Vl&&null!==e.memoizedState&&function(e,t,n){if(null===Bd)throw Error(s(475));var r=Bd;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var a=Td(n.href),o=e.querySelector(Nd(a));if(o)return null!==(e=o._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Hd.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=o,void We(o);o=e.ownerDocument||e,n=Od(n),(a=Sd.get(a))&&zd(n,a),We(o=o.createElement("link"));var i=o;i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),ed(o,"link",n),t.instance=o}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=Hd.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(Il,e.memoizedState,e.memoizedProps);break;case 5:default:Ql(e);break;case 3:case 4:var t=Il;Il=xd(e.stateNode.containerInfo),Ql(e),Il=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=Vl,Vl=16777216,Ql(e),Vl=t):Ql(e))}}function Xl(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Gl(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];_l=r,Zl(r,e)}Xl(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Jl(e),e=e.sibling}function Jl(e){switch(e.tag){case 0:case 11:case 15:Gl(e),2048&e.flags&&il(9,e,e.return);break;case 3:case 12:default:Gl(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&2&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-3,Yl(e)):Gl(e)}}function Yl(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];_l=r,Zl(r,e)}Xl(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:il(8,t,t.return),Yl(t);break;case 22:2&(n=t.stateNode)._visibility&&(n._visibility&=-3,Yl(t));break;default:Yl(t)}e=e.sibling}}function Zl(e,t){for(;null!==_l;){var n=_l;switch(n.tag){case 0:case 11:case 15:il(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:La(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,_l=r;else e:for(n=e;null!==_l;){var a=(r=_l).sibling,o=r.return;if(El(r),r===n){_l=null;break e}if(null!==a){a.return=o,_l=a;break e}_l=o}}}var eu={getCacheForType:function(e){var t=Ca(Ra),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},tu="function"==typeof WeakMap?WeakMap:Map,nu=0,ru=null,au=null,ou=0,su=0,iu=null,lu=!1,uu=!1,cu=!1,du=0,fu=0,pu=0,hu=0,mu=0,gu=0,yu=0,vu=null,bu=null,wu=!1,ku=0,Su=1/0,_u=null,xu=null,Eu=0,Cu=null,Pu=null,Au=0,Tu=0,Nu=null,Ou=null,Ru=0,Iu=null;function Lu(){return 2&nu&&0!==ou?ou&-ou:null!==L.T?0!==Ma?Ma:Tc():Ne()}function Du(){0===gu&&(gu=536870912&ou&&!oa?536870912:Se());var e=ai.current;return null!==e&&(e.flags|=32),gu}function zu(e,t,n){(e!==ru||2!==su&&9!==su)&&null===e.cancelPendingCommit||(qu(e,0),ju(e,ou,gu,!1)),Ee(e,n),2&nu&&e===ru||(e===ru&&(!(2&nu)&&(hu|=n),4===fu&&ju(e,ou,gu,!1)),Sc(e))}function Mu(e,t,n){if(6&nu)throw Error(s(327));for(var r=!n&&!(124&t)&&0===(t&e.expiredLanes)||we(e,t),a=r?function(e,t){var n=nu;nu|=2;var r=Wu(),a=Vu();ru!==e||ou!==t?(_u=null,Su=te()+500,qu(e,t)):uu=we(e,t);e:for(;;)try{if(0!==su&&null!==au){t=au;var o=iu;t:switch(su){case 1:su=0,iu=null,Zu(e,t,o,1);break;case 2:case 9:if(Xa(o)){su=0,iu=null,Yu(t);break}t=function(){2!==su&&9!==su||ru!==e||(su=7),Sc(e)},o.then(t,t);break e;case 3:su=7;break e;case 4:su=5;break e;case 7:Xa(o)?(su=0,iu=null,Yu(t)):(su=0,iu=null,Zu(e,t,o,7));break;case 5:var i=null;switch(au.tag){case 26:i=au.memoizedState;case 5:case 27:var l=au;if(!i||Ud(i)){su=0,iu=null;var u=l.sibling;if(null!==u)au=u;else{var c=l.return;null!==c?(au=c,ec(c)):au=null}break t}}su=0,iu=null,Zu(e,t,o,5);break;case 6:su=0,iu=null,Zu(e,t,o,6);break;case 8:Bu(),fu=6;break e;default:throw Error(s(462))}}Gu();break}catch(t){Hu(e,t)}return va=ya=null,L.H=r,L.A=a,nu=n,null!==au?0:(ru=null,ou=0,Ar(),fu)}(e,t):Ku(e,t,!0),o=r;;){if(0===a){uu&&!r&&ju(e,t,0,!1);break}if(n=e.current.alternate,!o||Fu(n)){if(2===a){if(o=t,e.errorRecoveryDisabledLanes&o)var i=0;else i=0!=(i=-536870913&e.pendingLanes)?i:536870912&i?536870912:0;if(0!==i){t=i;e:{var l=e;a=vu;var u=l.current.memoizedState.isDehydrated;if(u&&(qu(l,i).flags|=256),2!==(i=Ku(l,i,!1))){if(cu&&!u){l.errorRecoveryDisabledLanes|=o,hu|=o,a=4;break e}o=bu,bu=a,null!==o&&(null===bu?bu=o:bu.push.apply(bu,o))}a=i}if(o=!1,2!==a)continue}}if(1===a){qu(e,0),ju(e,t,0,!0);break}e:{switch(r=e,o=a){case 0:case 1:throw Error(s(345));case 4:if((4194048&t)!==t)break;case 6:ju(r,t,gu,!lu);break e;case 2:bu=null;break;case 3:case 5:break;default:throw Error(s(329))}if((62914560&t)===t&&10<(a=ku+300-te())){if(ju(r,t,gu,!lu),0!==be(r,0,!0))break e;r.timeoutHandle=ld($u.bind(null,r,n,bu,_u,wu,t,gu,hu,yu,lu,o,2,-0,0),a)}else $u(r,n,bu,_u,wu,t,gu,hu,yu,lu,o,0,-0,0)}break}a=Ku(e,t,!1),o=!1}Sc(e)}function $u(e,t,n,r,a,o,i,l,u,c,d,f,p,h){if(e.timeoutHandle=-1,(8192&(f=t.subtreeFlags)||!(16785408&~f))&&(Bd={stylesheets:null,count:0,unsuspend:qd},Kl(t),null!==(f=function(){if(null===Bd)throw Error(s(475));var e=Bd;return e.stylesheets&&0===e.count&&Vd(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&Vd(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=f(nc.bind(null,e,t,o,n,r,a,i,l,u,d,1,p,h)),void ju(e,o,i,!c);nc(e,t,o,n,r,a,i,l,u)}function Fu(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!Xn(o(),a))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function ju(e,t,n,r){t&=~mu,t&=~hu,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var a=t;0<a;){var o=31-pe(a),s=1<<o;r[o]=-1,a&=~s}0!==n&&Ce(e,n,t)}function Uu(){return!!(6&nu)||(_c(0,!1),!1)}function Bu(){if(null!==au){if(0===su)var e=au.return;else va=ya=null,$o(e=au),Xs=null,Gs=0,e=au;for(;null!==e;)ol(e.alternate,e),e=e.return;au=null}}function qu(e,t){var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,ud(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Bu(),ru=e,au=n=$r(e.current,null),ou=t,su=0,iu=null,lu=!1,uu=we(e,t),cu=!1,yu=gu=mu=hu=pu=fu=0,bu=vu=null,wu=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var a=31-pe(r),o=1<<a;t|=e[a],r&=~o}return du=t,Ar(),n}function Hu(e,t){wo=null,L.H=Ws,t===Wa||t===Qa?(t=Za(),su=3):t===Va?(t=Za(),su=4):su=t===Ci?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,iu=t,null===au&&(fu=1,ki(e,xr(t,e.current)))}function Wu(){var e=L.H;return L.H=Ws,null===e?Ws:e}function Vu(){var e=L.A;return L.A=eu,e}function Qu(){fu=4,lu||(4194048&ou)!==ou&&null!==ai.current||(uu=!0),!(134217727&pu)&&!(134217727&hu)||null===ru||ju(ru,ou,gu,!1)}function Ku(e,t,n){var r=nu;nu|=2;var a=Wu(),o=Vu();ru===e&&ou===t||(_u=null,qu(e,t)),t=!1;var s=fu;e:for(;;)try{if(0!==su&&null!==au){var i=au,l=iu;switch(su){case 8:Bu(),s=6;break e;case 3:case 2:case 9:case 6:null===ai.current&&(t=!0);var u=su;if(su=0,iu=null,Zu(e,i,l,u),n&&uu){s=0;break e}break;default:u=su,su=0,iu=null,Zu(e,i,l,u)}}Xu(),s=fu;break}catch(t){Hu(e,t)}return t&&e.shellSuspendCounter++,va=ya=null,nu=r,L.H=a,L.A=o,null===au&&(ru=null,ou=0,Ar()),s}function Xu(){for(;null!==au;)Ju(au)}function Gu(){for(;null!==au&&!Z();)Ju(au)}function Ju(e){var t=Ji(e.alternate,e,du);e.memoizedProps=e.pendingProps,null===t?ec(e):au=t}function Yu(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=zi(n,t,t.pendingProps,t.type,void 0,ou);break;case 11:t=zi(n,t,t.pendingProps,t.type.render,t.ref,ou);break;case 5:$o(t);default:ol(n,t),t=Ji(n,t=au=Fr(t,du),du)}e.memoizedProps=e.pendingProps,null===t?ec(e):au=t}function Zu(e,t,n,r){va=ya=null,$o(t),Xs=null,Gs=0;var a=t.return;try{if(function(e,t,n,r,a){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&_a(t,n,a,!0),null!==(n=ai.current)){switch(n.tag){case 13:return null===oi?Qu():null===n.alternate&&0===fu&&(fu=3),n.flags&=-257,n.flags|=65536,n.lanes=a,r===Ka?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),dc(e,r,a)),!1;case 22:return n.flags|=65536,r===Ka?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),dc(e,r,a)),!1}throw Error(s(435,n.tag))}return dc(e,r,a),Qu(),!1}if(oa)return null!==(t=ai.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=a,r!==la&&ma(xr(e=Error(s(422),{cause:r}),n))):(r!==la&&ma(xr(t=Error(s(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,a&=-a,e.lanes|=a,r=xr(r,n),io(e,a=_i(e.stateNode,r,a)),4!==fu&&(fu=2)),!1;var o=Error(s(520),{cause:r});if(o=xr(o,n),null===vu?vu=[o]:vu.push(o),4!==fu&&(fu=2),null===t)return!0;r=xr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=a&-a,n.lanes|=e,io(n,e=_i(n.stateNode,r,e)),!1;case 1:if(t=n.type,o=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===o||"function"!=typeof o.componentDidCatch||null!==xu&&xu.has(o))))return n.flags|=65536,a&=-a,n.lanes|=a,Ei(a=xi(a),e,n,r),io(n,a),!1}n=n.return}while(null!==n);return!1}(e,a,t,n,ou))return fu=1,ki(e,xr(n,e.current)),void(au=null)}catch(t){if(null!==a)throw au=a,t;return fu=1,ki(e,xr(n,e.current)),void(au=null)}32768&t.flags?(oa||1===r?e=!0:uu||536870912&ou?e=!1:(lu=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=ai.current)&&13===r.tag&&(r.flags|=16384)),tc(t,e)):ec(t)}function ec(e){var t=e;do{if(32768&t.flags)return void tc(t,lu);e=t.return;var n=rl(t.alternate,t,du);if(null!==n)return void(au=n);if(null!==(t=t.sibling))return void(au=t);au=t=e}while(null!==t);0===fu&&(fu=5)}function tc(e,t){do{var n=al(e.alternate,e);if(null!==n)return n.flags&=32767,void(au=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(au=e);au=e=n}while(null!==e);fu=6,au=null}function nc(e,t,n,r,a,o,i,l,u){e.cancelPendingCommit=null;do{ic()}while(0!==Eu);if(6&nu)throw Error(s(327));if(null!==t){if(t===e.current)throw Error(s(177));if(o=t.lanes|t.childLanes,function(e,t,n,r,a,o){var s=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var i=e.entanglements,l=e.expirationTimes,u=e.hiddenUpdates;for(n=s&~n;0<n;){var c=31-pe(n),d=1<<c;i[c]=0,l[c]=-1;var f=u[c];if(null!==f)for(u[c]=null,c=0;c<f.length;c++){var p=f[c];null!==p&&(p.lane&=-536870913)}n&=~d}0!==r&&Ce(e,r,0),0!==o&&0===a&&0!==e.tag&&(e.suspendedLanes|=o&~(s&~t))}(e,n,o|=Pr,i,l,u),e===ru&&(au=ru=null,ou=0),Pu=t,Cu=e,Au=n,Tu=o,Nu=a,Ou=r,10256&t.subtreeFlags||10256&t.flags?(e.callbackNode=null,e.callbackPriority=0,J(oe,(function(){return lc(),null}))):(e.callbackNode=null,e.callbackPriority=0),r=!!(13878&t.flags),13878&t.subtreeFlags||r){r=L.T,L.T=null,a=D.p,D.p=2,i=nu,nu|=4;try{!function(e,t){if(e=e.containerInfo,td=nf,tr(e=er(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch(e){n=null;break e}var i=0,l=-1,u=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==a&&3!==f.nodeType||(l=i+a),f!==o||0!==r&&3!==f.nodeType||(u=i+r),3===f.nodeType&&(i+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++c===a&&(l=i),p===o&&++d===r&&(u=i),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===l||-1===u?null:{start:l,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(nd={focusedElem:e,selectionRange:n},nf=!1,_l=t;null!==_l;)if(e=(t=_l).child,1024&t.subtreeFlags&&null!==e)e.return=t,_l=e;else for(;null!==_l;){switch(o=(t=_l).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==o){e=void 0,n=t,a=o.memoizedProps,o=o.memoizedState,r=n.stateNode;try{var m=gi(n.type,a,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(m,o),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){cc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))md(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":md(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(s(163))}if(null!==(e=t.sibling)){e.return=t.return,_l=e;break}_l=t.return}}(e,t)}finally{nu=i,D.p=a,L.T=r}}Eu=1,rc(),ac(),oc()}}function rc(){if(1===Eu){Eu=0;var e=Cu,t=Pu,n=!!(13878&t.flags);if(13878&t.subtreeFlags||n){n=L.T,L.T=null;var r=D.p;D.p=2;var a=nu;nu|=4;try{Ll(t,e);var o=nd,s=er(e.containerInfo),i=o.focusedElem,l=o.selectionRange;if(s!==i&&i&&i.ownerDocument&&Zn(i.ownerDocument.documentElement,i)){if(null!==l&&tr(i)){var u=l.start,c=l.end;if(void 0===c&&(c=u),"selectionStart"in i)i.selectionStart=u,i.selectionEnd=Math.min(c,i.value.length);else{var d=i.ownerDocument||document,f=d&&d.defaultView||window;if(f.getSelection){var p=f.getSelection(),h=i.textContent.length,m=Math.min(l.start,h),g=void 0===l.end?m:Math.min(l.end,h);!p.extend&&m>g&&(s=g,g=m,m=s);var y=Yn(i,m),v=Yn(i,g);if(y&&v&&(1!==p.rangeCount||p.anchorNode!==y.node||p.anchorOffset!==y.offset||p.focusNode!==v.node||p.focusOffset!==v.offset)){var b=d.createRange();b.setStart(y.node,y.offset),p.removeAllRanges(),m>g?(p.addRange(b),p.extend(v.node,v.offset)):(b.setEnd(v.node,v.offset),p.addRange(b))}}}}for(d=[],p=i;p=p.parentNode;)1===p.nodeType&&d.push({element:p,left:p.scrollLeft,top:p.scrollTop});for("function"==typeof i.focus&&i.focus(),i=0;i<d.length;i++){var w=d[i];w.element.scrollLeft=w.left,w.element.scrollTop=w.top}}nf=!!td,nd=td=null}finally{nu=a,D.p=r,L.T=n}}e.current=t,Eu=2}}function ac(){if(2===Eu){Eu=0;var e=Cu,t=Pu,n=!!(8772&t.flags);if(8772&t.subtreeFlags||n){n=L.T,L.T=null;var r=D.p;D.p=2;var a=nu;nu|=4;try{xl(e,t.alternate,t)}finally{nu=a,D.p=r,L.T=n}}Eu=3}}function oc(){if(4===Eu||3===Eu){Eu=0,ee();var e=Cu,t=Pu,n=Au,r=Ou;10256&t.subtreeFlags||10256&t.flags?Eu=5:(Eu=0,Pu=Cu=null,sc(e,e.pendingLanes));var a=e.pendingLanes;if(0===a&&(xu=null),Te(n),t=t.stateNode,de&&"function"==typeof de.onCommitFiberRoot)try{de.onCommitFiberRoot(ce,t,void 0,!(128&~t.current.flags))}catch(e){}if(null!==r){t=L.T,a=D.p,D.p=2,L.T=null;try{for(var o=e.onRecoverableError,s=0;s<r.length;s++){var i=r[s];o(i.value,{componentStack:i.stack})}}finally{L.T=t,D.p=a}}3&Au&&ic(),Sc(e),a=e.pendingLanes,4194090&n&&42&a?e===Iu?Ru++:(Ru=0,Iu=e):Ru=0,_c(0,!1)}}function sc(e,t){0===(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,La(t))}function ic(e){return rc(),ac(),oc(),lc()}function lc(){if(5!==Eu)return!1;var e=Cu,t=Tu;Tu=0;var n=Te(Au),r=L.T,a=D.p;try{D.p=32>n?32:n,L.T=null,n=Nu,Nu=null;var o=Cu,i=Au;if(Eu=0,Pu=Cu=null,Au=0,6&nu)throw Error(s(331));var l=nu;if(nu|=4,Jl(o.current),ql(o,o.current,i,n),nu=l,_c(0,!1),de&&"function"==typeof de.onPostCommitFiberRoot)try{de.onPostCommitFiberRoot(ce,o)}catch(e){}return!0}finally{D.p=a,L.T=r,sc(e,t)}}function uc(e,t,n){t=xr(n,t),null!==(e=oo(e,t=_i(e.stateNode,t,2),2))&&(Ee(e,2),Sc(e))}function cc(e,t,n){if(3===e.tag)uc(e,e,n);else for(;null!==t;){if(3===t.tag){uc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===xu||!xu.has(r))){e=xr(n,e),null!==(r=oo(t,n=xi(2),2))&&(Ei(n,r,t,e),Ee(r,2),Sc(r));break}}t=t.return}}function dc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new tu;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(cu=!0,a.add(n),e=fc.bind(null,e,t,n),t.then(e,e))}function fc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,ru===e&&(ou&n)===n&&(4===fu||3===fu&&(62914560&ou)===ou&&300>te()-ku?!(2&nu)&&qu(e,0):mu|=n,yu===ou&&(yu=0)),Sc(e)}function pc(e,t){0===t&&(t=_e()),null!==(e=Or(e,t))&&(Ee(e,t),Sc(e))}function hc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),pc(e,n)}function mc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(s(314))}null!==r&&r.delete(t),pc(e,n)}var gc=null,yc=null,vc=!1,bc=!1,wc=!1,kc=0;function Sc(e){e!==yc&&null===e.next&&(null===yc?gc=yc=e:yc=yc.next=e),bc=!0,vc||(vc=!0,dd((function(){6&nu?J(re,xc):Ec()})))}function _c(e,t){if(!wc&&bc){wc=!0;do{for(var n=!1,r=gc;null!==r;){if(!t)if(0!==e){var a=r.pendingLanes;if(0===a)var o=0;else{var s=r.suspendedLanes,i=r.pingedLanes;o=(1<<31-pe(42|e)+1)-1,o=201326741&(o&=a&~(s&~i))?201326741&o|1:o?2|o:0}0!==o&&(n=!0,Ac(r,o))}else o=ou,!(3&(o=be(r,r===ru?o:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||we(r,o)||(n=!0,Ac(r,o));r=r.next}}while(n);wc=!1}}function xc(){Ec()}function Ec(){bc=vc=!1;var e,t=0;0!==kc&&(((e=window.event)&&"popstate"===e.type?e!==id&&(id=e,!0):(id=null,!1))&&(t=kc),kc=0);for(var n=te(),r=null,a=gc;null!==a;){var o=a.next,s=Cc(a,n);0===s?(a.next=null,null===r?gc=o:r.next=o,null===o&&(yc=r)):(r=a,(0!==t||3&s)&&(bc=!0)),a=o}_c(t,!1)}function Cc(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=-62914561&e.pendingLanes;0<o;){var s=31-pe(o),i=1<<s,l=a[s];-1===l?0!==(i&n)&&0===(i&r)||(a[s]=ke(i,t)):l<=t&&(e.expiredLanes|=i),o&=~i}if(n=ou,n=be(e,e===(t=ru)?n:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===n||e===t&&(2===su||9===su)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&Y(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||we(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&Y(r),Te(n)){case 2:case 8:n=ae;break;case 32:default:n=oe;break;case 268435456:n=ie}return r=Pc.bind(null,e),n=J(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&Y(r),e.callbackPriority=2,e.callbackNode=null,2}function Pc(e,t){if(0!==Eu&&5!==Eu)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(ic()&&e.callbackNode!==n)return null;var r=ou;return 0===(r=be(e,e===ru?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(Mu(e,r,t),Cc(e,te()),null!=e.callbackNode&&e.callbackNode===n?Pc.bind(null,e):null)}function Ac(e,t){if(ic())return null;Mu(e,t,!0)}function Tc(){return 0===kc&&(kc=Se()),kc}function Nc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Tt(""+e)}function Oc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Rc=0;Rc<kr.length;Rc++){var Ic=kr[Rc];Sr(Ic.toLowerCase(),"on"+(Ic[0].toUpperCase()+Ic.slice(1)))}Sr(pr,"onAnimationEnd"),Sr(hr,"onAnimationIteration"),Sr(mr,"onAnimationStart"),Sr("dblclick","onDoubleClick"),Sr("focusin","onFocus"),Sr("focusout","onBlur"),Sr(gr,"onTransitionRun"),Sr(yr,"onTransitionStart"),Sr(vr,"onTransitionCancel"),Sr(br,"onTransitionEnd"),Xe("onMouseEnter",["mouseout","mouseover"]),Xe("onMouseLeave",["mouseout","mouseover"]),Xe("onPointerEnter",["pointerout","pointerover"]),Xe("onPointerLeave",["pointerout","pointerover"]),Ke("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Ke("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Ke("onBeforeInput",["compositionend","keypress","textInput","paste"]),Ke("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Ke("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Ke("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Dc=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Lc));function zc(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var s=r.length-1;0<=s;s--){var i=r[s],l=i.instance,u=i.currentTarget;if(i=i.listener,l!==o&&a.isPropagationStopped())break e;o=i,a.currentTarget=u;try{o(a)}catch(e){yi(e)}a.currentTarget=null,o=l}else for(s=0;s<r.length;s++){if(l=(i=r[s]).instance,u=i.currentTarget,i=i.listener,l!==o&&a.isPropagationStopped())break e;o=i,a.currentTarget=u;try{o(a)}catch(e){yi(e)}a.currentTarget=null,o=l}}}}function Mc(e,t){var n=t[De];void 0===n&&(n=t[De]=new Set);var r=e+"__bubble";n.has(r)||(Uc(t,e,2,!1),n.add(r))}function $c(e,t,n){var r=0;t&&(r|=4),Uc(n,e,r,t)}var Fc="_reactListening"+Math.random().toString(36).slice(2);function jc(e){if(!e[Fc]){e[Fc]=!0,Ve.forEach((function(t){"selectionchange"!==t&&(Dc.has(t)||$c(t,!1,e),$c(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Fc]||(t[Fc]=!0,$c("selectionchange",!1,t))}}function Uc(e,t,n,r){switch(cf(t)){case 2:var a=rf;break;case 8:a=af;break;default:a=of}n=a.bind(null,t,n,e),a=void 0,!Ft||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Bc(e,t,n,r,a){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var s=r.tag;if(3===s||4===s){var i=r.stateNode.containerInfo;if(i===a)break;if(4===s)for(s=r.return;null!==s;){var u=s.tag;if((3===u||4===u)&&s.stateNode.containerInfo===a)return;s=s.return}for(;null!==i;){if(null===(s=Ue(i)))return;if(5===(u=s.tag)||6===u||26===u||27===u){r=o=s;continue e}i=i.parentNode}}r=r.return}zt((function(){var r=o,a=Ot(n),s=[];e:{var i=wr.get(e);if(void 0!==i){var u=Zt,c=e;switch(e){case"keypress":if(0===Wt(n))break e;case"keydown":case"keyup":u=mn;break;case"focusin":c="focus",u=on;break;case"focusout":c="blur",u=on;break;case"beforeblur":case"afterblur":u=on;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=rn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=an;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=yn;break;case pr:case hr:case mr:u=sn;break;case br:u=vn;break;case"scroll":case"scrollend":u=tn;break;case"wheel":u=bn;break;case"copy":case"cut":case"paste":u=ln;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=gn;break;case"toggle":case"beforetoggle":u=wn}var d=!!(4&t),f=!d&&("scroll"===e||"scrollend"===e),p=d?null!==i?i+"Capture":null:i;d=[];for(var h,m=r;null!==m;){var g=m;if(h=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===h||null===p||null!=(g=Mt(m,p))&&d.push(qc(m,g,h)),f)break;m=m.return}0<d.length&&(i=new u(i,c,null,n,a),s.push({event:i,listeners:d}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===Nt||!(c=n.relatedTarget||n.fromElement)||!Ue(c)&&!c[Le])&&(u||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?Ue(c):null)&&(f=l(c),d=c.tag,c!==f||5!==d&&27!==d&&6!==d)&&(c=null)):(u=null,c=r),u!==c)){if(d=rn,g="onMouseLeave",p="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(d=gn,g="onPointerLeave",p="onPointerEnter",m="pointer"),f=null==u?i:qe(u),h=null==c?i:qe(c),(i=new d(g,m+"leave",u,n,a)).target=f,i.relatedTarget=h,g=null,Ue(a)===r&&((d=new d(p,m+"enter",c,n,a)).target=h,d.relatedTarget=f,g=d),f=g,u&&c)e:{for(p=c,m=0,h=d=u;h;h=Wc(h))m++;for(h=0,g=p;g;g=Wc(g))h++;for(;0<m-h;)d=Wc(d),m--;for(;0<h-m;)p=Wc(p),h--;for(;m--;){if(d===p||null!==p&&d===p.alternate)break e;d=Wc(d),p=Wc(p)}d=null}else d=null;null!==u&&Vc(s,i,u,d,!1),null!==c&&null!==f&&Vc(s,f,c,d,!0)}if("select"===(u=(i=r?qe(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var y=$n;else if(Rn(i))if(Fn)y=Kn;else{y=Vn;var v=Wn}else!(u=i.nodeName)||"input"!==u.toLowerCase()||"checkbox"!==i.type&&"radio"!==i.type?r&&Ct(r.elementType)&&(y=$n):y=Qn;switch(y&&(y=y(e,r))?In(s,y,n,a):(v&&v(e,i,r),"focusout"===e&&r&&"number"===i.type&&null!=r.memoizedProps.value&&vt(i,"number",i.value)),v=r?qe(r):window,e){case"focusin":(Rn(v)||"true"===v.contentEditable)&&(rr=v,ar=r,or=null);break;case"focusout":or=ar=rr=null;break;case"mousedown":sr=!0;break;case"contextmenu":case"mouseup":case"dragend":sr=!1,ir(s,n,a);break;case"selectionchange":if(nr)break;case"keydown":case"keyup":ir(s,n,a)}var b;if(Sn)e:{switch(e){case"compositionstart":var w="onCompositionStart";break e;case"compositionend":w="onCompositionEnd";break e;case"compositionupdate":w="onCompositionUpdate";break e}w=void 0}else Nn?An(e,n)&&(w="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(w="onCompositionStart");w&&(En&&"ko"!==n.locale&&(Nn||"onCompositionStart"!==w?"onCompositionEnd"===w&&Nn&&(b=Ht()):(Bt="value"in(Ut=a)?Ut.value:Ut.textContent,Nn=!0)),0<(v=Hc(r,w)).length&&(w=new un(w,e,null,n,a),s.push({event:w,listeners:v}),(b||null!==(b=Tn(n)))&&(w.data=b))),(b=xn?function(e,t){switch(e){case"compositionend":return Tn(t);case"keypress":return 32!==t.which?null:(Pn=!0,Cn);case"textInput":return(e=t.data)===Cn&&Pn?null:e;default:return null}}(e,n):function(e,t){if(Nn)return"compositionend"===e||!Sn&&An(e,t)?(e=Ht(),qt=Bt=Ut=null,Nn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return En&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(w=Hc(r,"onBeforeInput")).length&&(v=new un("onBeforeInput","beforeinput",null,n,a),s.push({event:v,listeners:w}),v.data=b),function(e,t,n,r,a){if("submit"===t&&n&&n.stateNode===a){var o=Nc((a[Ie]||null).action),s=r.submitter;s&&null!==(t=(t=s[Ie]||null)?Nc(t.formAction):s.getAttribute("formAction"))&&(o=t,s=null);var i=new Zt("action","action",null,r,a);e.push({event:i,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==kc){var e=s?Oc(a,s):new FormData(a);Os(n,{pending:!0,data:e,method:a.method,action:o},null,e)}}else"function"==typeof o&&(i.preventDefault(),e=s?Oc(a,s):new FormData(a),Os(n,{pending:!0,data:e,method:a.method,action:o},o,e))},currentTarget:a}]})}}(s,e,r,n,a)}zc(s,t)}))}function qc(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hc(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;if(5!==(a=a.tag)&&26!==a&&27!==a||null===o||(null!=(a=Mt(e,n))&&r.unshift(qc(e,a,o)),null!=(a=Mt(e,t))&&r.push(qc(e,a,o))),3===e.tag)return r;e=e.return}return[]}function Wc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Vc(e,t,n,r,a){for(var o=t._reactName,s=[];null!==n&&n!==r;){var i=n,l=i.alternate,u=i.stateNode;if(i=i.tag,null!==l&&l===r)break;5!==i&&26!==i&&27!==i||null===u||(l=u,a?null!=(u=Mt(n,o))&&s.unshift(qc(n,u,l)):a||null!=(u=Mt(n,o))&&s.push(qc(n,u,l))),n=n.return}0!==s.length&&e.push({event:t,listeners:s})}var Qc=/\r\n?/g,Kc=/\u0000|\uFFFD/g;function Xc(e){return("string"==typeof e?e:""+e).replace(Qc,"\n").replace(Kc,"")}function Gc(e,t){return t=Xc(t),Xc(e)===t}function Jc(){}function Yc(e,t,n,r,a,o){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||St(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&St(e,""+r);break;case"className":nt(e,"class",r);break;case"tabIndex":nt(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":nt(e,n,r);break;case"style":Et(e,r,o);break;case"data":if("object"!==t){nt(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Tt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof o&&("formAction"===n?("input"!==t&&Yc(e,t,"name",a.name,a,null),Yc(e,t,"formEncType",a.formEncType,a,null),Yc(e,t,"formMethod",a.formMethod,a,null),Yc(e,t,"formTarget",a.formTarget,a,null)):(Yc(e,t,"encType",a.encType,a,null),Yc(e,t,"method",a.method,a,null),Yc(e,t,"target",a.target,a,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Tt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Jc);break;case"onScroll":null!=r&&Mc("scroll",e);break;case"onScrollEnd":null!=r&&Mc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(s(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(s(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Tt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Mc("beforetoggle",e),Mc("toggle",e),tt(e,"popover",r);break;case"xlinkActuate":rt(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":rt(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":rt(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":rt(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":rt(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":rt(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":rt(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":rt(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":rt(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":tt(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&tt(e,n=Pt.get(n)||n,r)}}function Zc(e,t,n,r,a,o){switch(n){case"style":Et(e,r,o);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(s(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(s(60));e.innerHTML=n}}break;case"children":"string"==typeof r?St(e,r):("number"==typeof r||"bigint"==typeof r)&&St(e,""+r);break;case"onScroll":null!=r&&Mc("scroll",e);break;case"onScrollEnd":null!=r&&Mc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Jc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Qe.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(a=n.endsWith("Capture"),t=n.slice(2,a?n.length-7:void 0),"function"==typeof(o=null!=(o=e[Ie]||null)?o[n]:null)&&e.removeEventListener(t,o,a),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):tt(e,n,r):("function"!=typeof o&&null!==o&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,a)))}}function ed(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Mc("error",e),Mc("load",e);var r,a=!1,o=!1;for(r in n)if(n.hasOwnProperty(r)){var i=n[r];if(null!=i)switch(r){case"src":a=!0;break;case"srcSet":o=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(s(137,t));default:Yc(e,t,r,i,n,null)}}return o&&Yc(e,t,"srcSet",n.srcSet,n,null),void(a&&Yc(e,t,"src",n.src,n,null));case"input":Mc("invalid",e);var l=r=i=o=null,u=null,c=null;for(a in n)if(n.hasOwnProperty(a)){var d=n[a];if(null!=d)switch(a){case"name":o=d;break;case"type":i=d;break;case"checked":u=d;break;case"defaultChecked":c=d;break;case"value":r=d;break;case"defaultValue":l=d;break;case"children":case"dangerouslySetInnerHTML":if(null!=d)throw Error(s(137,t));break;default:Yc(e,t,a,d,n,null)}}return yt(e,r,l,u,c,i,o,!1),void dt(e);case"select":for(o in Mc("invalid",e),a=i=r=null,n)if(n.hasOwnProperty(o)&&null!=(l=n[o]))switch(o){case"value":r=l;break;case"defaultValue":i=l;break;case"multiple":a=l;default:Yc(e,t,o,l,n,null)}return t=r,n=i,e.multiple=!!a,void(null!=t?bt(e,!!a,t,!1):null!=n&&bt(e,!!a,n,!0));case"textarea":for(i in Mc("invalid",e),r=o=a=null,n)if(n.hasOwnProperty(i)&&null!=(l=n[i]))switch(i){case"value":a=l;break;case"defaultValue":o=l;break;case"children":r=l;break;case"dangerouslySetInnerHTML":if(null!=l)throw Error(s(91));break;default:Yc(e,t,i,l,n,null)}return kt(e,a,o,r),void dt(e);case"option":for(u in n)n.hasOwnProperty(u)&&null!=(a=n[u])&&("selected"===u?e.selected=a&&"function"!=typeof a&&"symbol"!=typeof a:Yc(e,t,u,a,n,null));return;case"dialog":Mc("beforetoggle",e),Mc("toggle",e),Mc("cancel",e),Mc("close",e);break;case"iframe":case"object":Mc("load",e);break;case"video":case"audio":for(a=0;a<Lc.length;a++)Mc(Lc[a],e);break;case"image":Mc("error",e),Mc("load",e);break;case"details":Mc("toggle",e);break;case"embed":case"source":case"link":Mc("error",e),Mc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(a=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(s(137,t));default:Yc(e,t,c,a,n,null)}return;default:if(Ct(t)){for(d in n)n.hasOwnProperty(d)&&void 0!==(a=n[d])&&Zc(e,t,d,a,n,void 0);return}}for(l in n)n.hasOwnProperty(l)&&null!=(a=n[l])&&Yc(e,t,l,a,n,null)}var td=null,nd=null;function rd(e){return 9===e.nodeType?e:e.ownerDocument}function ad(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function od(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function sd(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var id=null,ld="function"==typeof setTimeout?setTimeout:void 0,ud="function"==typeof clearTimeout?clearTimeout:void 0,cd="function"==typeof Promise?Promise:void 0,dd="function"==typeof queueMicrotask?queueMicrotask:void 0!==cd?function(e){return cd.resolve(null).then(e).catch(fd)}:ld;function fd(e){setTimeout((function(){throw e}))}function pd(e){return"head"===e}function hd(e,t){var n=t,r=0,a=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0<r&&8>r){n=r;var s=e.ownerDocument;if(1&n&&kd(s.documentElement),2&n&&kd(s.body),4&n)for(kd(n=s.head),s=n.firstChild;s;){var i=s.nextSibling,l=s.nodeName;s[Fe]||"SCRIPT"===l||"STYLE"===l||"LINK"===l&&"stylesheet"===s.rel.toLowerCase()||n.removeChild(s),s=i}}if(0===a)return e.removeChild(o),void Af(t);a--}else"$"===n||"$?"===n||"$!"===n?a++:r=n.charCodeAt(0)-48;else r=0;n=o}while(n);Af(t)}function md(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":md(n),je(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function gd(e){return"$!"===e.data||"$?"===e.data&&"complete"===e.ownerDocument.readyState}function yd(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}var vd=null;function bd(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function wd(e,t,n){switch(t=rd(n),e){case"html":if(!(e=t.documentElement))throw Error(s(452));return e;case"head":if(!(e=t.head))throw Error(s(453));return e;case"body":if(!(e=t.body))throw Error(s(454));return e;default:throw Error(s(451))}}function kd(e){for(var t=e.attributes;t.length;)e.removeAttributeNode(t[0]);je(e)}var Sd=new Map,_d=new Set;function xd(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var Ed=D.d;D.d={f:function(){var e=Ed.f(),t=Uu();return e||t},r:function(e){var t=Be(e);null!==t&&5===t.tag&&"form"===t.type?Is(t):Ed.r(e)},D:function(e){Ed.D(e),Pd("dns-prefetch",e,null)},C:function(e,t){Ed.C(e,t),Pd("preconnect",e,t)},L:function(e,t,n){Ed.L(e,t,n);var r=Cd;if(r&&e&&t){var a='link[rel="preload"][as="'+mt(t)+'"]';"image"===t&&n&&n.imageSrcSet?(a+='[imagesrcset="'+mt(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(a+='[imagesizes="'+mt(n.imageSizes)+'"]')):a+='[href="'+mt(e)+'"]';var o=a;switch(t){case"style":o=Td(e);break;case"script":o=Rd(e)}Sd.has(o)||(e=f({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),Sd.set(o,e),null!==r.querySelector(a)||"style"===t&&r.querySelector(Nd(o))||"script"===t&&r.querySelector(Id(o))||(ed(t=r.createElement("link"),"link",e),We(t),r.head.appendChild(t)))}},m:function(e,t){Ed.m(e,t);var n=Cd;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",a='link[rel="modulepreload"][as="'+mt(r)+'"][href="'+mt(e)+'"]',o=a;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":o=Rd(e)}if(!Sd.has(o)&&(e=f({rel:"modulepreload",href:e},t),Sd.set(o,e),null===n.querySelector(a))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(Id(o)))return}ed(r=n.createElement("link"),"link",e),We(r),n.head.appendChild(r)}}},X:function(e,t){Ed.X(e,t);var n=Cd;if(n&&e){var r=He(n).hoistableScripts,a=Rd(e),o=r.get(a);o||((o=n.querySelector(Id(a)))||(e=f({src:e,async:!0},t),(t=Sd.get(a))&&Md(e,t),We(o=n.createElement("script")),ed(o,"link",e),n.head.appendChild(o)),o={type:"script",instance:o,count:1,state:null},r.set(a,o))}},S:function(e,t,n){Ed.S(e,t,n);var r=Cd;if(r&&e){var a=He(r).hoistableStyles,o=Td(e);t=t||"default";var s=a.get(o);if(!s){var i={loading:0,preload:null};if(s=r.querySelector(Nd(o)))i.loading=5;else{e=f({rel:"stylesheet",href:e,"data-precedence":t},n),(n=Sd.get(o))&&zd(e,n);var l=s=r.createElement("link");We(l),ed(l,"link",e),l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),l.addEventListener("load",(function(){i.loading|=1})),l.addEventListener("error",(function(){i.loading|=2})),i.loading|=4,Dd(s,t,r)}s={type:"stylesheet",instance:s,count:1,state:i},a.set(o,s)}}},M:function(e,t){Ed.M(e,t);var n=Cd;if(n&&e){var r=He(n).hoistableScripts,a=Rd(e),o=r.get(a);o||((o=n.querySelector(Id(a)))||(e=f({src:e,async:!0,type:"module"},t),(t=Sd.get(a))&&Md(e,t),We(o=n.createElement("script")),ed(o,"link",e),n.head.appendChild(o)),o={type:"script",instance:o,count:1,state:null},r.set(a,o))}}};var Cd="undefined"==typeof document?null:document;function Pd(e,t,n){var r=Cd;if(r&&"string"==typeof t&&t){var a=mt(t);a='link[rel="'+e+'"][href="'+a+'"]',"string"==typeof n&&(a+='[crossorigin="'+n+'"]'),_d.has(a)||(_d.add(a),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(a)&&(ed(t=r.createElement("link"),"link",e),We(t),r.head.appendChild(t)))}}function Ad(e,t,n,r){var a,o,i,l,u=(u=H.current)?xd(u):null;if(!u)throw Error(s(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=Td(n.href),(r=(n=He(u).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=Td(n.href);var c=He(u).hoistableStyles,d=c.get(e);if(d||(u=u.ownerDocument||u,d={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,d),(c=u.querySelector(Nd(e)))&&!c._p&&(d.instance=c,d.state.loading=5),Sd.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},Sd.set(e,n),c||(a=u,o=e,i=n,l=d.state,a.querySelector('link[rel="preload"][as="style"]['+o+"]")?l.loading=1:(o=a.createElement("link"),l.preload=o,o.addEventListener("load",(function(){return l.loading|=1})),o.addEventListener("error",(function(){return l.loading|=2})),ed(o,"link",i),We(o),a.head.appendChild(o))))),t&&null===r)throw Error(s(528,""));return d}if(t&&null!==r)throw Error(s(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=Rd(n),(r=(n=He(u).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(s(444,e))}}function Td(e){return'href="'+mt(e)+'"'}function Nd(e){return'link[rel="stylesheet"]['+e+"]"}function Od(e){return f({},e,{"data-precedence":e.precedence,precedence:null})}function Rd(e){return'[src="'+mt(e)+'"]'}function Id(e){return"script[async]"+e}function Ld(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+mt(n.href)+'"]');if(r)return t.instance=r,We(r),r;var a=f({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return We(r=(e.ownerDocument||e).createElement("style")),ed(r,"style",a),Dd(r,n.precedence,e),t.instance=r;case"stylesheet":a=Td(n.href);var o=e.querySelector(Nd(a));if(o)return t.state.loading|=4,t.instance=o,We(o),o;r=Od(n),(a=Sd.get(a))&&zd(r,a),We(o=(e.ownerDocument||e).createElement("link"));var i=o;return i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),ed(o,"link",r),t.state.loading|=4,Dd(o,n.precedence,e),t.instance=o;case"script":return o=Rd(n.src),(a=e.querySelector(Id(o)))?(t.instance=a,We(a),a):(r=n,(a=Sd.get(o))&&Md(r=f({},n),a),We(a=(e=e.ownerDocument||e).createElement("script")),ed(a,"link",r),e.head.appendChild(a),t.instance=a);case"void":return null;default:throw Error(s(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Dd(r,n.precedence,e));return t.instance}function Dd(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),a=r.length?r[r.length-1]:null,o=a,s=0;s<r.length;s++){var i=r[s];if(i.dataset.precedence===t)o=i;else if(o!==a)break}o?o.parentNode.insertBefore(e,o.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function zd(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function Md(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var $d=null;function Fd(e,t,n){if(null===$d){var r=new Map,a=$d=new Map;a.set(n,r)}else(r=(a=$d).get(n))||(r=new Map,a.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),a=0;a<n.length;a++){var o=n[a];if(!(o[Fe]||o[Re]||"link"===e&&"stylesheet"===o.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==o.namespaceURI){var s=o.getAttribute(t)||"";s=e+s;var i=r.get(s);i?i.push(o):r.set(s,[o])}}return r}function jd(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Ud(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Bd=null;function qd(){}function Hd(){if(this.count--,0===this.count)if(this.stylesheets)Vd(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Wd=null;function Vd(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Wd=new Map,t.forEach(Qd,e),Wd=null,Hd.call(e))}function Qd(e,t){if(!(4&t.state.loading)){var n=Wd.get(e);if(n)var r=n.get(null);else{n=new Map,Wd.set(e,n);for(var a=e.querySelectorAll("link[data-precedence],style[data-precedence]"),o=0;o<a.length;o++){var s=a[o];"LINK"!==s.nodeName&&"not all"===s.getAttribute("media")||(n.set(s.dataset.precedence,s),r=s)}r&&n.set(null,r)}s=(a=t.instance).getAttribute("data-precedence"),(o=n.get(s)||r)===r&&n.set(null,a),n.set(s,a),this.count++,r=Hd.bind(this),a.addEventListener("load",r),a.addEventListener("error",r),o?o.parentNode.insertBefore(a,o.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(a,e.firstChild),t.state.loading|=4}}var Kd={$$typeof:k,Provider:null,Consumer:null,_currentValue:z,_currentValue2:z,_threadCount:0};function Xd(e,t,n,r,a,o,s,i){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=xe(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=xe(0),this.hiddenUpdates=xe(null),this.identifierPrefix=r,this.onUncaughtError=a,this.onCaughtError=o,this.onRecoverableError=s,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function Gd(e,t,n,r,a,o,s,i,l,u,c,d){return e=new Xd(e,t,n,s,i,l,u,d),t=1,!0===o&&(t|=24),o=zr(3,null,null,t),e.current=o,o.stateNode=e,(t=Ia()).refCount++,e.pooledCache=t,t.refCount++,o.memoizedState={element:r,isDehydrated:n,cache:t},no(o),e}function Jd(e){return e?e=Lr:Lr}function Yd(e,t,n,r,a,o){a=Jd(a),null===r.context?r.context=a:r.pendingContext=a,(r=ao(t)).payload={element:n},null!==(o=void 0===o?null:o)&&(r.callback=o),null!==(n=oo(e,r,t))&&(zu(n,0,t),so(n,e,t))}function Zd(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function ef(e,t){Zd(e,t),(e=e.alternate)&&Zd(e,t)}function tf(e){if(13===e.tag){var t=Or(e,67108864);null!==t&&zu(t,0,67108864),ef(e,67108864)}}var nf=!0;function rf(e,t,n,r){var a=L.T;L.T=null;var o=D.p;try{D.p=2,of(e,t,n,r)}finally{D.p=o,L.T=a}}function af(e,t,n,r){var a=L.T;L.T=null;var o=D.p;try{D.p=8,of(e,t,n,r)}finally{D.p=o,L.T=a}}function of(e,t,n,r){if(nf){var a=sf(r);if(null===a)Bc(e,t,r,lf,n),bf(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return ff=wf(ff,e,t,n,r,a),!0;case"dragenter":return pf=wf(pf,e,t,n,r,a),!0;case"mouseover":return hf=wf(hf,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return mf.set(o,wf(mf.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,gf.set(o,wf(gf.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(bf(e,r),4&t&&-1<vf.indexOf(e)){for(;null!==a;){var o=Be(a);if(null!==o)switch(o.tag){case 3:if((o=o.stateNode).current.memoizedState.isDehydrated){var s=ve(o.pendingLanes);if(0!==s){var i=o;for(i.pendingLanes|=2,i.entangledLanes|=2;s;){var l=1<<31-pe(s);i.entanglements[1]|=l,s&=~l}Sc(o),!(6&nu)&&(Su=te()+500,_c(0,!1))}}break;case 13:null!==(i=Or(o,2))&&zu(i,0,2),Uu(),ef(o,2)}if(null===(o=sf(r))&&Bc(e,t,r,lf,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Bc(e,t,r,null,n)}}function sf(e){return uf(e=Ot(e))}var lf=null;function uf(e){if(lf=null,null!==(e=Ue(e))){var t=l(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=u(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return lf=e,null}function cf(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(ne()){case re:return 2;case ae:return 8;case oe:case se:return 32;case ie:return 268435456;default:return 32}default:return 32}}var df=!1,ff=null,pf=null,hf=null,mf=new Map,gf=new Map,yf=[],vf="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function bf(e,t){switch(e){case"focusin":case"focusout":ff=null;break;case"dragenter":case"dragleave":pf=null;break;case"mouseover":case"mouseout":hf=null;break;case"pointerover":case"pointerout":mf.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":gf.delete(t.pointerId)}}function wf(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=Be(t))&&tf(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function kf(e){var t=Ue(e.target);if(null!==t){var n=l(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=u(n)))return e.blockedOn=t,void function(e){var t=D.p;try{return D.p=e,function(){if(13===n.tag){var e=Lu();e=Ae(e);var t=Or(n,e);null!==t&&zu(t,0,e),ef(n,e)}}()}finally{D.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Sf(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=sf(e.nativeEvent);if(null!==n)return null!==(t=Be(n))&&tf(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Nt=r,n.target.dispatchEvent(r),Nt=null,t.shift()}return!0}function _f(e,t,n){Sf(e)&&n.delete(t)}function xf(){df=!1,null!==ff&&Sf(ff)&&(ff=null),null!==pf&&Sf(pf)&&(pf=null),null!==hf&&Sf(hf)&&(hf=null),mf.forEach(_f),gf.forEach(_f)}function Ef(e,t){e.blockedOn===t&&(e.blockedOn=null,df||(df=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,xf)))}var Cf=null;function Pf(e){Cf!==e&&(Cf=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){Cf===e&&(Cf=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],a=e[t+2];if("function"!=typeof r){if(null===uf(r||n))continue;break}var o=Be(n);null!==o&&(e.splice(t,3),t-=3,Os(o,{pending:!0,data:a,method:n.method,action:r},r,a))}})))}function Af(e){function t(t){return Ef(t,e)}null!==ff&&Ef(ff,e),null!==pf&&Ef(pf,e),null!==hf&&Ef(hf,e),mf.forEach(t),gf.forEach(t);for(var n=0;n<yf.length;n++){var r=yf[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<yf.length&&null===(n=yf[0]).blockedOn;)kf(n),null===n.blockedOn&&yf.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var a=n[r],o=n[r+1],s=a[Ie]||null;if("function"==typeof o)s||Pf(n);else if(s){var i=null;if(o&&o.hasAttribute("formAction")){if(a=o,s=o[Ie]||null)i=s.formAction;else if(null!==uf(a))continue}else i=s.action;"function"==typeof i?n[r+1]=i:(n.splice(r,3),r-=3),Pf(n)}}}function Tf(e){this._internalRoot=e}function Nf(e){this._internalRoot=e}Nf.prototype.render=Tf.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(s(409));Yd(t.current,Lu(),e,t,null,null)},Nf.prototype.unmount=Tf.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Yd(e.current,2,null,e,null,null),Uu(),t[Le]=null}},Nf.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ne();e={blockedOn:null,target:e,priority:t};for(var n=0;n<yf.length&&0!==t&&t<yf[n].priority;n++);yf.splice(n,0,e),0===n&&kf(e)}};var Of=a.version;if("19.1.0"!==Of)throw Error(s(527,Of,"19.1.0"));D.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(s(188));throw e=Object.keys(e).join(","),Error(s(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=l(e)))throw Error(s(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return c(a),e;if(o===r)return c(a),t;o=o.sibling}throw Error(s(188))}if(n.return!==r.return)n=a,r=o;else{for(var i=!1,u=a.child;u;){if(u===n){i=!0,n=a,r=o;break}if(u===r){i=!0,r=a,n=o;break}u=u.sibling}if(!i){for(u=o.child;u;){if(u===n){i=!0,n=o,r=a;break}if(u===r){i=!0,r=o,n=a;break}u=u.sibling}if(!i)throw Error(s(189))}}if(n.alternate!==r)throw Error(s(190))}if(3!==n.tag)throw Error(s(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?d(e):null)?null:e.stateNode};var Rf={bundleType:0,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:L,reconcilerVersion:"19.1.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var If=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!If.isDisabled&&If.supportsFiber)try{ce=If.inject(Rf),de=If}catch(e){}}t.createRoot=function(e,t){if(!i(e))throw Error(s(299));var n=!1,r="",a=vi,o=bi,l=wi;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onUncaughtError&&(a=t.onUncaughtError),void 0!==t.onCaughtError&&(o=t.onCaughtError),void 0!==t.onRecoverableError&&(l=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=Gd(e,1,!1,null,0,n,r,a,o,l,0,null),e[Le]=t.current,jc(e),new Tf(t)},t.hydrateRoot=function(e,t,n){if(!i(e))throw Error(s(299));var r=!1,a="",o=vi,l=bi,u=wi,c=null;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onUncaughtError&&(o=n.onUncaughtError),void 0!==n.onCaughtError&&(l=n.onCaughtError),void 0!==n.onRecoverableError&&(u=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks,void 0!==n.formState&&(c=n.formState)),(t=Gd(e,1,!0,t,0,r,a,o,l,u,0,c)).context=Jd(null),n=t.current,(a=ao(r=Ae(r=Lu()))).callback=null,oo(n,a,r),n=r,t.current.lanes=n,Ee(t,n),Sc(t),e[Le]=t.current,jc(e),new Nf(t)},t.version="19.1.0"},338:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},477:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,s=a>>>1;r<s;){var i=2*(r+1)-1,l=e[i],u=i+1,c=e[u];if(0>o(l,n))u<a&&0>o(c,l)?(e[r]=c,e[u]=n,r=u):(e[r]=l,e[i]=n,r=i);else{if(!(u<a&&0>o(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var s=performance;t.unstable_now=function(){return s.now()}}else{var i=Date,l=i.now();t.unstable_now=function(){return i.now()-l}}var u=[],c=[],d=1,f=null,p=3,h=!1,m=!1,g=!1,y=!1,v="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,w="undefined"!=typeof setImmediate?setImmediate:null;function k(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function S(e){if(g=!1,k(e),!m)if(null!==r(u))m=!0,x||(x=!0,_());else{var t=r(c);null!==t&&R(S,t.startTime-e)}}var _,x=!1,E=-1,C=5,P=-1;function A(){return!(!y&&t.unstable_now()-P<C)}function T(){if(y=!1,x){var e=t.unstable_now();P=e;var n=!0;try{e:{m=!1,g&&(g=!1,b(E),E=-1),h=!0;var o=p;try{t:{for(k(e),f=r(u);null!==f&&!(f.expirationTime>e&&A());){var s=f.callback;if("function"==typeof s){f.callback=null,p=f.priorityLevel;var i=s(f.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof i){f.callback=i,k(e),n=!0;break t}f===r(u)&&a(u),k(e)}else a(u);f=r(u)}if(null!==f)n=!0;else{var l=r(c);null!==l&&R(S,l.startTime-e),n=!1}}break e}finally{f=null,p=o,h=!1}n=void 0}}finally{n?_():x=!1}}}if("function"==typeof w)_=function(){w(T)};else if("undefined"!=typeof MessageChannel){var N=new MessageChannel,O=N.port2;N.port1.onmessage=T,_=function(){O.postMessage(null)}}else _=function(){v(T,0)};function R(e,n){E=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_requestPaint=function(){y=!0},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var s=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?s+o:s,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:i=o+i,sortIndex:-1},o>s?(e.sortIndex=o,n(c,e),null===r(u)&&e===r(c)&&(g?(b(E),E=-1):g=!0,R(S,o-s))):(e.sortIndex=i,n(u,e),m||h||(m=!0,x||(x=!0,_()))),e},t.unstable_shouldYield=A,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},540:(e,t,n)=>{e.exports=n(869)},698:(e,t)=>{var n=Symbol.for("react.transitional.element");function r(e,t,r){var a=null;if(void 0!==r&&(a=""+r),void 0!==t.key&&(a=""+t.key),"key"in t)for(var o in r={},t)"key"!==o&&(r[o]=t[o]);else r=t;return t=r.ref,{$$typeof:n,type:e,key:a,ref:void 0!==t?t:null,props:r}}Symbol.for("react.fragment"),t.jsx=r,t.jsxs=r},848:(e,t,n)=>{e.exports=n(698)},869:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),s=Symbol.for("react.profiler"),i=Symbol.for("react.consumer"),l=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var w=b.prototype=new v;w.constructor=b,m(w,y.prototype),w.isPureReactComponent=!0;var k=Array.isArray,S={H:null,A:null,T:null,S:null,V:null},_=Object.prototype.hasOwnProperty;function x(e,t,r,a,o,s){return r=s.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:s}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var C=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function A(){}function T(e,t,a,o,s){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var l,u,c=!1;if(null===e)c=!0;else switch(i){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case f:return T((c=e._init)(e._payload),t,a,o,s)}}if(c)return s=s(e),c=""===o?"."+P(e,0):o,k(s)?(a="",null!=c&&(a=c.replace(C,"$&/")+"/"),T(s,t,a,"",(function(e){return e}))):null!=s&&(E(s)&&(l=s,u=a+(null==s.key||e&&e.key===s.key?"":(""+s.key).replace(C,"$&/")+"/")+c,s=x(l.type,u,void 0,0,0,l.props)),t.push(s)),1;c=0;var d,h=""===o?".":o+":";if(k(e))for(var m=0;m<e.length;m++)c+=T(o=e[m],t,a,i=h+P(o,m),s);else if("function"==typeof(m=null===(d=e)||"object"!=typeof d?null:"function"==typeof(d=p&&d[p]||d["@@iterator"])?d:null))for(e=m.call(e),m=0;!(o=e.next()).done;)c+=T(o=o.value,t,a,i=h+P(o,m++),s);else if("object"===i){if("function"==typeof e.then)return T(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(A,A):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,a,o,s);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function N(e,t,n){if(null==e)return e;var r=[],a=0;return T(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function O(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var R="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function I(){}t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=a,t.Profiler=s,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=S,t.__COMPILER_RUNTIME={__proto__:null,c:function(e){return S.H.useMemoCache(e)}},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=m({},e.props),a=e.key;if(null!=t)for(o in t.ref,void 0!==t.key&&(a=""+t.key),t)!_.call(t,o)||"key"===o||"__self"===o||"__source"===o||"ref"===o&&void 0===t.ref||(r[o]=t[o]);var o=arguments.length-2;if(1===o)r.children=n;else if(1<o){for(var s=Array(o),i=0;i<o;i++)s[i]=arguments[i+2];r.children=s}return x(e.type,a,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:i,_context:e},e},t.createElement=function(e,t,n){var r,a={},o=null;if(null!=t)for(r in void 0!==t.key&&(o=""+t.key),t)_.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(a[r]=t[r]);var s=arguments.length-2;if(1===s)a.children=n;else if(1<s){for(var i=Array(s),l=0;l<s;l++)i[l]=arguments[l+2];a.children=i}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===a[r]&&(a[r]=s[r]);return x(e,o,void 0,0,0,a)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=S.T,n={};S.T=n;try{var r=e(),a=S.S;null!==a&&a(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(I,R)}catch(e){R(e)}finally{S.T=t}},t.unstable_useCacheRefresh=function(){return S.H.useCacheRefresh()},t.use=function(e){return S.H.use(e)},t.useActionState=function(e,t,n){return S.H.useActionState(e,t,n)},t.useCallback=function(e,t){return S.H.useCallback(e,t)},t.useContext=function(e){return S.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return S.H.useDeferredValue(e,t)},t.useEffect=function(e,t,n){var r=S.H;if("function"==typeof n)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,t)},t.useId=function(){return S.H.useId()},t.useImperativeHandle=function(e,t,n){return S.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return S.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return S.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return S.H.useMemo(e,t)},t.useOptimistic=function(e,t){return S.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return S.H.useReducer(e,t,n)},t.useRef=function(e){return S.H.useRef(e)},t.useState=function(e){return S.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return S.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return S.H.useTransition()},t.version="19.1.0"},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},982:(e,t,n)=>{e.exports=n(477)}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}var r=n(848),a=n(540),o=n(338);const s="RFC3986",i={RFC1738:e=>String(e).replace(/%20/g,"+"),RFC3986:e=>String(e)},l=(Object.prototype.hasOwnProperty,Array.isArray),u=(()=>{const e=[];for(let t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e})(),c=1024;function d(e,t){if(l(e)){const n=[];for(let r=0;r<e.length;r+=1)n.push(t(e[r]));return n}return t(e)}const f=Object.prototype.hasOwnProperty,p={brackets:e=>String(e)+"[]",comma:"comma",indices:(e,t)=>String(e)+"["+t+"]",repeat:e=>String(e)},h=Array.isArray,m=Array.prototype.push,g=function(e,t){m.apply(e,h(t)?t:[t])},y=Date.prototype.toISOString,v={addQueryPrefix:!1,allowDots:!1,allowEmptyArrays:!1,arrayFormat:"indices",charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encodeDotInKeys:!1,encoder:(e,t,n,r,a)=>{if(0===e.length)return e;let o=e;if("symbol"==typeof e?o=Symbol.prototype.toString.call(e):"string"!=typeof e&&(o=String(e)),"iso-8859-1"===n)return escape(o).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));let s="";for(let e=0;e<o.length;e+=c){const t=o.length>=c?o.slice(e,e+c):o,n=[];for(let e=0;e<t.length;++e){let r=t.charCodeAt(e);45===r||46===r||95===r||126===r||r>=48&&r<=57||r>=65&&r<=90||r>=97&&r<=122||"RFC1738"===a&&(40===r||41===r)?n[n.length]=t.charAt(e):r<128?n[n.length]=u[r]:r<2048?n[n.length]=u[192|r>>6]+u[128|63&r]:r<55296||r>=57344?n[n.length]=u[224|r>>12]+u[128|r>>6&63]+u[128|63&r]:(e+=1,r=65536+((1023&r)<<10|1023&t.charCodeAt(e)),n[n.length]=u[240|r>>18]+u[128|r>>12&63]+u[128|r>>6&63]+u[128|63&r])}s+=n.join("")}return s},encodeValuesOnly:!1,format:s,formatter:i[s],indices:!1,serializeDate:e=>y.call(e),skipNulls:!1,strictNullHandling:!1},b={};function w(e,t,n,r,a,o,s,i,l,u,c,f,p,m,y,k,S,_){let x=e,E=_,C=0,P=!1;for(;void 0!==(E=E.get(b))&&!P;){const t=E.get(e);if(C+=1,void 0!==t){if(t===C)throw new RangeError("Cyclic object value");P=!0}void 0===E.get(b)&&(C=0)}if("function"==typeof u?x=u(t,x):x instanceof Date?x=p?.(x):"comma"===n&&h(x)&&(x=d(x,(function(e){return e instanceof Date?p?.(e):e}))),null===x){if(o)return l&&!k?l(t,v.encoder,S,"key",m):t;x=""}if("string"==typeof(A=x)||"number"==typeof A||"boolean"==typeof A||"symbol"==typeof A||"bigint"==typeof A||function(e){return!(!e||"object"!=typeof e||!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e)))}(x)){if(l){const e=k?t:l(t,v.encoder,S,"key",m);return[y?.(e)+"="+y?.(l(x,v.encoder,S,"value",m))]}return[y?.(t)+"="+y?.(String(x))]}var A;const T=[];if(void 0===x)return T;let N;if("comma"===n&&h(x))k&&l&&(x=d(x,l)),N=[{value:x.length>0?x.join(",")||null:void 0}];else if(h(u))N=u;else{const e=Object.keys(x);N=c?e.sort(c):e}const O=i?String(t).replace(/\./g,"%2E"):String(t),R=r&&h(x)&&1===x.length?O+"[]":O;if(a&&h(x)&&0===x.length)return R+"[]";for(let t=0;t<N.length;++t){const d=N[t],v="object"==typeof d&&void 0!==d.value?d.value:x[d];if(s&&null===v)continue;const E=f&&i?d.replace(/\./g,"%2E"):d,P=h(x)?"function"==typeof n?n(R,E):R:R+(f?"."+E:"["+E+"]");_.set(e,C);const A=new WeakMap;A.set(b,_),g(T,w(v,P,n,r,a,o,s,i,"comma"===n&&k&&h(x)?null:l,u,c,f,p,m,y,k,S,A))}return T}const k="4.98.0";let S,_,x,E,C,P,A,T,N,O=!1,R=null,I=null,L=null,D=null;class z{constructor(e){this.body=e}get[Symbol.toStringTag](){return"MultipartBody"}}const M=()=>{S||function(e,t={auto:!1}){if(O)throw new Error(`you must \`import 'openai/shims/${e.kind}'\` before importing anything else from openai`);if(S)throw new Error(`can't \`import 'openai/shims/${e.kind}'\` after \`import 'openai/shims/${S}'\``);O=t.auto,S=e.kind,_=e.fetch,R=e.Request,I=e.Response,L=e.Headers,x=e.FormData,D=e.Blob,E=e.File,C=e.ReadableStream,P=e.getMultipartRequestOptions,A=e.getDefaultAgent,T=e.fileFromPath,N=e.isFsReadStream}(function({manuallyImported:e}={}){const t=e?"You may need to use polyfills":"Add one of these imports before your first `import … from 'openai'`:\n- `import 'openai/shims/node'` (if you're running on Node)\n- `import 'openai/shims/web'` (otherwise)\n";let n,r,a,o;try{n=fetch,r=Request,a=Response,o=Headers}catch(e){throw new Error(`this environment is missing the following Web Fetch API type: ${e.message}. ${t}`)}return{kind:"web",fetch:n,Request:r,Response:a,Headers:o,FormData:"undefined"!=typeof FormData?FormData:class{constructor(){throw new Error(`file uploads aren't supported in this environment yet as 'FormData' is undefined. ${t}`)}},Blob:"undefined"!=typeof Blob?Blob:class{constructor(){throw new Error(`file uploads aren't supported in this environment yet as 'Blob' is undefined. ${t}`)}},File:"undefined"!=typeof File?File:class{constructor(){throw new Error(`file uploads aren't supported in this environment yet as 'File' is undefined. ${t}`)}},ReadableStream:"undefined"!=typeof ReadableStream?ReadableStream:class{constructor(){throw new Error(`streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${t}`)}},getMultipartRequestOptions:async(e,t)=>({...t,body:new z(e)}),getDefaultAgent:e=>{},fileFromPath:()=>{throw new Error("The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads")},isFsReadStream:e=>!1}}(),{auto:!0})};M();class $ extends Error{}class F extends ${constructor(e,t,n,r){super(`${F.makeMessage(e,t,n)}`),this.status=e,this.headers=r,this.request_id=r?.["x-request-id"],this.error=t;const a=t;this.code=a?.code,this.param=a?.param,this.type=a?.type}static makeMessage(e,t,n){const r=t?.message?"string"==typeof t.message?t.message:JSON.stringify(t.message):t?JSON.stringify(t):n;return e&&r?`${e} ${r}`:e?`${e} status code (no body)`:r||"(no status code or body)"}static generate(e,t,n,r){if(!e||!r)return new U({message:n,cause:Me(t)});const a=t?.error;return 400===e?new q(e,a,n,r):401===e?new H(e,a,n,r):403===e?new W(e,a,n,r):404===e?new V(e,a,n,r):409===e?new Q(e,a,n,r):422===e?new K(e,a,n,r):429===e?new X(e,a,n,r):e>=500?new G(e,a,n,r):new F(e,a,n,r)}}class j extends F{constructor({message:e}={}){super(void 0,void 0,e||"Request was aborted.",void 0)}}class U extends F{constructor({message:e,cause:t}){super(void 0,void 0,e||"Connection error.",void 0),t&&(this.cause=t)}}class B extends U{constructor({message:e}={}){super({message:e??"Request timed out."})}}class q extends F{}class H extends F{}class W extends F{}class V extends F{}class Q extends F{}class K extends F{}class X extends F{}class G extends F{}class J extends ${constructor(){super("Could not parse response content as the length limit was reached")}}class Y extends ${constructor(){super("Could not parse response content as the request was rejected by the content filter")}}var Z,ee=function(e,t,n,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!a:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(e,n):a?a.value=n:t.set(e,n),n},te=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};class ne{constructor(){Z.set(this,void 0),this.buffer=new Uint8Array,ee(this,Z,null,"f")}decode(e){if(null==e)return[];const t=e instanceof ArrayBuffer?new Uint8Array(e):"string"==typeof e?(new TextEncoder).encode(e):e;let n=new Uint8Array(this.buffer.length+t.length);n.set(this.buffer),n.set(t,this.buffer.length),this.buffer=n;const r=[];let a;for(;null!=(a=re(this.buffer,te(this,Z,"f")));){if(a.carriage&&null==te(this,Z,"f")){ee(this,Z,a.index,"f");continue}if(null!=te(this,Z,"f")&&(a.index!==te(this,Z,"f")+1||a.carriage)){r.push(this.decodeText(this.buffer.slice(0,te(this,Z,"f")-1))),this.buffer=this.buffer.slice(te(this,Z,"f")),ee(this,Z,null,"f");continue}const e=null!==te(this,Z,"f")?a.preceding-1:a.preceding,t=this.decodeText(this.buffer.slice(0,e));r.push(t),this.buffer=this.buffer.slice(a.index),ee(this,Z,null,"f")}return r}decodeText(e){if(null==e)return"";if("string"==typeof e)return e;if("undefined"!=typeof Buffer){if(e instanceof Buffer)return e.toString();if(e instanceof Uint8Array)return Buffer.from(e).toString();throw new $(`Unexpected: received non-Uint8Array (${e.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`)}if("undefined"!=typeof TextDecoder){if(e instanceof Uint8Array||e instanceof ArrayBuffer)return this.textDecoder??(this.textDecoder=new TextDecoder("utf8")),this.textDecoder.decode(e);throw new $(`Unexpected: received non-Uint8Array/ArrayBuffer (${e.constructor.name}) in a web platform. Please report this error.`)}throw new $("Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.")}flush(){return this.buffer.length?this.decode("\n"):[]}}function re(e,t){for(let n=t??0;n<e.length;n++){if(10===e[n])return{preceding:n,index:n+1,carriage:!1};if(13===e[n])return{preceding:n,index:n+1,carriage:!0}}return null}function ae(e){for(let t=0;t<e.length-1;t++){if(10===e[t]&&10===e[t+1])return t+2;if(13===e[t]&&13===e[t+1])return t+2;if(13===e[t]&&10===e[t+1]&&t+3<e.length&&13===e[t+2]&&10===e[t+3])return t+4}return-1}function oe(e){if(e[Symbol.asyncIterator])return e;const t=e.getReader();return{async next(){try{const e=await t.read();return e?.done&&t.releaseLock(),e}catch(e){throw t.releaseLock(),e}},async return(){const e=t.cancel();return t.releaseLock(),await e,{done:!0,value:void 0}},[Symbol.asyncIterator](){return this}}}Z=new WeakMap,ne.NEWLINE_CHARS=new Set(["\n","\r"]),ne.NEWLINE_REGEXP=/\r\n|[\n\r]/g;class se{constructor(e,t){this.iterator=e,this.controller=t}static fromSSEResponse(e,t){let n=!1;return new se((async function*(){if(n)throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");n=!0;let r=!1;try{for await(const n of async function*(e,t){if(!e.body)throw t.abort(),new $("Attempted to iterate over a response with no body");const n=new ie,r=new ne,a=oe(e.body);for await(const e of async function*(e){let t=new Uint8Array;for await(const n of e){if(null==n)continue;const e=n instanceof ArrayBuffer?new Uint8Array(n):"string"==typeof n?(new TextEncoder).encode(n):n;let r,a=new Uint8Array(t.length+e.length);for(a.set(t),a.set(e,t.length),t=a;-1!==(r=ae(t));)yield t.slice(0,r),t=t.slice(r)}t.length>0&&(yield t)}(a))for(const t of r.decode(e)){const e=n.decode(t);e&&(yield e)}for(const e of r.flush()){const t=n.decode(e);t&&(yield t)}}(e,t))if(!r)if(n.data.startsWith("[DONE]"))r=!0;else if(null===n.event||n.event.startsWith("response.")||n.event.startsWith("transcript.")){let t;try{t=JSON.parse(n.data)}catch(e){throw console.error("Could not parse message into JSON:",n.data),console.error("From chunk:",n.raw),e}if(t&&t.error)throw new F(void 0,t.error,void 0,Ee(e.headers));yield t}else{let e;try{e=JSON.parse(n.data)}catch(e){throw console.error("Could not parse message into JSON:",n.data),console.error("From chunk:",n.raw),e}if("error"==n.event)throw new F(void 0,e.error,e.message,void 0);yield{event:n.event,data:e}}r=!0}catch(e){if(e instanceof Error&&"AbortError"===e.name)return;throw e}finally{r||t.abort()}}),t)}static fromReadableStream(e,t){let n=!1;return new se((async function*(){if(n)throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");n=!0;let r=!1;try{for await(const t of async function*(){const t=new ne,n=oe(e);for await(const e of n)for(const n of t.decode(e))yield n;for(const e of t.flush())yield e}())r||t&&(yield JSON.parse(t));r=!0}catch(e){if(e instanceof Error&&"AbortError"===e.name)return;throw e}finally{r||t.abort()}}),t)}[Symbol.asyncIterator](){return this.iterator()}tee(){const e=[],t=[],n=this.iterator(),r=r=>({next:()=>{if(0===r.length){const r=n.next();e.push(r),t.push(r)}return r.shift()}});return[new se((()=>r(e)),this.controller),new se((()=>r(t)),this.controller)]}toReadableStream(){const e=this;let t;const n=new TextEncoder;return new C({async start(){t=e[Symbol.asyncIterator]()},async pull(e){try{const{value:r,done:a}=await t.next();if(a)return e.close();const o=n.encode(JSON.stringify(r)+"\n");e.enqueue(o)}catch(t){e.error(t)}},async cancel(){await(t.return?.())}})}}class ie{constructor(){this.event=null,this.data=[],this.chunks=[]}decode(e){if(e.endsWith("\r")&&(e=e.substring(0,e.length-1)),!e){if(!this.event&&!this.data.length)return null;const e={event:this.event,data:this.data.join("\n"),raw:this.chunks};return this.event=null,this.data=[],this.chunks=[],e}if(this.chunks.push(e),e.startsWith(":"))return null;let[t,n,r]=function(e){const t=e.indexOf(":");return-1!==t?[e.substring(0,t),":",e.substring(t+1)]:[e,"",""]}(e);return r.startsWith(" ")&&(r=r.substring(1)),"event"===t?this.event=r:"data"===t&&this.data.push(r),null}}const le=e=>null!=e&&"object"==typeof e&&"string"==typeof e.url&&"function"==typeof e.blob,ue=e=>null!=e&&"object"==typeof e&&"string"==typeof e.name&&"number"==typeof e.lastModified&&ce(e),ce=e=>null!=e&&"object"==typeof e&&"number"==typeof e.size&&"string"==typeof e.type&&"function"==typeof e.text&&"function"==typeof e.slice&&"function"==typeof e.arrayBuffer;async function de(e,t,n){if(e=await e,ue(e))return e;if(le(e)){const r=await e.blob();t||(t=new URL(e.url).pathname.split(/[\\/]/).pop()??"unknown_file");const a=ce(r)?[await r.arrayBuffer()]:[r];return new E(a,t,n)}const r=await async function(e){let t=[];if("string"==typeof e||ArrayBuffer.isView(e)||e instanceof ArrayBuffer)t.push(e);else if(ce(e))t.push(await e.arrayBuffer());else{if(!pe(e))throw new Error(`Unexpected data type: ${typeof e}; constructor: ${e?.constructor?.name}; props: ${function(e){return`[${Object.getOwnPropertyNames(e).map((e=>`"${e}"`)).join(", ")}]`}(e)}`);for await(const n of e)t.push(n)}return t}(e);if(t||(t=function(e){return fe(e.name)||fe(e.filename)||fe(e.path)?.split(/[\\/]/).pop()}(e)??"unknown_file"),!n?.type){const e=r[0]?.type;"string"==typeof e&&(n={...n,type:e})}return new E(r,t,n)}const fe=e=>"string"==typeof e?e:"undefined"!=typeof Buffer&&e instanceof Buffer?String(e):void 0,pe=e=>null!=e&&"object"==typeof e&&"function"==typeof e[Symbol.asyncIterator],he=e=>e&&"object"==typeof e&&e.body&&"MultipartBody"===e[Symbol.toStringTag],me=async e=>{const t=await ge(e.body);return P(t,e)},ge=async e=>{const t=new x;return await Promise.all(Object.entries(e||{}).map((([e,n])=>ye(t,e,n)))),t},ye=async(e,t,n)=>{if(void 0!==n){if(null==n)throw new TypeError(`Received null for "${t}"; to pass null in FormData, you must use the string 'null'`);if("string"==typeof n||"number"==typeof n||"boolean"==typeof n)e.append(t,String(n));else if((e=>ue(e)||le(e)||N(e))(n)){const r=await de(n);e.append(t,r)}else if(Array.isArray(n))await Promise.all(n.map((n=>ye(e,t+"[]",n))));else{if("object"!=typeof n)throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${n} instead`);await Promise.all(Object.entries(n).map((([n,r])=>ye(e,`${t}[${n}]`,r))))}}};var ve;async function be(e){const{response:t}=e;if(e.options.stream)return qe("response",t.status,t.url,t.headers,t.body),e.options.__streamClass?e.options.__streamClass.fromSSEResponse(t,e.controller):se.fromSSEResponse(t,e.controller);if(204===t.status)return null;if(e.options.__binaryResponse)return t;const n=t.headers.get("content-type"),r=n?.split(";")[0]?.trim();if(r?.includes("application/json")||r?.endsWith("+json")){const e=await t.json();return qe("response",t.status,t.url,t.headers,e),we(e,t)}const a=await t.text();return qe("response",t.status,t.url,t.headers,a),a}function we(e,t){return!e||"object"!=typeof e||Array.isArray(e)?e:Object.defineProperty(e,"_request_id",{value:t.headers.get("x-request-id"),enumerable:!1})}M();class ke extends Promise{constructor(e,t=be){super((e=>{e(null)})),this.responsePromise=e,this.parseResponse=t}_thenUnwrap(e){return new ke(this.responsePromise,(async t=>we(e(await this.parseResponse(t),t),t.response)))}asResponse(){return this.responsePromise.then((e=>e.response))}async withResponse(){const[e,t]=await Promise.all([this.parse(),this.asResponse()]);return{data:e,response:t,request_id:t.headers.get("x-request-id")}}parse(){return this.parsedPromise||(this.parsedPromise=this.responsePromise.then(this.parseResponse)),this.parsedPromise}then(e,t){return this.parse().then(e,t)}catch(e){return this.parse().catch(e)}finally(e){return this.parse().finally(e)}}class Se{constructor({baseURL:e,maxRetries:t=2,timeout:n=6e5,httpAgent:r,fetch:a}){this.baseURL=e,this.maxRetries=ze("maxRetries",t),this.timeout=ze("timeout",n),this.httpAgent=r,this.fetch=a??_}authHeaders(e){return{}}defaultHeaders(e){return{Accept:"application/json","Content-Type":"application/json","User-Agent":this.getUserAgent(),...Oe(),...this.authHeaders(e)}}validateHeaders(e,t){}defaultIdempotencyKey(){return`stainless-node-retry-${He()}`}get(e,t){return this.methodRequest("get",e,t)}post(e,t){return this.methodRequest("post",e,t)}patch(e,t){return this.methodRequest("patch",e,t)}put(e,t){return this.methodRequest("put",e,t)}delete(e,t){return this.methodRequest("delete",e,t)}methodRequest(e,t,n){return this.request(Promise.resolve(n).then((async n=>{const r=n&&ce(n?.body)?new DataView(await n.body.arrayBuffer()):n?.body instanceof DataView?n.body:n?.body instanceof ArrayBuffer?new DataView(n.body):n&&ArrayBuffer.isView(n?.body)?new DataView(n.body.buffer):n?.body;return{method:e,path:t,...n,body:r}})))}getAPIList(e,t,n){return this.requestAPIList(t,{method:"get",path:e,...n})}calculateContentLength(e){if("string"==typeof e){if("undefined"!=typeof Buffer)return Buffer.byteLength(e,"utf8").toString();if("undefined"!=typeof TextEncoder)return(new TextEncoder).encode(e).length.toString()}else if(ArrayBuffer.isView(e))return e.byteLength.toString();return null}buildRequest(e,{retryCount:t=0}={}){const n={...e},{method:r,path:a,query:o,headers:s={}}=n,i=ArrayBuffer.isView(n.body)||n.__binaryRequest&&"string"==typeof n.body?n.body:he(n.body)?n.body.body:n.body?JSON.stringify(n.body,null,2):null,l=this.calculateContentLength(i),u=this.buildURL(a,o);"timeout"in n&&ze("timeout",n.timeout),n.timeout=n.timeout??this.timeout;const c=n.httpAgent??this.httpAgent??A(u),d=n.timeout+1e3;return"number"==typeof c?.options?.timeout&&d>(c.options.timeout??0)&&(c.options.timeout=d),this.idempotencyHeader&&"get"!==r&&(e.idempotencyKey||(e.idempotencyKey=this.defaultIdempotencyKey()),s[this.idempotencyHeader]=e.idempotencyKey),{req:{method:r,...i&&{body:i},headers:this.buildHeaders({options:n,headers:s,contentLength:l,retryCount:t}),...c&&{agent:c},signal:n.signal??null},url:u,timeout:n.timeout}}buildHeaders({options:e,headers:t,contentLength:n,retryCount:r}){const a={};n&&(a["content-length"]=n);const o=this.defaultHeaders(e);return Ue(a,o),Ue(a,t),he(e.body)&&"node"!==S&&delete a["content-type"],void 0===We(o,"x-stainless-retry-count")&&void 0===We(t,"x-stainless-retry-count")&&(a["x-stainless-retry-count"]=String(r)),void 0===We(o,"x-stainless-timeout")&&void 0===We(t,"x-stainless-timeout")&&e.timeout&&(a["x-stainless-timeout"]=String(Math.trunc(e.timeout/1e3))),this.validateHeaders(a,t),a}async prepareOptions(e){}async prepareRequest(e,{url:t,options:n}){}parseHeaders(e){return e?Symbol.iterator in e?Object.fromEntries(Array.from(e).map((e=>[...e]))):{...e}:{}}makeStatusError(e,t,n,r){return F.generate(e,t,n,r)}request(e,t=null){return new ke(this.makeRequest(e,t))}async makeRequest(e,t){const n=await e,r=n.maxRetries??this.maxRetries;null==t&&(t=r),await this.prepareOptions(n);const{req:a,url:o,timeout:s}=this.buildRequest(n,{retryCount:r-t});if(await this.prepareRequest(a,{url:o,options:n}),qe("request",o,n,a.headers),n.signal?.aborted)throw new j;const i=new AbortController,l=await this.fetchWithTimeout(o,a,s,i).catch(Me);if(l instanceof Error){if(n.signal?.aborted)throw new j;if(t)return this.retryRequest(n,t);if("AbortError"===l.name)throw new B;throw new U({cause:l})}const u=Ee(l.headers);if(!l.ok){if(t&&this.shouldRetry(l))return qe(`response (error; retrying, ${t} attempts remaining)`,l.status,o,u),this.retryRequest(n,t,u);const e=await l.text().catch((e=>Me(e).message)),r=Re(e),a=r?void 0:e;throw qe(`response (error; ${t?"(error; no more retries left)":"(error; not retryable)"})`,l.status,o,u,a),this.makeStatusError(l.status,r,a,u)}return{response:l,options:n,controller:i}}requestAPIList(e,t){const n=this.makeRequest(t,null);return new xe(this,n,e)}buildURL(e,t){const n=Le(e)?new URL(e):new URL(this.baseURL+(this.baseURL.endsWith("/")&&e.startsWith("/")?e.slice(1):e)),r=this.defaultQuery();return Fe(r)||(t={...r,...t}),"object"==typeof t&&t&&!Array.isArray(t)&&(n.search=this.stringifyQuery(t)),n.toString()}stringifyQuery(e){return Object.entries(e).filter((([e,t])=>void 0!==t)).map((([e,t])=>{if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return`${encodeURIComponent(e)}=${encodeURIComponent(t)}`;if(null===t)return`${encodeURIComponent(e)}=`;throw new $(`Cannot stringify type ${typeof t}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`)})).join("&")}async fetchWithTimeout(e,t,n,r){const{signal:a,...o}=t||{};a&&a.addEventListener("abort",(()=>r.abort()));const s=setTimeout((()=>r.abort()),n),i={signal:r.signal,...o};return i.method&&(i.method=i.method.toUpperCase()),this.fetch.call(void 0,e,i).finally((()=>{clearTimeout(s)}))}shouldRetry(e){const t=e.headers.get("x-should-retry");return"true"===t||"false"!==t&&(408===e.status||409===e.status||429===e.status||e.status>=500)}async retryRequest(e,t,n){let r;const a=n?.["retry-after-ms"];if(a){const e=parseFloat(a);Number.isNaN(e)||(r=e)}const o=n?.["retry-after"];if(o&&!r){const e=parseFloat(o);r=Number.isNaN(e)?Date.parse(o)-Date.now():1e3*e}if(!(r&&0<=r&&r<6e4)){const n=e.maxRetries??this.maxRetries;r=this.calculateDefaultRetryTimeoutMillis(t,n)}return await De(r),this.makeRequest(e,t-1)}calculateDefaultRetryTimeoutMillis(e,t){const n=t-e;return Math.min(.5*Math.pow(2,n),8)*(1-.25*Math.random())*1e3}getUserAgent(){return`${this.constructor.name}/JS ${k}`}}class _e{constructor(e,t,n,r){ve.set(this,void 0),function(e,t,n,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!a:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?a.call(e,n):a?a.value=n:t.set(e,n)}(this,ve,e,"f"),this.options=r,this.response=t,this.body=n}hasNextPage(){return!!this.getPaginatedItems().length&&null!=this.nextPageInfo()}async getNextPage(){const e=this.nextPageInfo();if(!e)throw new $("No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.");const t={...this.options};if("params"in e&&"object"==typeof t.query)t.query={...t.query,...e.params};else if("url"in e){const n=[...Object.entries(t.query||{}),...e.url.searchParams.entries()];for(const[t,r]of n)e.url.searchParams.set(t,r);t.query=void 0,t.path=e.url.toString()}return await function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)}(this,ve,"f").requestAPIList(this.constructor,t)}async*iterPages(){let e=this;for(yield e;e.hasNextPage();)e=await e.getNextPage(),yield e}async*[(ve=new WeakMap,Symbol.asyncIterator)](){for await(const e of this.iterPages())for(const t of e.getPaginatedItems())yield t}}class xe extends ke{constructor(e,t,n){super(t,(async t=>new n(e,t.response,await be(t),t.options)))}async*[Symbol.asyncIterator](){const e=await(this);for await(const t of e)yield t}}const Ee=e=>new Proxy(Object.fromEntries(e.entries()),{get(e,t){const n=t.toString();return e[n.toLowerCase()]||e[n]}}),Ce={method:!0,path:!0,query:!0,body:!0,headers:!0,maxRetries:!0,stream:!0,timeout:!0,httpAgent:!0,signal:!0,idempotencyKey:!0,__metadata:!0,__binaryRequest:!0,__binaryResponse:!0,__streamClass:!0},Pe=e=>"object"==typeof e&&null!==e&&!Fe(e)&&Object.keys(e).every((e=>je(Ce,e))),Ae=e=>"x32"===e?"x32":"x86_64"===e||"x64"===e?"x64":"arm"===e?"arm":"aarch64"===e||"arm64"===e?"arm64":e?`other:${e}`:"unknown",Te=e=>(e=e.toLowerCase()).includes("ios")?"iOS":"android"===e?"Android":"darwin"===e?"MacOS":"win32"===e?"Windows":"freebsd"===e?"FreeBSD":"openbsd"===e?"OpenBSD":"linux"===e?"Linux":e?`Other:${e}`:"Unknown";let Ne;const Oe=()=>Ne??(Ne=(()=>{if("undefined"!=typeof Deno&&null!=Deno.build)return{"X-Stainless-Lang":"js","X-Stainless-Package-Version":k,"X-Stainless-OS":Te(Deno.build.os),"X-Stainless-Arch":Ae(Deno.build.arch),"X-Stainless-Runtime":"deno","X-Stainless-Runtime-Version":"string"==typeof Deno.version?Deno.version:Deno.version?.deno??"unknown"};if("undefined"!=typeof EdgeRuntime)return{"X-Stainless-Lang":"js","X-Stainless-Package-Version":k,"X-Stainless-OS":"Unknown","X-Stainless-Arch":`other:${EdgeRuntime}`,"X-Stainless-Runtime":"edge","X-Stainless-Runtime-Version":process.version};if("[object process]"===Object.prototype.toString.call("undefined"!=typeof process?process:0))return{"X-Stainless-Lang":"js","X-Stainless-Package-Version":k,"X-Stainless-OS":Te(process.platform),"X-Stainless-Arch":Ae(process.arch),"X-Stainless-Runtime":"node","X-Stainless-Runtime-Version":process.version};const e=function(){if("undefined"==typeof navigator||!navigator)return null;const e=[{key:"edge",pattern:/Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"ie",pattern:/MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"ie",pattern:/Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"chrome",pattern:/Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"firefox",pattern:/Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"safari",pattern:/(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/}];for(const{key:t,pattern:n}of e){const e=n.exec(navigator.userAgent);if(e)return{browser:t,version:`${e[1]||0}.${e[2]||0}.${e[3]||0}`}}return null}();return e?{"X-Stainless-Lang":"js","X-Stainless-Package-Version":k,"X-Stainless-OS":"Unknown","X-Stainless-Arch":"unknown","X-Stainless-Runtime":`browser:${e.browser}`,"X-Stainless-Runtime-Version":e.version}:{"X-Stainless-Lang":"js","X-Stainless-Package-Version":k,"X-Stainless-OS":"Unknown","X-Stainless-Arch":"unknown","X-Stainless-Runtime":"unknown","X-Stainless-Runtime-Version":"unknown"}})()),Re=e=>{try{return JSON.parse(e)}catch(e){return}},Ie=/^[a-z][a-z0-9+.-]*:/i,Le=e=>Ie.test(e),De=e=>new Promise((t=>setTimeout(t,e))),ze=(e,t)=>{if("number"!=typeof t||!Number.isInteger(t))throw new $(`${e} must be an integer`);if(t<0)throw new $(`${e} must be a positive integer`);return t},Me=e=>{if(e instanceof Error)return e;if("object"==typeof e&&null!==e)try{return new Error(JSON.stringify(e))}catch{}return new Error(e)},$e=e=>"undefined"!=typeof process?"MISSING_ENV_VAR"?.[e]?.trim()??void 0:"undefined"!=typeof Deno?Deno.env?.get?.(e)?.trim():void 0;function Fe(e){if(!e)return!0;for(const t in e)return!1;return!0}function je(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function Ue(e,t){for(const n in t){if(!je(t,n))continue;const r=n.toLowerCase();if(!r)continue;const a=t[n];null===a?delete e[r]:void 0!==a&&(e[r]=a)}}const Be=new Set(["authorization","api-key"]);function qe(e,...t){if("undefined"!=typeof process&&"true"==="MISSING_ENV_VAR"?.DEBUG){const n=t.map((e=>{if(!e)return e;if(e.headers){const t={...e,headers:{...e.headers}};for(const n in e.headers)Be.has(n.toLowerCase())&&(t.headers[n]="REDACTED");return t}let t=null;for(const n in e)Be.has(n.toLowerCase())&&(t??(t={...e}),t[n]="REDACTED");return t??e}));console.log(`OpenAI:DEBUG:${e}`,...n)}}const He=()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})),We=(e,t)=>{const n=t.toLowerCase();if((e=>"function"==typeof e?.get)(e)){const r=t[0]?.toUpperCase()+t.substring(1).replace(/([^\w])(\w)/g,((e,t,n)=>t+n.toUpperCase()));for(const a of[t,n,t.toUpperCase(),r]){const t=e.get(a);if(t)return t}}for(const[r,a]of Object.entries(e))if(r.toLowerCase()===n)return Array.isArray(a)?(a.length<=1||console.warn(`Received ${a.length} entries for the ${t} header, using the first entry.`),a[0]):a};function Ve(e){return null!=e&&"object"==typeof e&&!Array.isArray(e)}class Qe{constructor(e){this._client=e}}class Ke extends Qe{create(e,t){return this._client.post("/completions",{body:e,...t,stream:e.stream??!1})}}class Xe extends Qe{list(e,t={},n){return Pe(t)?this.list(e,{},t):this._client.getAPIList(`/chat/completions/${e}/messages`,et,{query:t,...n})}}class Ge extends _e{constructor(e,t,n,r){super(e,t,n,r),this.data=n.data||[],this.object=n.object}getPaginatedItems(){return this.data??[]}nextPageParams(){return null}nextPageInfo(){return null}}class Je extends _e{constructor(e,t,n,r){super(e,t,n,r),this.data=n.data||[],this.has_more=n.has_more||!1}getPaginatedItems(){return this.data??[]}hasNextPage(){return!1!==this.has_more&&super.hasNextPage()}nextPageParams(){const e=this.nextPageInfo();if(!e)return null;if("params"in e)return e.params;const t=Object.fromEntries(e.url.searchParams);return Object.keys(t).length?t:null}nextPageInfo(){const e=this.getPaginatedItems();if(!e.length)return null;const t=e[e.length-1]?.id;return t?{params:{after:t}}:null}}class Ye extends Qe{constructor(){super(...arguments),this.messages=new Xe(this._client)}create(e,t){return this._client.post("/chat/completions",{body:e,...t,stream:e.stream??!1})}retrieve(e,t){return this._client.get(`/chat/completions/${e}`,t)}update(e,t,n){return this._client.post(`/chat/completions/${e}`,{body:t,...n})}list(e={},t){return Pe(e)?this.list({},e):this._client.getAPIList("/chat/completions",Ze,{query:e,...t})}del(e,t){return this._client.delete(`/chat/completions/${e}`,t)}}class Ze extends Je{}class et extends Je{}Ye.ChatCompletionsPage=Ze,Ye.Messages=Xe;class tt extends Qe{constructor(){super(...arguments),this.completions=new Ye(this._client)}}tt.Completions=Ye,tt.ChatCompletionsPage=Ze;class nt extends Qe{create(e,t){const n=!!e.encoding_format;let r=n?e.encoding_format:"base64";n&&qe("Request","User defined encoding_format:",e.encoding_format);const a=this._client.post("/embeddings",{body:{...e,encoding_format:r},...t});return n?a:(qe("response","Decoding base64 embeddings to float32 array"),a._thenUnwrap((e=>(e&&e.data&&e.data.forEach((e=>{const t=e.embedding;e.embedding=(e=>{if("undefined"!=typeof Buffer){const t=Buffer.from(e,"base64");return Array.from(new Float32Array(t.buffer,t.byteOffset,t.length/Float32Array.BYTES_PER_ELEMENT))}{const t=atob(e),n=t.length,r=new Uint8Array(n);for(let e=0;e<n;e++)r[e]=t.charCodeAt(e);return Array.from(new Float32Array(r.buffer))}})(t)})),e))))}}class rt extends Qe{create(e,t){return this._client.post("/files",me({body:e,...t}))}retrieve(e,t){return this._client.get(`/files/${e}`,t)}list(e={},t){return Pe(e)?this.list({},e):this._client.getAPIList("/files",at,{query:e,...t})}del(e,t){return this._client.delete(`/files/${e}`,t)}content(e,t){return this._client.get(`/files/${e}/content`,{...t,headers:{Accept:"application/binary",...t?.headers},__binaryResponse:!0})}retrieveContent(e,t){return this._client.get(`/files/${e}/content`,t)}async waitForProcessing(e,{pollInterval:t=5e3,maxWait:n=18e5}={}){const r=new Set(["processed","error","deleted"]),a=Date.now();let o=await this.retrieve(e);for(;!o.status||!r.has(o.status);)if(await De(t),o=await this.retrieve(e),Date.now()-a>n)throw new B({message:`Giving up on waiting for file ${e} to finish processing after ${n} milliseconds.`});return o}}class at extends Je{}rt.FileObjectsPage=at;class ot extends Qe{createVariation(e,t){return this._client.post("/images/variations",me({body:e,...t}))}edit(e,t){return this._client.post("/images/edits",me({body:e,...t}))}generate(e,t){return this._client.post("/images/generations",{body:e,...t})}}class st extends Qe{create(e,t){return this._client.post("/audio/speech",{body:e,...t,headers:{Accept:"application/octet-stream",...t?.headers},__binaryResponse:!0})}}class it extends Qe{create(e,t){return this._client.post("/audio/transcriptions",me({body:e,...t,stream:e.stream??!1,__metadata:{model:e.model}}))}}class lt extends Qe{create(e,t){return this._client.post("/audio/translations",me({body:e,...t,__metadata:{model:e.model}}))}}class ut extends Qe{constructor(){super(...arguments),this.transcriptions=new it(this._client),this.translations=new lt(this._client),this.speech=new st(this._client)}}ut.Transcriptions=it,ut.Translations=lt,ut.Speech=st;class ct extends Qe{create(e,t){return this._client.post("/moderations",{body:e,...t})}}class dt extends Qe{retrieve(e,t){return this._client.get(`/models/${e}`,t)}list(e){return this._client.getAPIList("/models",ft,e)}del(e,t){return this._client.delete(`/models/${e}`,t)}}class ft extends Ge{}dt.ModelsPage=ft;class pt extends Qe{}class ht extends Qe{run(e,t){return this._client.post("/fine_tuning/alpha/graders/run",{body:e,...t})}validate(e,t){return this._client.post("/fine_tuning/alpha/graders/validate",{body:e,...t})}}class mt extends Qe{constructor(){super(...arguments),this.graders=new ht(this._client)}}mt.Graders=ht;class gt extends Qe{create(e,t,n){return this._client.getAPIList(`/fine_tuning/checkpoints/${e}/permissions`,yt,{body:t,method:"post",...n})}retrieve(e,t={},n){return Pe(t)?this.retrieve(e,{},t):this._client.get(`/fine_tuning/checkpoints/${e}/permissions`,{query:t,...n})}del(e,t,n){return this._client.delete(`/fine_tuning/checkpoints/${e}/permissions/${t}`,n)}}class yt extends Ge{}gt.PermissionCreateResponsesPage=yt;class vt extends Qe{constructor(){super(...arguments),this.permissions=new gt(this._client)}}vt.Permissions=gt,vt.PermissionCreateResponsesPage=yt;class bt extends Qe{list(e,t={},n){return Pe(t)?this.list(e,{},t):this._client.getAPIList(`/fine_tuning/jobs/${e}/checkpoints`,wt,{query:t,...n})}}class wt extends Je{}bt.FineTuningJobCheckpointsPage=wt;class kt extends Qe{constructor(){super(...arguments),this.checkpoints=new bt(this._client)}create(e,t){return this._client.post("/fine_tuning/jobs",{body:e,...t})}retrieve(e,t){return this._client.get(`/fine_tuning/jobs/${e}`,t)}list(e={},t){return Pe(e)?this.list({},e):this._client.getAPIList("/fine_tuning/jobs",St,{query:e,...t})}cancel(e,t){return this._client.post(`/fine_tuning/jobs/${e}/cancel`,t)}listEvents(e,t={},n){return Pe(t)?this.listEvents(e,{},t):this._client.getAPIList(`/fine_tuning/jobs/${e}/events`,_t,{query:t,...n})}pause(e,t){return this._client.post(`/fine_tuning/jobs/${e}/pause`,t)}resume(e,t){return this._client.post(`/fine_tuning/jobs/${e}/resume`,t)}}class St extends Je{}class _t extends Je{}kt.FineTuningJobsPage=St,kt.FineTuningJobEventsPage=_t,kt.Checkpoints=bt,kt.FineTuningJobCheckpointsPage=wt;class xt extends Qe{constructor(){super(...arguments),this.methods=new pt(this._client),this.jobs=new kt(this._client),this.checkpoints=new vt(this._client),this.alpha=new mt(this._client)}}xt.Methods=pt,xt.Jobs=kt,xt.FineTuningJobsPage=St,xt.FineTuningJobEventsPage=_t,xt.Checkpoints=vt,xt.Alpha=mt;class Et extends Qe{}class Ct extends Qe{constructor(){super(...arguments),this.graderModels=new Et(this._client)}}Ct.GraderModels=Et;class Pt extends Qe{create(e,t,n){return this._client.post(`/vector_stores/${e}/files`,{body:t,...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}retrieve(e,t,n){return this._client.get(`/vector_stores/${e}/files/${t}`,{...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}update(e,t,n,r){return this._client.post(`/vector_stores/${e}/files/${t}`,{body:n,...r,headers:{"OpenAI-Beta":"assistants=v2",...r?.headers}})}list(e,t={},n){return Pe(t)?this.list(e,{},t):this._client.getAPIList(`/vector_stores/${e}/files`,At,{query:t,...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}del(e,t,n){return this._client.delete(`/vector_stores/${e}/files/${t}`,{...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}async createAndPoll(e,t,n){const r=await this.create(e,t,n);return await this.poll(e,r.id,n)}async poll(e,t,n){const r={...n?.headers,"X-Stainless-Poll-Helper":"true"};for(n?.pollIntervalMs&&(r["X-Stainless-Custom-Poll-Interval"]=n.pollIntervalMs.toString());;){const a=await this.retrieve(e,t,{...n,headers:r}).withResponse(),o=a.data;switch(o.status){case"in_progress":let e=5e3;if(n?.pollIntervalMs)e=n.pollIntervalMs;else{const t=a.response.headers.get("openai-poll-after-ms");if(t){const n=parseInt(t);isNaN(n)||(e=n)}}await De(e);break;case"failed":case"completed":return o}}}async upload(e,t,n){const r=await this._client.files.create({file:t,purpose:"assistants"},n);return this.create(e,{file_id:r.id},n)}async uploadAndPoll(e,t,n){const r=await this.upload(e,t,n);return await this.poll(e,r.id,n)}content(e,t,n){return this._client.getAPIList(`/vector_stores/${e}/files/${t}/content`,Tt,{...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}}class At extends Je{}class Tt extends Ge{}Pt.VectorStoreFilesPage=At,Pt.FileContentResponsesPage=Tt;class Nt extends Qe{create(e,t,n){return this._client.post(`/vector_stores/${e}/file_batches`,{body:t,...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}retrieve(e,t,n){return this._client.get(`/vector_stores/${e}/file_batches/${t}`,{...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}cancel(e,t,n){return this._client.post(`/vector_stores/${e}/file_batches/${t}/cancel`,{...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}async createAndPoll(e,t,n){const r=await this.create(e,t);return await this.poll(e,r.id,n)}listFiles(e,t,n={},r){return Pe(n)?this.listFiles(e,t,{},n):this._client.getAPIList(`/vector_stores/${e}/file_batches/${t}/files`,At,{query:n,...r,headers:{"OpenAI-Beta":"assistants=v2",...r?.headers}})}async poll(e,t,n){const r={...n?.headers,"X-Stainless-Poll-Helper":"true"};for(n?.pollIntervalMs&&(r["X-Stainless-Custom-Poll-Interval"]=n.pollIntervalMs.toString());;){const{data:a,response:o}=await this.retrieve(e,t,{...n,headers:r}).withResponse();switch(a.status){case"in_progress":let e=5e3;if(n?.pollIntervalMs)e=n.pollIntervalMs;else{const t=o.headers.get("openai-poll-after-ms");if(t){const n=parseInt(t);isNaN(n)||(e=n)}}await De(e);break;case"failed":case"cancelled":case"completed":return a}}}async uploadAndPoll(e,{files:t,fileIds:n=[]},r){if(null==t||0==t.length)throw new Error("No `files` provided to process. If you've already uploaded files you should use `.createAndPoll()` instead");const a=r?.maxConcurrency??5,o=Math.min(a,t.length),s=this._client,i=t.values(),l=[...n],u=Array(o).fill(i).map((async function(e){for(let t of e){const e=await s.files.create({file:t,purpose:"assistants"},r);l.push(e.id)}}));return await(async e=>{const t=await Promise.allSettled(e),n=t.filter((e=>"rejected"===e.status));if(n.length){for(const e of n)console.error(e.reason);throw new Error(`${n.length} promise(s) failed - see the above errors`)}const r=[];for(const e of t)"fulfilled"===e.status&&r.push(e.value);return r})(u),await this.createAndPoll(e,{file_ids:l})}}class Ot extends Qe{constructor(){super(...arguments),this.files=new Pt(this._client),this.fileBatches=new Nt(this._client)}create(e,t){return this._client.post("/vector_stores",{body:e,...t,headers:{"OpenAI-Beta":"assistants=v2",...t?.headers}})}retrieve(e,t){return this._client.get(`/vector_stores/${e}`,{...t,headers:{"OpenAI-Beta":"assistants=v2",...t?.headers}})}update(e,t,n){return this._client.post(`/vector_stores/${e}`,{body:t,...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}list(e={},t){return Pe(e)?this.list({},e):this._client.getAPIList("/vector_stores",Rt,{query:e,...t,headers:{"OpenAI-Beta":"assistants=v2",...t?.headers}})}del(e,t){return this._client.delete(`/vector_stores/${e}`,{...t,headers:{"OpenAI-Beta":"assistants=v2",...t?.headers}})}search(e,t,n){return this._client.getAPIList(`/vector_stores/${e}/search`,It,{body:t,method:"post",...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}}class Rt extends Je{}class It extends Ge{}Ot.VectorStoresPage=Rt,Ot.VectorStoreSearchResponsesPage=It,Ot.Files=Pt,Ot.VectorStoreFilesPage=At,Ot.FileContentResponsesPage=Tt,Ot.FileBatches=Nt;class Lt extends Qe{create(e,t){return this._client.post("/assistants",{body:e,...t,headers:{"OpenAI-Beta":"assistants=v2",...t?.headers}})}retrieve(e,t){return this._client.get(`/assistants/${e}`,{...t,headers:{"OpenAI-Beta":"assistants=v2",...t?.headers}})}update(e,t,n){return this._client.post(`/assistants/${e}`,{body:t,...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}list(e={},t){return Pe(e)?this.list({},e):this._client.getAPIList("/assistants",Dt,{query:e,...t,headers:{"OpenAI-Beta":"assistants=v2",...t?.headers}})}del(e,t){return this._client.delete(`/assistants/${e}`,{...t,headers:{"OpenAI-Beta":"assistants=v2",...t?.headers}})}}class Dt extends Je{}function zt(e){return"function"==typeof e.parse}Lt.AssistantsPage=Dt;const Mt=e=>"assistant"===e?.role,$t=e=>"function"===e?.role,Ft=e=>"tool"===e?.role;var jt,Ut,Bt,qt,Ht,Wt,Vt,Qt,Kt,Xt,Gt,Jt,Yt,Zt=function(e,t,n,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!a:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(e,n):a?a.value=n:t.set(e,n),n},en=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};class tn{constructor(){jt.add(this),this.controller=new AbortController,Ut.set(this,void 0),Bt.set(this,(()=>{})),qt.set(this,(()=>{})),Ht.set(this,void 0),Wt.set(this,(()=>{})),Vt.set(this,(()=>{})),Qt.set(this,{}),Kt.set(this,!1),Xt.set(this,!1),Gt.set(this,!1),Jt.set(this,!1),Zt(this,Ut,new Promise(((e,t)=>{Zt(this,Bt,e,"f"),Zt(this,qt,t,"f")})),"f"),Zt(this,Ht,new Promise(((e,t)=>{Zt(this,Wt,e,"f"),Zt(this,Vt,t,"f")})),"f"),en(this,Ut,"f").catch((()=>{})),en(this,Ht,"f").catch((()=>{}))}_run(e){setTimeout((()=>{e().then((()=>{this._emitFinal(),this._emit("end")}),en(this,jt,"m",Yt).bind(this))}),0)}_connected(){this.ended||(en(this,Bt,"f").call(this),this._emit("connect"))}get ended(){return en(this,Kt,"f")}get errored(){return en(this,Xt,"f")}get aborted(){return en(this,Gt,"f")}abort(){this.controller.abort()}on(e,t){return(en(this,Qt,"f")[e]||(en(this,Qt,"f")[e]=[])).push({listener:t}),this}off(e,t){const n=en(this,Qt,"f")[e];if(!n)return this;const r=n.findIndex((e=>e.listener===t));return r>=0&&n.splice(r,1),this}once(e,t){return(en(this,Qt,"f")[e]||(en(this,Qt,"f")[e]=[])).push({listener:t,once:!0}),this}emitted(e){return new Promise(((t,n)=>{Zt(this,Jt,!0,"f"),"error"!==e&&this.once("error",n),this.once(e,t)}))}async done(){Zt(this,Jt,!0,"f"),await en(this,Ht,"f")}_emit(e,...t){if(en(this,Kt,"f"))return;"end"===e&&(Zt(this,Kt,!0,"f"),en(this,Wt,"f").call(this));const n=en(this,Qt,"f")[e];if(n&&(en(this,Qt,"f")[e]=n.filter((e=>!e.once)),n.forEach((({listener:e})=>e(...t)))),"abort"===e){const e=t[0];return en(this,Jt,"f")||n?.length||Promise.reject(e),en(this,qt,"f").call(this,e),en(this,Vt,"f").call(this,e),void this._emit("end")}if("error"===e){const e=t[0];en(this,Jt,"f")||n?.length||Promise.reject(e),en(this,qt,"f").call(this,e),en(this,Vt,"f").call(this,e),this._emit("end")}}_emitFinal(){}}function nn(e){return"auto-parseable-response-format"===e?.$brand}function rn(e){return"auto-parseable-tool"===e?.$brand}function an(e,t){const n=e.choices.map((e=>{if("length"===e.finish_reason)throw new J;if("content_filter"===e.finish_reason)throw new Y;return{...e,message:{...e.message,...e.message.tool_calls?{tool_calls:e.message.tool_calls?.map((e=>function(e,t){const n=e.tools?.find((e=>e.function?.name===t.function.name));return{...t,function:{...t.function,parsed_arguments:rn(n)?n.$parseRaw(t.function.arguments):n?.function.strict?JSON.parse(t.function.arguments):null}}}(t,e)))??void 0}:void 0,parsed:e.message.content&&!e.message.refusal?on(t,e.message.content):null}}}));return{...e,choices:n}}function on(e,t){return"json_schema"!==e.response_format?.type?null:"json_schema"===e.response_format?.type?"$parseRaw"in e.response_format?e.response_format.$parseRaw(t):JSON.parse(t):null}function sn(e,t){if(!e)return!1;const n=e.tools?.find((e=>e.function?.name===t.function.name));return rn(n)||n?.function.strict||!1}function ln(e){return!!nn(e.response_format)||(e.tools?.some((e=>rn(e)||"function"===e.type&&!0===e.function.strict))??!1)}Ut=new WeakMap,Bt=new WeakMap,qt=new WeakMap,Ht=new WeakMap,Wt=new WeakMap,Vt=new WeakMap,Qt=new WeakMap,Kt=new WeakMap,Xt=new WeakMap,Gt=new WeakMap,Jt=new WeakMap,jt=new WeakSet,Yt=function(e){if(Zt(this,Xt,!0,"f"),e instanceof Error&&"AbortError"===e.name&&(e=new j),e instanceof j)return Zt(this,Gt,!0,"f"),this._emit("abort",e);if(e instanceof $)return this._emit("error",e);if(e instanceof Error){const t=new $(e.message);return t.cause=e,this._emit("error",t)}return this._emit("error",new $(String(e)))};var un,cn,dn,fn,pn,hn,mn,gn,yn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};const vn=10;class bn extends tn{constructor(){super(...arguments),un.add(this),this._chatCompletions=[],this.messages=[]}_addChatCompletion(e){this._chatCompletions.push(e),this._emit("chatCompletion",e);const t=e.choices[0]?.message;return t&&this._addMessage(t),e}_addMessage(e,t=!0){if("content"in e||(e.content=null),this.messages.push(e),t)if(this._emit("message",e),($t(e)||Ft(e))&&e.content)this._emit("functionCallResult",e.content);else if(Mt(e)&&e.function_call)this._emit("functionCall",e.function_call);else if(Mt(e)&&e.tool_calls)for(const t of e.tool_calls)"function"===t.type&&this._emit("functionCall",t.function)}async finalChatCompletion(){await this.done();const e=this._chatCompletions[this._chatCompletions.length-1];if(!e)throw new $("stream ended without producing a ChatCompletion");return e}async finalContent(){return await this.done(),yn(this,un,"m",cn).call(this)}async finalMessage(){return await this.done(),yn(this,un,"m",dn).call(this)}async finalFunctionCall(){return await this.done(),yn(this,un,"m",fn).call(this)}async finalFunctionCallResult(){return await this.done(),yn(this,un,"m",pn).call(this)}async totalUsage(){return await this.done(),yn(this,un,"m",hn).call(this)}allChatCompletions(){return[...this._chatCompletions]}_emitFinal(){const e=this._chatCompletions[this._chatCompletions.length-1];e&&this._emit("finalChatCompletion",e);const t=yn(this,un,"m",dn).call(this);t&&this._emit("finalMessage",t);const n=yn(this,un,"m",cn).call(this);n&&this._emit("finalContent",n);const r=yn(this,un,"m",fn).call(this);r&&this._emit("finalFunctionCall",r);const a=yn(this,un,"m",pn).call(this);null!=a&&this._emit("finalFunctionCallResult",a),this._chatCompletions.some((e=>e.usage))&&this._emit("totalUsage",yn(this,un,"m",hn).call(this))}async _createChatCompletion(e,t,n){const r=n?.signal;r&&(r.aborted&&this.controller.abort(),r.addEventListener("abort",(()=>this.controller.abort()))),yn(this,un,"m",mn).call(this,t);const a=await e.chat.completions.create({...t,stream:!1},{...n,signal:this.controller.signal});return this._connected(),this._addChatCompletion(an(a,t))}async _runChatCompletion(e,t,n){for(const e of t.messages)this._addMessage(e,!1);return await this._createChatCompletion(e,t,n)}async _runFunctions(e,t,n){const r="function",{function_call:a="auto",stream:o,...s}=t,i="string"!=typeof a&&a?.name,{maxChatCompletions:l=vn}=n||{},u={};for(const e of t.functions)u[e.name||e.function.name]=e;const c=t.functions.map((e=>({name:e.name||e.function.name,parameters:e.parameters,description:e.description})));for(const e of t.messages)this._addMessage(e,!1);for(let t=0;t<l;++t){const t=await this._createChatCompletion(e,{...s,function_call:a,functions:c,messages:[...this.messages]},n),o=t.choices[0]?.message;if(!o)throw new $("missing message in ChatCompletion response");if(!o.function_call)return;const{name:l,arguments:d}=o.function_call,f=u[l];if(!f){const e=`Invalid function_call: ${JSON.stringify(l)}. Available options are: ${c.map((e=>JSON.stringify(e.name))).join(", ")}. Please try again`;this._addMessage({role:r,name:l,content:e});continue}if(i&&i!==l){const e=`Invalid function_call: ${JSON.stringify(l)}. ${JSON.stringify(i)} requested. Please try again`;this._addMessage({role:r,name:l,content:e});continue}let p;try{p=zt(f)?await f.parse(d):d}catch(e){this._addMessage({role:r,name:l,content:e instanceof Error?e.message:String(e)});continue}const h=await f.function(p,this),m=yn(this,un,"m",gn).call(this,h);if(this._addMessage({role:r,name:l,content:m}),i)return}}async _runTools(e,t,n){const r="tool",{tool_choice:a="auto",stream:o,...s}=t,i="string"!=typeof a&&a?.function?.name,{maxChatCompletions:l=vn}=n||{},u=t.tools.map((e=>{if(rn(e)){if(!e.$callback)throw new $("Tool given to `.runTools()` that does not have an associated function");return{type:"function",function:{function:e.$callback,name:e.function.name,description:e.function.description||"",parameters:e.function.parameters,parse:e.$parseRaw,strict:!0}}}return e})),c={};for(const e of u)"function"===e.type&&(c[e.function.name||e.function.function.name]=e.function);const d="tools"in t?u.map((e=>"function"===e.type?{type:"function",function:{name:e.function.name||e.function.function.name,parameters:e.function.parameters,description:e.function.description,strict:e.function.strict}}:e)):void 0;for(const e of t.messages)this._addMessage(e,!1);for(let t=0;t<l;++t){const t=await this._createChatCompletion(e,{...s,tool_choice:a,tools:d,messages:[...this.messages]},n),o=t.choices[0]?.message;if(!o)throw new $("missing message in ChatCompletion response");if(!o.tool_calls?.length)return;for(const e of o.tool_calls){if("function"!==e.type)continue;const t=e.id,{name:n,arguments:a}=e.function,o=c[n];if(!o){const e=`Invalid tool_call: ${JSON.stringify(n)}. Available options are: ${Object.keys(c).map((e=>JSON.stringify(e))).join(", ")}. Please try again`;this._addMessage({role:r,tool_call_id:t,content:e});continue}if(i&&i!==n){const e=`Invalid tool_call: ${JSON.stringify(n)}. ${JSON.stringify(i)} requested. Please try again`;this._addMessage({role:r,tool_call_id:t,content:e});continue}let s;try{s=zt(o)?await o.parse(a):a}catch(e){const n=e instanceof Error?e.message:String(e);this._addMessage({role:r,tool_call_id:t,content:n});continue}const l=await o.function(s,this),u=yn(this,un,"m",gn).call(this,l);if(this._addMessage({role:r,tool_call_id:t,content:u}),i)return}}}}un=new WeakSet,cn=function(){return yn(this,un,"m",dn).call(this).content??null},dn=function(){let e=this.messages.length;for(;e-- >0;){const t=this.messages[e];if(Mt(t)){const{function_call:e,...n}=t,r={...n,content:t.content??null,refusal:t.refusal??null};return e&&(r.function_call=e),r}}throw new $("stream ended without producing a ChatCompletionMessage with role=assistant")},fn=function(){for(let e=this.messages.length-1;e>=0;e--){const t=this.messages[e];if(Mt(t)&&t?.function_call)return t.function_call;if(Mt(t)&&t?.tool_calls?.length)return t.tool_calls.at(-1)?.function}},pn=function(){for(let e=this.messages.length-1;e>=0;e--){const t=this.messages[e];if($t(t)&&null!=t.content)return t.content;if(Ft(t)&&null!=t.content&&"string"==typeof t.content&&this.messages.some((e=>"assistant"===e.role&&e.tool_calls?.some((e=>"function"===e.type&&e.id===t.tool_call_id)))))return t.content}},hn=function(){const e={completion_tokens:0,prompt_tokens:0,total_tokens:0};for(const{usage:t}of this._chatCompletions)t&&(e.completion_tokens+=t.completion_tokens,e.prompt_tokens+=t.prompt_tokens,e.total_tokens+=t.total_tokens);return e},mn=function(e){if(null!=e.n&&e.n>1)throw new $("ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.")},gn=function(e){return"string"==typeof e?e:void 0===e?"undefined":JSON.stringify(e)};class wn extends bn{static runFunctions(e,t,n){const r=new wn,a={...n,headers:{...n?.headers,"X-Stainless-Helper-Method":"runFunctions"}};return r._run((()=>r._runFunctions(e,t,a))),r}static runTools(e,t,n){const r=new wn,a={...n,headers:{...n?.headers,"X-Stainless-Helper-Method":"runTools"}};return r._run((()=>r._runTools(e,t,a))),r}_addMessage(e,t=!0){super._addMessage(e,t),Mt(e)&&e.content&&this._emit("content",e.content)}}class kn extends Error{}class Sn extends Error{}const _n=e=>function(e,t=511){if("string"!=typeof e)throw new TypeError("expecting str, got "+typeof e);if(!e.trim())throw new Error(`${e} is empty`);return((e,t)=>{const n=e.length;let r=0;const a=e=>{throw new kn(`${e} at position ${r}`)},o=e=>{throw new Sn(`${e} at position ${r}`)},s=()=>(d(),r>=n&&a("Unexpected end of input"),'"'===e[r]?i():"{"===e[r]?l():"["===e[r]?u():"null"===e.substring(r,r+4)||16&t&&n-r<4&&"null".startsWith(e.substring(r))?(r+=4,null):"true"===e.substring(r,r+4)||32&t&&n-r<4&&"true".startsWith(e.substring(r))?(r+=4,!0):"false"===e.substring(r,r+5)||32&t&&n-r<5&&"false".startsWith(e.substring(r))?(r+=5,!1):"Infinity"===e.substring(r,r+8)||128&t&&n-r<8&&"Infinity".startsWith(e.substring(r))?(r+=8,1/0):"-Infinity"===e.substring(r,r+9)||256&t&&1<n-r&&n-r<9&&"-Infinity".startsWith(e.substring(r))?(r+=9,-1/0):"NaN"===e.substring(r,r+3)||64&t&&n-r<3&&"NaN".startsWith(e.substring(r))?(r+=3,NaN):c()),i=()=>{const s=r;let i=!1;for(r++;r<n&&('"'!==e[r]||i&&"\\"===e[r-1]);)i="\\"===e[r]&&!i,r++;if('"'==e.charAt(r))try{return JSON.parse(e.substring(s,++r-Number(i)))}catch(e){o(String(e))}else if(1&t)try{return JSON.parse(e.substring(s,r-Number(i))+'"')}catch(t){return JSON.parse(e.substring(s,e.lastIndexOf("\\"))+'"')}a("Unterminated string literal")},l=()=>{r++,d();const o={};try{for(;"}"!==e[r];){if(d(),r>=n&&8&t)return o;const a=i();d(),r++;try{const e=s();Object.defineProperty(o,a,{value:e,writable:!0,enumerable:!0,configurable:!0})}catch(e){if(8&t)return o;throw e}d(),","===e[r]&&r++}}catch(e){if(8&t)return o;a("Expected '}' at end of object")}return r++,o},u=()=>{r++;const n=[];try{for(;"]"!==e[r];)n.push(s()),d(),","===e[r]&&r++}catch(e){if(4&t)return n;a("Expected ']' at end of array")}return r++,n},c=()=>{if(0===r){"-"===e&&2&t&&a("Not sure what '-' is");try{return JSON.parse(e)}catch(n){if(2&t)try{return"."===e[e.length-1]?JSON.parse(e.substring(0,e.lastIndexOf("."))):JSON.parse(e.substring(0,e.lastIndexOf("e")))}catch(e){}o(String(n))}}const s=r;for("-"===e[r]&&r++;e[r]&&!",]}".includes(e[r]);)r++;r!=n||2&t||a("Unterminated number literal");try{return JSON.parse(e.substring(s,r))}catch(n){"-"===e.substring(s,r)&&2&t&&a("Not sure what '-' is");try{return JSON.parse(e.substring(s,e.lastIndexOf("e")))}catch(e){o(String(e))}}},d=()=>{for(;r<n&&" \n\r\t".includes(e[r]);)r++};return s()})(e.trim(),t)}(e,509);var xn,En,Cn,Pn,An,Tn,Nn,On,Rn,In,Ln,Dn,zn=function(e,t,n,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!a:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(e,n):a?a.value=n:t.set(e,n),n},Mn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};class $n extends bn{constructor(e){super(),xn.add(this),En.set(this,void 0),Cn.set(this,void 0),Pn.set(this,void 0),zn(this,En,e,"f"),zn(this,Cn,[],"f")}get currentChatCompletionSnapshot(){return Mn(this,Pn,"f")}static fromReadableStream(e){const t=new $n(null);return t._run((()=>t._fromReadableStream(e))),t}static createChatCompletion(e,t,n){const r=new $n(t);return r._run((()=>r._runChatCompletion(e,{...t,stream:!0},{...n,headers:{...n?.headers,"X-Stainless-Helper-Method":"stream"}}))),r}async _createChatCompletion(e,t,n){super._createChatCompletion;const r=n?.signal;r&&(r.aborted&&this.controller.abort(),r.addEventListener("abort",(()=>this.controller.abort()))),Mn(this,xn,"m",An).call(this);const a=await e.chat.completions.create({...t,stream:!0},{...n,signal:this.controller.signal});this._connected();for await(const e of a)Mn(this,xn,"m",Nn).call(this,e);if(a.controller.signal?.aborted)throw new j;return this._addChatCompletion(Mn(this,xn,"m",In).call(this))}async _fromReadableStream(e,t){const n=t?.signal;n&&(n.aborted&&this.controller.abort(),n.addEventListener("abort",(()=>this.controller.abort()))),Mn(this,xn,"m",An).call(this),this._connected();const r=se.fromReadableStream(e,this.controller);let a;for await(const e of r)a&&a!==e.id&&this._addChatCompletion(Mn(this,xn,"m",In).call(this)),Mn(this,xn,"m",Nn).call(this,e),a=e.id;if(r.controller.signal?.aborted)throw new j;return this._addChatCompletion(Mn(this,xn,"m",In).call(this))}[(En=new WeakMap,Cn=new WeakMap,Pn=new WeakMap,xn=new WeakSet,An=function(){this.ended||zn(this,Pn,void 0,"f")},Tn=function(e){let t=Mn(this,Cn,"f")[e.index];return t||(t={content_done:!1,refusal_done:!1,logprobs_content_done:!1,logprobs_refusal_done:!1,done_tool_calls:new Set,current_tool_call_index:null},Mn(this,Cn,"f")[e.index]=t,t)},Nn=function(e){if(this.ended)return;const t=Mn(this,xn,"m",Dn).call(this,e);this._emit("chunk",e,t);for(const n of e.choices){const e=t.choices[n.index];null!=n.delta.content&&"assistant"===e.message?.role&&e.message?.content&&(this._emit("content",n.delta.content,e.message.content),this._emit("content.delta",{delta:n.delta.content,snapshot:e.message.content,parsed:e.message.parsed})),null!=n.delta.refusal&&"assistant"===e.message?.role&&e.message?.refusal&&this._emit("refusal.delta",{delta:n.delta.refusal,snapshot:e.message.refusal}),null!=n.logprobs?.content&&"assistant"===e.message?.role&&this._emit("logprobs.content.delta",{content:n.logprobs?.content,snapshot:e.logprobs?.content??[]}),null!=n.logprobs?.refusal&&"assistant"===e.message?.role&&this._emit("logprobs.refusal.delta",{refusal:n.logprobs?.refusal,snapshot:e.logprobs?.refusal??[]});const r=Mn(this,xn,"m",Tn).call(this,e);e.finish_reason&&(Mn(this,xn,"m",Rn).call(this,e),null!=r.current_tool_call_index&&Mn(this,xn,"m",On).call(this,e,r.current_tool_call_index));for(const t of n.delta.tool_calls??[])r.current_tool_call_index!==t.index&&(Mn(this,xn,"m",Rn).call(this,e),null!=r.current_tool_call_index&&Mn(this,xn,"m",On).call(this,e,r.current_tool_call_index)),r.current_tool_call_index=t.index;for(const t of n.delta.tool_calls??[]){const n=e.message.tool_calls?.[t.index];n?.type&&"function"===n?.type&&this._emit("tool_calls.function.arguments.delta",{name:n.function?.name,index:t.index,arguments:n.function.arguments,parsed_arguments:n.function.parsed_arguments,arguments_delta:t.function?.arguments??""})}}},On=function(e,t){if(Mn(this,xn,"m",Tn).call(this,e).done_tool_calls.has(t))return;const n=e.message.tool_calls?.[t];if(!n)throw new Error("no tool call snapshot");if(!n.type)throw new Error("tool call snapshot missing `type`");if("function"===n.type){const e=Mn(this,En,"f")?.tools?.find((e=>"function"===e.type&&e.function.name===n.function.name));this._emit("tool_calls.function.arguments.done",{name:n.function.name,index:t,arguments:n.function.arguments,parsed_arguments:rn(e)?e.$parseRaw(n.function.arguments):e?.function.strict?JSON.parse(n.function.arguments):null})}else n.type},Rn=function(e){const t=Mn(this,xn,"m",Tn).call(this,e);if(e.message.content&&!t.content_done){t.content_done=!0;const n=Mn(this,xn,"m",Ln).call(this);this._emit("content.done",{content:e.message.content,parsed:n?n.$parseRaw(e.message.content):null})}e.message.refusal&&!t.refusal_done&&(t.refusal_done=!0,this._emit("refusal.done",{refusal:e.message.refusal})),e.logprobs?.content&&!t.logprobs_content_done&&(t.logprobs_content_done=!0,this._emit("logprobs.content.done",{content:e.logprobs.content})),e.logprobs?.refusal&&!t.logprobs_refusal_done&&(t.logprobs_refusal_done=!0,this._emit("logprobs.refusal.done",{refusal:e.logprobs.refusal}))},In=function(){if(this.ended)throw new $("stream has ended, this shouldn't happen");const e=Mn(this,Pn,"f");if(!e)throw new $("request ended without sending any chunks");return zn(this,Pn,void 0,"f"),zn(this,Cn,[],"f"),function(e,t){const{id:n,choices:r,created:a,model:o,system_fingerprint:s,...i}=e,l={...i,id:n,choices:r.map((({message:t,finish_reason:n,index:r,logprobs:a,...o})=>{if(!n)throw new $(`missing finish_reason for choice ${r}`);const{content:s=null,function_call:i,tool_calls:l,...u}=t,c=t.role;if(!c)throw new $(`missing role for choice ${r}`);if(i){const{arguments:e,name:l}=i;if(null==e)throw new $(`missing function_call.arguments for choice ${r}`);if(!l)throw new $(`missing function_call.name for choice ${r}`);return{...o,message:{content:s,function_call:{arguments:e,name:l},role:c,refusal:t.refusal??null},finish_reason:n,index:r,logprobs:a}}return l?{...o,index:r,finish_reason:n,logprobs:a,message:{...u,role:c,content:s,refusal:t.refusal??null,tool_calls:l.map(((t,n)=>{const{function:a,type:o,id:s,...i}=t,{arguments:l,name:u,...c}=a||{};if(null==s)throw new $(`missing choices[${r}].tool_calls[${n}].id\n${Fn(e)}`);if(null==o)throw new $(`missing choices[${r}].tool_calls[${n}].type\n${Fn(e)}`);if(null==u)throw new $(`missing choices[${r}].tool_calls[${n}].function.name\n${Fn(e)}`);if(null==l)throw new $(`missing choices[${r}].tool_calls[${n}].function.arguments\n${Fn(e)}`);return{...i,id:s,type:o,function:{...c,name:u,arguments:l}}}))}}:{...o,message:{...u,content:s,role:c,refusal:t.refusal??null},finish_reason:n,index:r,logprobs:a}})),created:a,model:o,object:"chat.completion",...s?{system_fingerprint:s}:{}};return function(e,t){return t&&ln(t)?an(e,t):{...e,choices:e.choices.map((e=>({...e,message:{...e.message,parsed:null,...e.message.tool_calls?{tool_calls:e.message.tool_calls}:void 0}})))}}(l,t)}(e,Mn(this,En,"f"))},Ln=function(){const e=Mn(this,En,"f")?.response_format;return nn(e)?e:null},Dn=function(e){var t,n,r,a;let o=Mn(this,Pn,"f");const{choices:s,...i}=e;o?Object.assign(o,i):o=zn(this,Pn,{...i,choices:[]},"f");for(const{delta:s,finish_reason:i,index:l,logprobs:u=null,...c}of e.choices){let e=o.choices[l];if(e||(e=o.choices[l]={finish_reason:i,index:l,message:{},logprobs:u,...c}),u)if(e.logprobs){const{content:r,refusal:a,...o}=u;Object.assign(e.logprobs,o),r&&((t=e.logprobs).content??(t.content=[]),e.logprobs.content.push(...r)),a&&((n=e.logprobs).refusal??(n.refusal=[]),e.logprobs.refusal.push(...a))}else e.logprobs=Object.assign({},u);if(i&&(e.finish_reason=i,Mn(this,En,"f")&&ln(Mn(this,En,"f")))){if("length"===i)throw new J;if("content_filter"===i)throw new Y}if(Object.assign(e,c),!s)continue;const{content:d,refusal:f,function_call:p,role:h,tool_calls:m,...g}=s;if(Object.assign(e.message,g),f&&(e.message.refusal=(e.message.refusal||"")+f),h&&(e.message.role=h),p&&(e.message.function_call?(p.name&&(e.message.function_call.name=p.name),p.arguments&&((r=e.message.function_call).arguments??(r.arguments=""),e.message.function_call.arguments+=p.arguments)):e.message.function_call=p),d&&(e.message.content=(e.message.content||"")+d,!e.message.refusal&&Mn(this,xn,"m",Ln).call(this)&&(e.message.parsed=_n(e.message.content))),m){e.message.tool_calls||(e.message.tool_calls=[]);for(const{index:t,id:n,type:r,function:o,...s}of m){const i=(a=e.message.tool_calls)[t]??(a[t]={});Object.assign(i,s),n&&(i.id=n),r&&(i.type=r),o&&(i.function??(i.function={name:o.name??"",arguments:""})),o?.name&&(i.function.name=o.name),o?.arguments&&(i.function.arguments+=o.arguments,sn(Mn(this,En,"f"),i)&&(i.function.parsed_arguments=_n(i.function.arguments)))}}}return o},Symbol.asyncIterator)](){const e=[],t=[];let n=!1;return this.on("chunk",(n=>{const r=t.shift();r?r.resolve(n):e.push(n)})),this.on("end",(()=>{n=!0;for(const e of t)e.resolve(void 0);t.length=0})),this.on("abort",(e=>{n=!0;for(const n of t)n.reject(e);t.length=0})),this.on("error",(e=>{n=!0;for(const n of t)n.reject(e);t.length=0})),{next:async()=>e.length?{value:e.shift(),done:!1}:n?{value:void 0,done:!0}:new Promise(((e,n)=>t.push({resolve:e,reject:n}))).then((e=>e?{value:e,done:!1}:{value:void 0,done:!0})),return:async()=>(this.abort(),{value:void 0,done:!0})}}toReadableStream(){return new se(this[Symbol.asyncIterator].bind(this),this.controller).toReadableStream()}}function Fn(e){return JSON.stringify(e)}class jn extends $n{static fromReadableStream(e){const t=new jn(null);return t._run((()=>t._fromReadableStream(e))),t}static runFunctions(e,t,n){const r=new jn(null),a={...n,headers:{...n?.headers,"X-Stainless-Helper-Method":"runFunctions"}};return r._run((()=>r._runFunctions(e,t,a))),r}static runTools(e,t,n){const r=new jn(t),a={...n,headers:{...n?.headers,"X-Stainless-Helper-Method":"runTools"}};return r._run((()=>r._runTools(e,t,a))),r}}class Un extends Qe{parse(e,t){return function(e){for(const t of e??[]){if("function"!==t.type)throw new $(`Currently only \`function\` tool types support auto-parsing; Received \`${t.type}\``);if(!0!==t.function.strict)throw new $(`The \`${t.function.name}\` tool is not marked with \`strict: true\`. Only strict function tools can be auto-parsed`)}}(e.tools),this._client.chat.completions.create(e,{...t,headers:{...t?.headers,"X-Stainless-Helper-Method":"beta.chat.completions.parse"}})._thenUnwrap((t=>an(t,e)))}runFunctions(e,t){return e.stream?jn.runFunctions(this._client,e,t):wn.runFunctions(this._client,e,t)}runTools(e,t){return e.stream?jn.runTools(this._client,e,t):wn.runTools(this._client,e,t)}stream(e,t){return $n.createChatCompletion(this._client,e,t)}}class Bn extends Qe{constructor(){super(...arguments),this.completions=new Un(this._client)}}!function(e){e.Completions=Un}(Bn||(Bn={}));class qn extends Qe{create(e,t){return this._client.post("/realtime/sessions",{body:e,...t,headers:{"OpenAI-Beta":"assistants=v2",...t?.headers}})}}class Hn extends Qe{create(e,t){return this._client.post("/realtime/transcription_sessions",{body:e,...t,headers:{"OpenAI-Beta":"assistants=v2",...t?.headers}})}}class Wn extends Qe{constructor(){super(...arguments),this.sessions=new qn(this._client),this.transcriptionSessions=new Hn(this._client)}}Wn.Sessions=qn,Wn.TranscriptionSessions=Hn;var Vn,Qn,Kn,Xn,Gn,Jn,Yn,Zn,er,tr,nr,rr,ar,or,sr,ir,lr,ur,cr,dr,fr,pr,hr=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},mr=function(e,t,n,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!a:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(e,n):a?a.value=n:t.set(e,n),n};class gr extends tn{constructor(){super(...arguments),Vn.add(this),Qn.set(this,[]),Kn.set(this,{}),Xn.set(this,{}),Gn.set(this,void 0),Jn.set(this,void 0),Yn.set(this,void 0),Zn.set(this,void 0),er.set(this,void 0),tr.set(this,void 0),nr.set(this,void 0),rr.set(this,void 0),ar.set(this,void 0)}[(Qn=new WeakMap,Kn=new WeakMap,Xn=new WeakMap,Gn=new WeakMap,Jn=new WeakMap,Yn=new WeakMap,Zn=new WeakMap,er=new WeakMap,tr=new WeakMap,nr=new WeakMap,rr=new WeakMap,ar=new WeakMap,Vn=new WeakSet,Symbol.asyncIterator)](){const e=[],t=[];let n=!1;return this.on("event",(n=>{const r=t.shift();r?r.resolve(n):e.push(n)})),this.on("end",(()=>{n=!0;for(const e of t)e.resolve(void 0);t.length=0})),this.on("abort",(e=>{n=!0;for(const n of t)n.reject(e);t.length=0})),this.on("error",(e=>{n=!0;for(const n of t)n.reject(e);t.length=0})),{next:async()=>e.length?{value:e.shift(),done:!1}:n?{value:void 0,done:!0}:new Promise(((e,n)=>t.push({resolve:e,reject:n}))).then((e=>e?{value:e,done:!1}:{value:void 0,done:!0})),return:async()=>(this.abort(),{value:void 0,done:!0})}}static fromReadableStream(e){const t=new gr;return t._run((()=>t._fromReadableStream(e))),t}async _fromReadableStream(e,t){const n=t?.signal;n&&(n.aborted&&this.controller.abort(),n.addEventListener("abort",(()=>this.controller.abort()))),this._connected();const r=se.fromReadableStream(e,this.controller);for await(const e of r)hr(this,Vn,"m",or).call(this,e);if(r.controller.signal?.aborted)throw new j;return this._addRun(hr(this,Vn,"m",sr).call(this))}toReadableStream(){return new se(this[Symbol.asyncIterator].bind(this),this.controller).toReadableStream()}static createToolAssistantStream(e,t,n,r,a){const o=new gr;return o._run((()=>o._runToolAssistantStream(e,t,n,r,{...a,headers:{...a?.headers,"X-Stainless-Helper-Method":"stream"}}))),o}async _createToolAssistantStream(e,t,n,r,a){const o=a?.signal;o&&(o.aborted&&this.controller.abort(),o.addEventListener("abort",(()=>this.controller.abort())));const s={...r,stream:!0},i=await e.submitToolOutputs(t,n,s,{...a,signal:this.controller.signal});this._connected();for await(const e of i)hr(this,Vn,"m",or).call(this,e);if(i.controller.signal?.aborted)throw new j;return this._addRun(hr(this,Vn,"m",sr).call(this))}static createThreadAssistantStream(e,t,n){const r=new gr;return r._run((()=>r._threadAssistantStream(e,t,{...n,headers:{...n?.headers,"X-Stainless-Helper-Method":"stream"}}))),r}static createAssistantStream(e,t,n,r){const a=new gr;return a._run((()=>a._runAssistantStream(e,t,n,{...r,headers:{...r?.headers,"X-Stainless-Helper-Method":"stream"}}))),a}currentEvent(){return hr(this,nr,"f")}currentRun(){return hr(this,rr,"f")}currentMessageSnapshot(){return hr(this,Gn,"f")}currentRunStepSnapshot(){return hr(this,ar,"f")}async finalRunSteps(){return await this.done(),Object.values(hr(this,Kn,"f"))}async finalMessages(){return await this.done(),Object.values(hr(this,Xn,"f"))}async finalRun(){if(await this.done(),!hr(this,Jn,"f"))throw Error("Final run was not received.");return hr(this,Jn,"f")}async _createThreadAssistantStream(e,t,n){const r=n?.signal;r&&(r.aborted&&this.controller.abort(),r.addEventListener("abort",(()=>this.controller.abort())));const a={...t,stream:!0},o=await e.createAndRun(a,{...n,signal:this.controller.signal});this._connected();for await(const e of o)hr(this,Vn,"m",or).call(this,e);if(o.controller.signal?.aborted)throw new j;return this._addRun(hr(this,Vn,"m",sr).call(this))}async _createAssistantStream(e,t,n,r){const a=r?.signal;a&&(a.aborted&&this.controller.abort(),a.addEventListener("abort",(()=>this.controller.abort())));const o={...n,stream:!0},s=await e.create(t,o,{...r,signal:this.controller.signal});this._connected();for await(const e of s)hr(this,Vn,"m",or).call(this,e);if(s.controller.signal?.aborted)throw new j;return this._addRun(hr(this,Vn,"m",sr).call(this))}static accumulateDelta(e,t){for(const[n,r]of Object.entries(t)){if(!e.hasOwnProperty(n)){e[n]=r;continue}let t=e[n];if(null!=t)if("index"!==n&&"type"!==n){if("string"==typeof t&&"string"==typeof r)t+=r;else if("number"==typeof t&&"number"==typeof r)t+=r;else{if(!Ve(t)||!Ve(r)){if(Array.isArray(t)&&Array.isArray(r)){if(t.every((e=>"string"==typeof e||"number"==typeof e))){t.push(...r);continue}for(const e of r){if(!Ve(e))throw new Error(`Expected array delta entry to be an object but got: ${e}`);const n=e.index;if(null==n)throw console.error(e),new Error("Expected array delta entry to have an `index` property");if("number"!=typeof n)throw new Error(`Expected array delta entry \`index\` property to be a number but got ${n}`);const r=t[n];null==r?t.push(e):t[n]=this.accumulateDelta(r,e)}continue}throw Error(`Unhandled record type: ${n}, deltaValue: ${r}, accValue: ${t}`)}t=this.accumulateDelta(t,r)}e[n]=t}else e[n]=r;else e[n]=r}return e}_addRun(e){return e}async _threadAssistantStream(e,t,n){return await this._createThreadAssistantStream(t,e,n)}async _runAssistantStream(e,t,n,r){return await this._createAssistantStream(t,e,n,r)}async _runToolAssistantStream(e,t,n,r,a){return await this._createToolAssistantStream(n,e,t,r,a)}}or=function(e){if(!this.ended)switch(mr(this,nr,e,"f"),hr(this,Vn,"m",ur).call(this,e),e.event){case"thread.created":break;case"thread.run.created":case"thread.run.queued":case"thread.run.in_progress":case"thread.run.requires_action":case"thread.run.completed":case"thread.run.incomplete":case"thread.run.failed":case"thread.run.cancelling":case"thread.run.cancelled":case"thread.run.expired":hr(this,Vn,"m",pr).call(this,e);break;case"thread.run.step.created":case"thread.run.step.in_progress":case"thread.run.step.delta":case"thread.run.step.completed":case"thread.run.step.failed":case"thread.run.step.cancelled":case"thread.run.step.expired":hr(this,Vn,"m",lr).call(this,e);break;case"thread.message.created":case"thread.message.in_progress":case"thread.message.delta":case"thread.message.completed":case"thread.message.incomplete":hr(this,Vn,"m",ir).call(this,e);break;case"error":throw new Error("Encountered an error event in event processing - errors should be processed earlier")}},sr=function(){if(this.ended)throw new $("stream has ended, this shouldn't happen");if(!hr(this,Jn,"f"))throw Error("Final run has not been received");return hr(this,Jn,"f")},ir=function(e){const[t,n]=hr(this,Vn,"m",dr).call(this,e,hr(this,Gn,"f"));mr(this,Gn,t,"f"),hr(this,Xn,"f")[t.id]=t;for(const e of n){const n=t.content[e.index];"text"==n?.type&&this._emit("textCreated",n.text)}switch(e.event){case"thread.message.created":this._emit("messageCreated",e.data);break;case"thread.message.in_progress":break;case"thread.message.delta":if(this._emit("messageDelta",e.data.delta,t),e.data.delta.content)for(const n of e.data.delta.content){if("text"==n.type&&n.text){let e=n.text,r=t.content[n.index];if(!r||"text"!=r.type)throw Error("The snapshot associated with this text delta is not text or missing");this._emit("textDelta",e,r.text)}if(n.index!=hr(this,Yn,"f")){if(hr(this,Zn,"f"))switch(hr(this,Zn,"f").type){case"text":this._emit("textDone",hr(this,Zn,"f").text,hr(this,Gn,"f"));break;case"image_file":this._emit("imageFileDone",hr(this,Zn,"f").image_file,hr(this,Gn,"f"))}mr(this,Yn,n.index,"f")}mr(this,Zn,t.content[n.index],"f")}break;case"thread.message.completed":case"thread.message.incomplete":if(void 0!==hr(this,Yn,"f")){const t=e.data.content[hr(this,Yn,"f")];if(t)switch(t.type){case"image_file":this._emit("imageFileDone",t.image_file,hr(this,Gn,"f"));break;case"text":this._emit("textDone",t.text,hr(this,Gn,"f"))}}hr(this,Gn,"f")&&this._emit("messageDone",e.data),mr(this,Gn,void 0,"f")}},lr=function(e){const t=hr(this,Vn,"m",cr).call(this,e);switch(mr(this,ar,t,"f"),e.event){case"thread.run.step.created":this._emit("runStepCreated",e.data);break;case"thread.run.step.delta":const n=e.data.delta;if(n.step_details&&"tool_calls"==n.step_details.type&&n.step_details.tool_calls&&"tool_calls"==t.step_details.type)for(const e of n.step_details.tool_calls)e.index==hr(this,er,"f")?this._emit("toolCallDelta",e,t.step_details.tool_calls[e.index]):(hr(this,tr,"f")&&this._emit("toolCallDone",hr(this,tr,"f")),mr(this,er,e.index,"f"),mr(this,tr,t.step_details.tool_calls[e.index],"f"),hr(this,tr,"f")&&this._emit("toolCallCreated",hr(this,tr,"f")));this._emit("runStepDelta",e.data.delta,t);break;case"thread.run.step.completed":case"thread.run.step.failed":case"thread.run.step.cancelled":case"thread.run.step.expired":mr(this,ar,void 0,"f"),"tool_calls"==e.data.step_details.type&&hr(this,tr,"f")&&(this._emit("toolCallDone",hr(this,tr,"f")),mr(this,tr,void 0,"f")),this._emit("runStepDone",e.data,t)}},ur=function(e){hr(this,Qn,"f").push(e),this._emit("event",e)},cr=function(e){switch(e.event){case"thread.run.step.created":return hr(this,Kn,"f")[e.data.id]=e.data,e.data;case"thread.run.step.delta":let t=hr(this,Kn,"f")[e.data.id];if(!t)throw Error("Received a RunStepDelta before creation of a snapshot");let n=e.data;if(n.delta){const r=gr.accumulateDelta(t,n.delta);hr(this,Kn,"f")[e.data.id]=r}return hr(this,Kn,"f")[e.data.id];case"thread.run.step.completed":case"thread.run.step.failed":case"thread.run.step.cancelled":case"thread.run.step.expired":case"thread.run.step.in_progress":hr(this,Kn,"f")[e.data.id]=e.data}if(hr(this,Kn,"f")[e.data.id])return hr(this,Kn,"f")[e.data.id];throw new Error("No snapshot available")},dr=function(e,t){let n=[];switch(e.event){case"thread.message.created":return[e.data,n];case"thread.message.delta":if(!t)throw Error("Received a delta with no existing snapshot (there should be one from message creation)");let r=e.data;if(r.delta.content)for(const e of r.delta.content)if(e.index in t.content){let n=t.content[e.index];t.content[e.index]=hr(this,Vn,"m",fr).call(this,e,n)}else t.content[e.index]=e,n.push(e);return[t,n];case"thread.message.in_progress":case"thread.message.completed":case"thread.message.incomplete":if(t)return[t,n];throw Error("Received thread message event with no existing snapshot")}throw Error("Tried to accumulate a non-message event")},fr=function(e,t){return gr.accumulateDelta(t,e)},pr=function(e){switch(mr(this,rr,e.data,"f"),e.event){case"thread.run.created":case"thread.run.queued":case"thread.run.in_progress":case"thread.run.cancelling":break;case"thread.run.requires_action":case"thread.run.cancelled":case"thread.run.failed":case"thread.run.completed":case"thread.run.expired":mr(this,Jn,e.data,"f"),hr(this,tr,"f")&&(this._emit("toolCallDone",hr(this,tr,"f")),mr(this,tr,void 0,"f"))}};class yr extends Qe{create(e,t,n){return this._client.post(`/threads/${e}/messages`,{body:t,...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}retrieve(e,t,n){return this._client.get(`/threads/${e}/messages/${t}`,{...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}update(e,t,n,r){return this._client.post(`/threads/${e}/messages/${t}`,{body:n,...r,headers:{"OpenAI-Beta":"assistants=v2",...r?.headers}})}list(e,t={},n){return Pe(t)?this.list(e,{},t):this._client.getAPIList(`/threads/${e}/messages`,vr,{query:t,...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}del(e,t,n){return this._client.delete(`/threads/${e}/messages/${t}`,{...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}}class vr extends Je{}yr.MessagesPage=vr;class br extends Qe{retrieve(e,t,n,r={},a){return Pe(r)?this.retrieve(e,t,n,{},r):this._client.get(`/threads/${e}/runs/${t}/steps/${n}`,{query:r,...a,headers:{"OpenAI-Beta":"assistants=v2",...a?.headers}})}list(e,t,n={},r){return Pe(n)?this.list(e,t,{},n):this._client.getAPIList(`/threads/${e}/runs/${t}/steps`,wr,{query:n,...r,headers:{"OpenAI-Beta":"assistants=v2",...r?.headers}})}}class wr extends Je{}br.RunStepsPage=wr;class kr extends Qe{constructor(){super(...arguments),this.steps=new br(this._client)}create(e,t,n){const{include:r,...a}=t;return this._client.post(`/threads/${e}/runs`,{query:{include:r},body:a,...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers},stream:t.stream??!1})}retrieve(e,t,n){return this._client.get(`/threads/${e}/runs/${t}`,{...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}update(e,t,n,r){return this._client.post(`/threads/${e}/runs/${t}`,{body:n,...r,headers:{"OpenAI-Beta":"assistants=v2",...r?.headers}})}list(e,t={},n){return Pe(t)?this.list(e,{},t):this._client.getAPIList(`/threads/${e}/runs`,Sr,{query:t,...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}cancel(e,t,n){return this._client.post(`/threads/${e}/runs/${t}/cancel`,{...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}async createAndPoll(e,t,n){const r=await this.create(e,t,n);return await this.poll(e,r.id,n)}createAndStream(e,t,n){return gr.createAssistantStream(e,this._client.beta.threads.runs,t,n)}async poll(e,t,n){const r={...n?.headers,"X-Stainless-Poll-Helper":"true"};for(n?.pollIntervalMs&&(r["X-Stainless-Custom-Poll-Interval"]=n.pollIntervalMs.toString());;){const{data:a,response:o}=await this.retrieve(e,t,{...n,headers:{...n?.headers,...r}}).withResponse();switch(a.status){case"queued":case"in_progress":case"cancelling":let e=5e3;if(n?.pollIntervalMs)e=n.pollIntervalMs;else{const t=o.headers.get("openai-poll-after-ms");if(t){const n=parseInt(t);isNaN(n)||(e=n)}}await De(e);break;case"requires_action":case"incomplete":case"cancelled":case"completed":case"failed":case"expired":return a}}}stream(e,t,n){return gr.createAssistantStream(e,this._client.beta.threads.runs,t,n)}submitToolOutputs(e,t,n,r){return this._client.post(`/threads/${e}/runs/${t}/submit_tool_outputs`,{body:n,...r,headers:{"OpenAI-Beta":"assistants=v2",...r?.headers},stream:n.stream??!1})}async submitToolOutputsAndPoll(e,t,n,r){const a=await this.submitToolOutputs(e,t,n,r);return await this.poll(e,a.id,r)}submitToolOutputsStream(e,t,n,r){return gr.createToolAssistantStream(e,t,this._client.beta.threads.runs,n,r)}}class Sr extends Je{}kr.RunsPage=Sr,kr.Steps=br,kr.RunStepsPage=wr;class _r extends Qe{constructor(){super(...arguments),this.runs=new kr(this._client),this.messages=new yr(this._client)}create(e={},t){return Pe(e)?this.create({},e):this._client.post("/threads",{body:e,...t,headers:{"OpenAI-Beta":"assistants=v2",...t?.headers}})}retrieve(e,t){return this._client.get(`/threads/${e}`,{...t,headers:{"OpenAI-Beta":"assistants=v2",...t?.headers}})}update(e,t,n){return this._client.post(`/threads/${e}`,{body:t,...n,headers:{"OpenAI-Beta":"assistants=v2",...n?.headers}})}del(e,t){return this._client.delete(`/threads/${e}`,{...t,headers:{"OpenAI-Beta":"assistants=v2",...t?.headers}})}createAndRun(e,t){return this._client.post("/threads/runs",{body:e,...t,headers:{"OpenAI-Beta":"assistants=v2",...t?.headers},stream:e.stream??!1})}async createAndRunPoll(e,t){const n=await this.createAndRun(e,t);return await this.runs.poll(n.thread_id,n.id,t)}createAndRunStream(e,t){return gr.createThreadAssistantStream(e,this._client.beta.threads,t)}}_r.Runs=kr,_r.RunsPage=Sr,_r.Messages=yr,_r.MessagesPage=vr;class xr extends Qe{constructor(){super(...arguments),this.realtime=new Wn(this._client),this.chat=new Bn(this._client),this.assistants=new Lt(this._client),this.threads=new _r(this._client)}}xr.Realtime=Wn,xr.Assistants=Lt,xr.AssistantsPage=Dt,xr.Threads=_r;class Er extends Qe{create(e,t){return this._client.post("/batches",{body:e,...t})}retrieve(e,t){return this._client.get(`/batches/${e}`,t)}list(e={},t){return Pe(e)?this.list({},e):this._client.getAPIList("/batches",Cr,{query:e,...t})}cancel(e,t){return this._client.post(`/batches/${e}/cancel`,t)}}class Cr extends Je{}Er.BatchesPage=Cr;class Pr extends Qe{create(e,t,n){return this._client.post(`/uploads/${e}/parts`,me({body:t,...n}))}}class Ar extends Qe{constructor(){super(...arguments),this.parts=new Pr(this._client)}create(e,t){return this._client.post("/uploads",{body:e,...t})}cancel(e,t){return this._client.post(`/uploads/${e}/cancel`,t)}complete(e,t,n){return this._client.post(`/uploads/${e}/complete`,{body:t,...n})}}function Tr(e,t){const n=e.output.map((e=>{if("function_call"===e.type)return{...e,parsed_arguments:Or(t,e)};if("message"===e.type){const n=e.content.map((e=>"output_text"===e.type?{...e,parsed:Nr(t,e.text)}:e));return{...e,content:n}}return e})),r=Object.assign({},e,{output:n});return Object.getOwnPropertyDescriptor(e,"output_text")||Rr(r),Object.defineProperty(r,"output_parsed",{enumerable:!0,get(){for(const e of r.output)if("message"===e.type)for(const t of e.content)if("output_text"===t.type&&null!==t.parsed)return t.parsed;return null}}),r}function Nr(e,t){if("json_schema"!==e.text?.format?.type)return null;if("$parseRaw"in e.text?.format){const n=e.text?.format;return n.$parseRaw(t)}return JSON.parse(t)}function Or(e,t){const n=(r=e.tools??[],a=t.name,r.find((e=>"function"===e.type&&e.name===a)));var r,a,o;return{...t,...t,parsed_arguments:(o=n,"auto-parseable-tool"===o?.$brand?n.$parseRaw(t.arguments):n?.strict?JSON.parse(t.arguments):null)}}function Rr(e){const t=[];for(const n of e.output)if("message"===n.type)for(const e of n.content)"output_text"===e.type&&t.push(e.text);e.output_text=t.join("")}Ar.Parts=Pr;class Ir extends Qe{list(e,t={},n){return Pe(t)?this.list(e,{},t):this._client.getAPIList(`/responses/${e}/input_items`,Qr,{query:t,...n})}}var Lr,Dr,zr,Mr,$r,Fr,jr,Ur,Br,qr=function(e,t,n,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!a:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(e,n):a?a.value=n:t.set(e,n),n},Hr=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};class Wr extends tn{constructor(e){super(),Lr.add(this),Dr.set(this,void 0),zr.set(this,void 0),Mr.set(this,void 0),qr(this,Dr,e,"f")}static createResponse(e,t,n){const r=new Wr(t);return r._run((()=>r._createResponse(e,t,{...n,headers:{...n?.headers,"X-Stainless-Helper-Method":"stream"}}))),r}async _createResponse(e,t,n){const r=n?.signal;r&&(r.aborted&&this.controller.abort(),r.addEventListener("abort",(()=>this.controller.abort()))),Hr(this,Lr,"m",$r).call(this);const a=await e.responses.create({...t,stream:!0},{...n,signal:this.controller.signal});this._connected();for await(const e of a)Hr(this,Lr,"m",Fr).call(this,e);if(a.controller.signal?.aborted)throw new j;return Hr(this,Lr,"m",jr).call(this)}[(Dr=new WeakMap,zr=new WeakMap,Mr=new WeakMap,Lr=new WeakSet,$r=function(){this.ended||qr(this,zr,void 0,"f")},Fr=function(e){if(this.ended)return;const t=Hr(this,Lr,"m",Ur).call(this,e);switch(this._emit("event",e),e.type){case"response.output_text.delta":{const n=t.output[e.output_index];if(!n)throw new $(`missing output at index ${e.output_index}`);if("message"===n.type){const t=n.content[e.content_index];if(!t)throw new $(`missing content at index ${e.content_index}`);if("output_text"!==t.type)throw new $(`expected content to be 'output_text', got ${t.type}`);this._emit("response.output_text.delta",{...e,snapshot:t.text})}break}case"response.function_call_arguments.delta":{const n=t.output[e.output_index];if(!n)throw new $(`missing output at index ${e.output_index}`);"function_call"===n.type&&this._emit("response.function_call_arguments.delta",{...e,snapshot:n.arguments});break}default:this._emit(e.type,e)}},jr=function(){if(this.ended)throw new $("stream has ended, this shouldn't happen");const e=Hr(this,zr,"f");if(!e)throw new $("request ended without sending any events");qr(this,zr,void 0,"f");const t=function(e,t){return function(e,t){return t&&function(e){return!!nn(e.text?.format)}(t)?Tr(e,t):{...e,output_parsed:null,output:e.output.map((e=>"function_call"===e.type?{...e,parsed_arguments:null}:"message"===e.type?{...e,content:e.content.map((e=>({...e,parsed:null})))}:e))}}(e,t)}(e,Hr(this,Dr,"f"));return qr(this,Mr,t,"f"),t},Ur=function(e){let t=Hr(this,zr,"f");if(!t){if("response.created"!==e.type)throw new $(`When snapshot hasn't been set yet, expected 'response.created' event, got ${e.type}`);return t=qr(this,zr,e.response,"f"),t}switch(e.type){case"response.output_item.added":t.output.push(e.item);break;case"response.content_part.added":{const n=t.output[e.output_index];if(!n)throw new $(`missing output at index ${e.output_index}`);"message"===n.type&&n.content.push(e.part);break}case"response.output_text.delta":{const n=t.output[e.output_index];if(!n)throw new $(`missing output at index ${e.output_index}`);if("message"===n.type){const t=n.content[e.content_index];if(!t)throw new $(`missing content at index ${e.content_index}`);if("output_text"!==t.type)throw new $(`expected content to be 'output_text', got ${t.type}`);t.text+=e.delta}break}case"response.function_call_arguments.delta":{const n=t.output[e.output_index];if(!n)throw new $(`missing output at index ${e.output_index}`);"function_call"===n.type&&(n.arguments+=e.delta);break}case"response.completed":qr(this,zr,e.response,"f")}return t},Symbol.asyncIterator)](){const e=[],t=[];let n=!1;return this.on("event",(n=>{const r=t.shift();r?r.resolve(n):e.push(n)})),this.on("end",(()=>{n=!0;for(const e of t)e.resolve(void 0);t.length=0})),this.on("abort",(e=>{n=!0;for(const n of t)n.reject(e);t.length=0})),this.on("error",(e=>{n=!0;for(const n of t)n.reject(e);t.length=0})),{next:async()=>e.length?{value:e.shift(),done:!1}:n?{value:void 0,done:!0}:new Promise(((e,n)=>t.push({resolve:e,reject:n}))).then((e=>e?{value:e,done:!1}:{value:void 0,done:!0})),return:async()=>(this.abort(),{value:void 0,done:!0})}}async finalResponse(){await this.done();const e=Hr(this,Mr,"f");if(!e)throw new $("stream ended without producing a ChatCompletion");return e}}class Vr extends Qe{constructor(){super(...arguments),this.inputItems=new Ir(this._client)}create(e,t){return this._client.post("/responses",{body:e,...t,stream:e.stream??!1})._thenUnwrap((e=>("object"in e&&"response"===e.object&&Rr(e),e)))}retrieve(e,t={},n){return Pe(t)?this.retrieve(e,{},t):this._client.get(`/responses/${e}`,{query:t,...n})}del(e,t){return this._client.delete(`/responses/${e}`,{...t,headers:{Accept:"*/*",...t?.headers}})}parse(e,t){return this._client.responses.create(e,t)._thenUnwrap((t=>Tr(t,e)))}stream(e,t){return Wr.createResponse(this._client,e,t)}}class Qr extends Je{}Vr.InputItems=Ir;class Kr extends Qe{retrieve(e,t,n,r){return this._client.get(`/evals/${e}/runs/${t}/output_items/${n}`,r)}list(e,t,n={},r){return Pe(n)?this.list(e,t,{},n):this._client.getAPIList(`/evals/${e}/runs/${t}/output_items`,Xr,{query:n,...r})}}class Xr extends Je{}Kr.OutputItemListResponsesPage=Xr;class Gr extends Qe{constructor(){super(...arguments),this.outputItems=new Kr(this._client)}create(e,t,n){return this._client.post(`/evals/${e}/runs`,{body:t,...n})}retrieve(e,t,n){return this._client.get(`/evals/${e}/runs/${t}`,n)}list(e,t={},n){return Pe(t)?this.list(e,{},t):this._client.getAPIList(`/evals/${e}/runs`,Jr,{query:t,...n})}del(e,t,n){return this._client.delete(`/evals/${e}/runs/${t}`,n)}cancel(e,t,n){return this._client.post(`/evals/${e}/runs/${t}`,n)}}class Jr extends Je{}Gr.RunListResponsesPage=Jr,Gr.OutputItems=Kr,Gr.OutputItemListResponsesPage=Xr;class Yr extends Qe{constructor(){super(...arguments),this.runs=new Gr(this._client)}create(e,t){return this._client.post("/evals",{body:e,...t})}retrieve(e,t){return this._client.get(`/evals/${e}`,t)}update(e,t,n){return this._client.post(`/evals/${e}`,{body:t,...n})}list(e={},t){return Pe(e)?this.list({},e):this._client.getAPIList("/evals",Zr,{query:e,...t})}del(e,t){return this._client.delete(`/evals/${e}`,t)}}class Zr extends Je{}Yr.EvalListResponsesPage=Zr,Yr.Runs=Gr,Yr.RunListResponsesPage=Jr;class ea extends Se{constructor({baseURL:e=$e("OPENAI_BASE_URL"),apiKey:t=$e("OPENAI_API_KEY"),organization:n=$e("OPENAI_ORG_ID")??null,project:r=$e("OPENAI_PROJECT_ID")??null,...a}={}){if(void 0===t)throw new $("The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).");const o={apiKey:t,organization:n,project:r,...a,baseURL:e||"https://api.openai.com/v1"};if(!o.dangerouslyAllowBrowser&&"undefined"!=typeof window&&void 0!==window.document&&"undefined"!=typeof navigator)throw new $("It looks like you're running in a browser-like environment.\n\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\n\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\n\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\n");super({baseURL:o.baseURL,timeout:o.timeout??6e5,httpAgent:o.httpAgent,maxRetries:o.maxRetries,fetch:o.fetch}),this.completions=new Ke(this),this.chat=new tt(this),this.embeddings=new nt(this),this.files=new rt(this),this.images=new ot(this),this.audio=new ut(this),this.moderations=new ct(this),this.models=new dt(this),this.fineTuning=new xt(this),this.graders=new Ct(this),this.vectorStores=new Ot(this),this.beta=new xr(this),this.batches=new Er(this),this.uploads=new Ar(this),this.responses=new Vr(this),this.evals=new Yr(this),this._options=o,this.apiKey=t,this.organization=n,this.project=r}defaultQuery(){return this._options.defaultQuery}defaultHeaders(e){return{...super.defaultHeaders(e),"OpenAI-Organization":this.organization,"OpenAI-Project":this.project,...this._options.defaultHeaders}}authHeaders(e){return{Authorization:`Bearer ${this.apiKey}`}}stringifyQuery(e){return function(e,t={}){let n=e;const r=function(e=v){if(void 0!==e.allowEmptyArrays&&"boolean"!=typeof e.allowEmptyArrays)throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");if(void 0!==e.encodeDotInKeys&&"boolean"!=typeof e.encodeDotInKeys)throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");const t=e.charset||v.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");let n=s;if(void 0!==e.format){if(!f.call(i,e.format))throw new TypeError("Unknown format option provided.");n=e.format}const r=i[n];let a,o=v.filter;if(("function"==typeof e.filter||h(e.filter))&&(o=e.filter),a=e.arrayFormat&&e.arrayFormat in p?e.arrayFormat:"indices"in e?e.indices?"indices":"repeat":v.arrayFormat,"commaRoundTrip"in e&&"boolean"!=typeof e.commaRoundTrip)throw new TypeError("`commaRoundTrip` must be a boolean, or absent");const l=void 0===e.allowDots?1==!!e.encodeDotInKeys||v.allowDots:!!e.allowDots;return{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:v.addQueryPrefix,allowDots:l,allowEmptyArrays:"boolean"==typeof e.allowEmptyArrays?!!e.allowEmptyArrays:v.allowEmptyArrays,arrayFormat:a,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:v.charsetSentinel,commaRoundTrip:!!e.commaRoundTrip,delimiter:void 0===e.delimiter?v.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:v.encode,encodeDotInKeys:"boolean"==typeof e.encodeDotInKeys?e.encodeDotInKeys:v.encodeDotInKeys,encoder:"function"==typeof e.encoder?e.encoder:v.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:v.encodeValuesOnly,filter:o,format:n,formatter:r,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:v.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:v.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:v.strictNullHandling}}(t);let a,o;"function"==typeof r.filter?(o=r.filter,n=o("",n)):h(r.filter)&&(o=r.filter,a=o);const l=[];if("object"!=typeof n||null===n)return"";const u=p[r.arrayFormat],c="comma"===u&&r.commaRoundTrip;a||(a=Object.keys(n)),r.sort&&a.sort(r.sort);const d=new WeakMap;for(let e=0;e<a.length;++e){const t=a[e];r.skipNulls&&null===n[t]||g(l,w(n[t],t,u,c,r.allowEmptyArrays,r.strictNullHandling,r.skipNulls,r.encodeDotInKeys,r.encode?r.encoder:null,r.filter,r.sort,r.allowDots,r.serializeDate,r.format,r.formatter,r.encodeValuesOnly,r.charset,d))}const m=l.join(r.delimiter);let y=!0===r.addQueryPrefix?"?":"";return r.charsetSentinel&&("iso-8859-1"===r.charset?y+="utf8=%26%2310003%3B&":y+="utf8=%E2%9C%93&"),m.length>0?y+m:""}(e,{arrayFormat:"brackets"})}}Br=ea,ea.OpenAI=Br,ea.DEFAULT_TIMEOUT=6e5,ea.OpenAIError=$,ea.APIError=F,ea.APIConnectionError=U,ea.APIConnectionTimeoutError=B,ea.APIUserAbortError=j,ea.NotFoundError=V,ea.ConflictError=Q,ea.RateLimitError=X,ea.BadRequestError=q,ea.AuthenticationError=H,ea.InternalServerError=G,ea.PermissionDeniedError=W,ea.UnprocessableEntityError=K,ea.toFile=de,ea.fileFromPath=T,ea.Completions=Ke,ea.Chat=tt,ea.ChatCompletionsPage=Ze,ea.Embeddings=nt,ea.Files=rt,ea.FileObjectsPage=at,ea.Images=ot,ea.Audio=ut,ea.Moderations=ct,ea.Models=dt,ea.ModelsPage=ft,ea.FineTuning=xt,ea.Graders=Ct,ea.VectorStores=Ot,ea.VectorStoresPage=Rt,ea.VectorStoreSearchResponsesPage=It,ea.Beta=xr,ea.Batches=Er,ea.BatchesPage=Cr,ea.Uploads=Ar,ea.Responses=Vr,ea.Evals=Yr,ea.EvalListResponsesPage=Zr,new Set(["/completions","/chat/completions","/embeddings","/audio/transcriptions","/audio/translations","/audio/speech","/images/generations"]);var ta=function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function s(e){try{l(r.next(e))}catch(e){o(e)}}function i(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,i)}l((r=r.apply(e,t||[])).next())}))};class na{constructor(e){this.openAIClient=null,this.provider="openai",this.modelName="gpt-4",this.ollamaBaseUrl="http://localhost:11434",e&&this.initClient(e)}initClient(e){if(this.provider=e.provider,this.modelName=e.model,"openai"===this.provider&&e.apiKey)try{return this.openAIClient=new ea({apiKey:e.apiKey,dangerouslyAllowBrowser:!0}),!0}catch(e){return console.error("Failed to initialize OpenAI client:",e),!1}else if("ollama"===this.provider)return e.baseUrl&&(this.ollamaBaseUrl=e.baseUrl),!0;return!1}generateCompletion(e){return ta(this,void 0,void 0,(function*(){return"openai"===this.provider?this.generateOpenAICompletion(e):"ollama"===this.provider?this.generateOllamaCompletion(e):{text:"",error:"Unknown AI provider. Please configure a valid provider."}}))}generateOpenAICompletion(e){return ta(this,void 0,void 0,(function*(){if(!this.openAIClient)return{text:"",error:"OpenAI client not initialized. Please set your API key."};try{return{text:(yield this.openAIClient.chat.completions.create({model:this.modelName,messages:[{role:"system",content:"You are a helpful writing assistant. Provide concise, useful feedback on text."},{role:"user",content:e}],temperature:.7,max_tokens:500})).choices[0].message.content||""}}catch(e){return console.error("OpenAI API error:",e),{text:"",error:"Failed to generate completion. Please try again."}}}))}generateOllamaCompletion(e){return ta(this,void 0,void 0,(function*(){try{return console.log(`Requesting Ollama completion via background script, base URL: ${this.ollamaBaseUrl}`),new Promise((t=>{chrome.runtime.sendMessage({type:"OLLAMA_API_REQUEST",data:{baseUrl:this.ollamaBaseUrl,model:this.modelName,prompt:e}},(e=>{e&&e.success?(console.log("Ollama response received successfully via background"),e.data&&e.data.response?t({text:e.data.response}):(console.error("Ollama background response missing expected data:",e),t({text:"",error:"Invalid response format from Ollama API"}))):(console.error("Error from background script Ollama request:",null==e?void 0:e.error),t({text:"",error:(null==e?void 0:e.error)||"Failed to get response from Ollama"}))}))}))}catch(e){return console.error("Ollama request setup error:",e),{text:"",error:"Failed to set up Ollama request. Please check that the extension is working properly."}}}))}}class ra{static checkConnection(){return ta(this,arguments,void 0,(function*(e="http://localhost:11434"){try{return new Promise((t=>{chrome.runtime.sendMessage({type:"CHECK_OLLAMA_CONNECTION",data:{baseUrl:e}},(e=>{(null==e?void 0:e.success)&&(null==e?void 0:e.isConnected)?t(!0):t(!1)}))}))}catch(e){return console.error("Error checking Ollama connection:",e),!1}}))}static getAvailableModels(){return ta(this,arguments,void 0,(function*(e="http://localhost:11434"){try{return new Promise((t=>{chrome.runtime.sendMessage({type:"GET_OLLAMA_MODELS",data:{baseUrl:e}},(e=>{if((null==e?void 0:e.success)&&(null==e?void 0:e.models)){const n=e.models.map((e=>e.name));t(n)}else t([])}))}))}catch(e){return console.error("Error getting Ollama models:",e),[]}}))}}class aa{getApiKey(){return ta(this,void 0,void 0,(function*(){try{return(yield chrome.storage.sync.get("openaiApiKey")).openaiApiKey||""}catch(e){return console.error("Failed to get API key from storage:",e),""}}))}saveApiKey(e){return ta(this,void 0,void 0,(function*(){try{return yield chrome.storage.sync.set({openaiApiKey:e}),!0}catch(e){return console.error("Failed to save API key to storage:",e),!1}}))}getAISettings(){return ta(this,void 0,void 0,(function*(){try{const e=yield chrome.storage.sync.get(["aiProvider","aiModel","openaiApiKey","ollamaBaseUrl"]);console.log("Retrieved AI settings:",e);const t={provider:e.aiProvider||"openai",model:e.aiModel||("ollama"===e.aiProvider?"llama2":"gpt-4"),apiKey:e.openaiApiKey||"",baseUrl:e.ollamaBaseUrl||"http://localhost:11434"};return console.log("Parsed AI config:",t),t}catch(e){return console.error("Failed to get AI settings from storage:",e),{provider:"openai",model:"gpt-4"}}}))}saveAISettings(e){return ta(this,void 0,void 0,(function*(){try{return console.log("Saving AI settings:",e),yield chrome.storage.sync.set({aiProvider:e.provider,aiModel:e.model,ollamaBaseUrl:e.baseUrl||"http://localhost:11434"}),e.apiKey&&"openai"===e.provider&&(yield this.saveApiKey(e.apiKey)),!0}catch(e){return console.error("Failed to save AI settings to storage:",e),!1}}))}}class oa{static startDebugLogging(){null===this.debugInterval&&(console.log("Starting GoogleDocsAPI debug logging"),this.debugInterval=window.setInterval((()=>{var e;const t=Date.now();if(t-this.lastDebugTime>5e3){this.lastDebugTime=t;const n=this.isInGoogleDocs(),r=document.querySelectorAll(".kix-paragraphrenderer");if(console.log(`[GoogleDocsAPI Debug] isInGoogleDocs: ${n}`),console.log(`[GoogleDocsAPI Debug] paragraphs found: ${(null==r?void 0:r.length)||0}`),r&&r.length>0){const t=null===(e=r[0].textContent)||void 0===e?void 0:e.substring(0,50);console.log(`[GoogleDocsAPI Debug] First paragraph starts with: ${t}...`)}}}),1e3))}static stopDebugLogging(){null!==this.debugInterval&&(window.clearInterval(this.debugInterval),this.debugInterval=null,console.log("Stopped GoogleDocsAPI debug logging"))}static isInGoogleDocs(){try{return"docs.google.com"===window.location.hostname&&(null!==document.querySelector(".kix-paragraphrenderer")||null!==document.querySelector(".docs-editor"))}catch(e){return console.error("Error checking if in Google Docs:",e),!1}}static getDocumentContent(e=3){try{if(console.log("Attempting to retrieve document content..."),!this.isInGoogleDocs())return console.error("Not in a Google Docs document"),"";const t=document.querySelectorAll(".kix-paragraphrenderer");if(!t||0===t.length){if(console.error("Could not find paragraph elements in document, DOM might not be ready"),this.startDebugLogging(),e>0){console.log(`Trying alternative selectors (${e} retries left)`);const t=[".kix-page-content-wrapper",".docs-texteventtarget-iframe",".docs-editor-container"];for(const e of t){const t=document.querySelectorAll(e);if(t&&t.length>0){console.log(`Found ${t.length} elements with selector ${e}`);const n=Array.from(t).map((e=>e.textContent)).filter(Boolean).join("\n");if(n)return console.log(`Retrieved ${n.length} characters using alternative selector`),n}}return new Promise((t=>{setTimeout((()=>{t(this.getDocumentContent(e-1))}),500)}))}return""}const n=Array.from(t).map((e=>e.textContent)).join("\n");return n?this.stopDebugLogging():(console.warn("Document content appears to be empty"),this.startDebugLogging()),console.log(`Retrieved ${n.length} characters from document`),n}catch(e){return console.error("Error getting document content:",e),this.startDebugLogging(),""}}static forceGetDocumentContent(){try{console.log("Attempting forced document content retrieval...");try{const e=document.createElement("script");e.textContent='\n                    try {\n                        // Try to access Google Docs internal data\n                        if (window.IS_INTEGRATION_ADAPTER_RUNNING__) {\n                            // Store document text in a global variable\n                            window.vibeWriteExtractedContent = document.body.innerText || document.documentElement.innerText;\n                            console.log("Document content extracted by injected script");\n                        }\n                    } catch(e) {\n                        console.error("Injected script error:", e);\n                    }\n                ',document.head.appendChild(e),setTimeout((()=>{document.head.removeChild(e)}),500);const t=window.vibeWriteExtractedContent;if(t&&t.length>100)return console.log(`Retrieved ${t.length} characters via injected script`),t}catch(e){console.error("Script injection approach failed:",e)}const e=[".kix-paragraphrenderer",".kix-page-content-wrapper",".docs-editor-container",".kix-appview-editor",".docs-texteventtarget-iframe",".kix-canvas-tile-content",".goog-inline-block.kix-lineview-text-block","[contenteditable='true']",".docs-text-ui-cursor-blink",".kix-canvas-tile-content",".goog-inline-block"];for(const t of e){const e=document.querySelectorAll(t);if(e&&e.length>0){console.log(`Found ${e.length} elements with selector ${t}`);const n=Array.from(e).map((e=>e.textContent)).filter(Boolean).join("\n");if(n)return console.log(`Retrieved ${n.length} characters using selector ${t}`),n}}const t=document.body.textContent;return t&&t.length>100?(console.log(`Retrieved ${t.length} characters from document.body.textContent`),t):(console.error("Forced document content retrieval failed - no content found"),"")}catch(e){return console.error("Error in forced document content retrieval:",e),""}}static getSelectedText(){try{if(window.getSelection){const e=window.getSelection();if(e)return e.toString()}return""}catch(e){return console.error("Error getting selected text:",e),""}}static addComment(e){try{if(!this.getSelectedText())return console.warn("No text selected to add a comment to"),!1;const t=document.querySelector('[aria-label="Add comment"]');return t&&(t.click(),setTimeout((()=>{var t,n;const r=document.querySelector(".docos-input-textarea");r&&(null===(n=null===(t=Object.getOwnPropertyDescriptor(HTMLTextAreaElement.prototype,"value"))||void 0===t?void 0:t.set)||void 0===n||n.call(r,e),r.dispatchEvent(new Event("input",{bubbles:!0})),setTimeout((()=>{const e=Array.from(document.querySelectorAll("button")).find((e=>"Comment"===e.textContent));if(e)return e.click(),!0}),300))}),500)),!1}catch(e){return console.error("Error adding comment:",e),!1}}static isGoogleDocsUrl(e){return e.startsWith("https://docs.google.com/document/")}static getDocumentTitle(){try{const e=document.querySelector(".docs-title-input");return e&&e.textContent||"Untitled Document"}catch(e){return console.error("Error getting document title:",e),"Untitled Document"}}}oa.debugInterval=null,oa.lastDebugTime=0;var sa=function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function s(e){try{l(r.next(e))}catch(e){o(e)}}function i(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,i)}l((r=r.apply(e,t||[])).next())}))};const ia=({message:e})=>(0,r.jsxs)("div",{className:"message "+("user"===e.role?"user":"assistant"),children:[(0,r.jsx)("div",{className:"message-content",children:e.content}),(0,r.jsx)("div",{className:"message-time",children:(e=>{const t=new Date(e);return`${t.getHours()}:${t.getMinutes().toString().padStart(2,"0")}`})(e.timestamp)})]}),la=({suggestion:e,onApply:t,onDismiss:n,onRetry:a})=>e.isError?(0,r.jsxs)("div",{className:"suggestion-card",style:{borderColor:"#ea4335",backgroundColor:"#fdeded"},children:[(0,r.jsx)("div",{className:"suggestion-title",style:{color:"#ea4335"},children:"Error"}),(0,r.jsx)("div",{className:"suggestion-content",children:(0,r.jsx)("strong",{children:e.originalText})}),(0,r.jsx)("div",{className:"suggestion-content",children:e.suggestion}),(0,r.jsx)("div",{className:"suggestion-reason",style:{color:"#d93025"},children:e.reason}),(0,r.jsxs)("div",{className:"suggestion-actions",children:[(0,r.jsx)("button",{onClick:()=>n(e.id),children:"Dismiss"}),(0,r.jsx)("button",{onClick:a||(()=>window.location.reload()),children:"Retry"})]})]}):(0,r.jsxs)("div",{className:"suggestion-card",children:[(0,r.jsx)("div",{className:"suggestion-title",children:"Suggested Improvement"}),(0,r.jsxs)("div",{className:"suggestion-content",children:[(0,r.jsx)("strong",{children:"Original:"}),' "',e.originalText,'"']}),(0,r.jsxs)("div",{className:"suggestion-content",children:[(0,r.jsx)("strong",{children:"Suggestion:"}),' "',e.suggestion,'"']}),(0,r.jsx)("div",{className:"suggestion-reason",children:e.reason}),(0,r.jsxs)("div",{className:"suggestion-actions",children:[(0,r.jsx)("button",{onClick:()=>n(e.id),children:"Dismiss"}),(0,r.jsx)("button",{onClick:()=>t(e),children:"Apply"})]})]}),ua=()=>{const e=new aa,[t,n]=(0,a.useState)("http://localhost:11434"),[o,s]=(0,a.useState)("checking");return(0,a.useEffect)((()=>{sa(void 0,void 0,void 0,(function*(){const t=yield e.getAISettings();t.baseUrl&&n(t.baseUrl)}))}),[]),(0,a.useEffect)((()=>{let e=!0;const n=()=>sa(void 0,void 0,void 0,(function*(){if(!e)return;s("checking");const n=yield ra.checkConnection(t);e&&s(n?"connected":"disconnected")}));n();const r=setInterval(n,3e4);return()=>{e=!1,clearInterval(r)}}),[t]),(0,r.jsxs)("div",{className:"ollama-info-notice",style:{backgroundColor:"#EFF6FF",border:"1px solid #BFDBFE",borderRadius:"4px",padding:"8px 12px",margin:"0 0 10px 0",fontSize:"11px"},children:[(0,r.jsxs)("p",{style:{margin:"0 0 4px 0",fontWeight:"bold",color:"#3B82F6",display:"flex",alignItems:"center"},children:[(0,r.jsx)("span",{style:{width:"8px",height:"8px",borderRadius:"50%",backgroundColor:"connected"===o?"#34a853":"disconnected"===o?"#ea4335":"#fbbc05",marginRight:"6px",display:"inline-block"}}),"Using Ollama (Local AI) -"," ","connected"===o?"Connected":"disconnected"===o?"Disconnected":"Checking connection..."]}),(0,r.jsxs)("p",{style:{margin:"0",fontSize:"11px",color:"#1F2937"},children:["Messages are processed on your computer using Ollama.","disconnected"===o&&(0,r.jsxs)("span",{style:{color:"#ea4335",fontWeight:"bold"},children:[" ","Ollama connection failed. Please check that Ollama is running."]})]})]})},ca=()=>(0,r.jsx)("div",{className:"loading",children:(0,r.jsx)("div",{className:"spinner"})});o.createRoot(document.getElementById("root")).render((0,r.jsx)(a.StrictMode,{children:(0,r.jsx)((()=>{const[e,t]=(0,a.useState)("chat"),[n,o]=(0,a.useState)([]),[s,i]=(0,a.useState)([]),[l,u]=(0,a.useState)(""),[c,d]=(0,a.useState)(!1),[f,p]=(0,a.useState)(""),[h,m]=(0,a.useState)("openai"),g=(0,a.useRef)(null),y=(0,a.useRef)(new na),v=new aa,b=()=>{d(!0),i([{id:Date.now().toString(),originalText:"Retrying...",suggestion:"Attempting to reconnect to document",reason:"Please wait while we try to access the document again.",timestamp:Date.now(),isError:!1}]),setTimeout((()=>{k()}),1e3)},w=()=>sa(void 0,void 0,void 0,(function*(){const e=yield v.getAISettings();if(console.log("Loading AI settings in sidebar:",e),("openai"===e.provider&&e.apiKey||"ollama"===e.provider)&&(p(e.apiKey||""),m(e.provider),y.current.initClient(e),0===n.length)){const e={id:Date.now().toString(),role:"assistant",content:"Hello! I'm your writing assistant. How can I help you with your document today?",timestamp:Date.now()};o([e])}})),k=()=>sa(void 0,void 0,void 0,(function*(){var e,n;if("openai"!==h||f){t("suggestions"),d(!0);try{console.log("Starting document analysis..."),i([{id:Date.now().toString(),originalText:"Document Loading",suggestion:"Retrieving document content...",reason:"Please wait while we access the document content.",timestamp:Date.now(),isError:!1}]);let a,o="";try{if(console.log("Initial attempt to retrieve document content"),o=yield l(15e3),(!o||o.length<50)&&(console.log("First attempt returned empty/short content, retrying..."),i([{id:Date.now().toString(),originalText:"Connecting to document...",suggestion:"Retrying content retrieval...",reason:"The initial attempt did not return sufficient document content. Making another attempt.",timestamp:Date.now(),isError:!1}]),o=yield l(2e4)),!o||o.length<50){console.log("Second attempt failed, trying through background script...");try{const u=yield new Promise((e=>{chrome.runtime.sendMessage({type:"GET_DOCUMENT_CONTENT_FROM_BACKGROUND"},(t=>e((null==t?void 0:t.data)||{})))}));if(u.content)o=u.content,console.log("Successfully retrieved content via background script");else if(u.error)throw new Error(`Background script error: ${u.error}`)}catch(c){console.error("Background script approach failed:",c)}}function l(e){return sa(this,void 0,void 0,(function*(){return new Promise(((t,n)=>{const r=Date.now().toString(),a=setTimeout((()=>{window.removeEventListener("message",o),n(new Error(`Timed out after ${e}ms waiting for document content`))}),e);function o(e){e.data&&"DOCUMENT_CONTENT_RESPONSE"===e.data.type&&(console.log("Received document content response:",e.data.content?`${e.data.content.length} chars`:"No content",e.data.error?`Error: ${e.data.error}`:"No error"),clearTimeout(a),window.removeEventListener("message",o),e.data.error?n(new Error(e.data.error)):t(e.data.content||""))}window.addEventListener("message",o),console.log(`Sending GET_DOCUMENT_CONTENT request with timeout ${e}ms`);try{window.parent.postMessage({type:"GET_DOCUMENT_CONTENT",id:r,source:"vibewrite-sidebar"},"*"),window.top&&window.top!==window.parent&&(console.log("Also sending request to top window as fallback"),window.top.postMessage({type:"GET_DOCUMENT_CONTENT",id:r,source:"vibewrite-sidebar"},"*")),window.postMessage({type:"GET_DOCUMENT_CONTENT",id:r,source:"vibewrite-sidebar-broadcast"},"*"),chrome.runtime.sendMessage({type:"GET_DOCUMENT_CONTENT_RELAY",id:r})}catch(e){console.error("Error trying to send document content request:",e)}}))}))}if(console.log(`Document content received, length: ${o.length} characters`),!o)throw new Error("Empty document content received")}catch(p){return console.error("Failed to retrieve document content:",p),r=p,console.error("Document content error:",r),i([{id:Date.now().toString(),originalText:"Document Access Error",suggestion:"Unable to access Google Docs content",reason:"VibeWrite needs permission to access the document content. Please refresh the page and ensure you're in edit mode with the document fully loaded.",timestamp:Date.now(),isError:!0}]),void d(!1)}a="ollama"===h?`\n        You are a helpful writing assistant. Please review the following text and provide 3 specific writing suggestions for improvement.\n        \n        Your response MUST be formatted as a valid JSON array with objects containing these exact keys:\n        1. "originalText" - The exact text to improve (brief, under 20 words)\n        2. "suggestion" - Your suggested improvement\n        3. "reason" - Brief explanation why this is better\n        \n        EXAMPLE FORMAT:\n        [\n          {\n            "originalText": "The man walked quickly.",\n            "suggestion": "The man strode purposefully.",\n            "reason": "More descriptive and conveys intent."\n          },\n          {\n            "originalText": "She was very happy.",\n            "suggestion": "She beamed with joy.",\n            "reason": "Shows rather than tells the emotion."\n          }\n        ]\n        \n        Here's the text to analyze:\n        ${o.substring(0,2e3)}\n        \n        Respond ONLY with the JSON array and nothing else.\n      `:`\n        Please review the following text and provide 3 specific writing suggestions for improvement.\n        Format your response as a JSON array with objects containing:\n        1. originalText - The exact text to improve (keep it brief, under 20 words)\n        2. suggestion - Your suggested improvement\n        3. reason - A brief explanation why this is better\n        \n        Here's the text to analyze:\n        ${o.substring(0,3e3)}\n      `;const s=yield y.current.generateCompletion(a);if(s.error)throw new Error(s.error);try{let m;try{m=JSON.parse(s.text)}catch(v){if(console.warn("Failed to parse AI response as JSON:",v),"ollama"!==h)throw v;{console.log("Attempting to extract suggestions from Ollama text response");const b=[],w=s.text.split("\n");let k={};for(const S of w)S.includes("originalText:")?k.originalText=S.replace("originalText:","").trim():S.includes("suggestion:")?k.suggestion=S.replace("suggestion:","").trim():S.includes("reason:")&&(k.reason=S.replace("reason:","").trim(),k.originalText&&k.suggestion&&k.reason&&(b.push(Object.assign({},k)),k={}));if(!(b.length>0))throw new Error("Could not extract structured suggestions from Ollama response");m=b}}const g=m.map((e=>({id:Date.now().toString()+Math.random().toString(36).substring(2,9),originalText:e.originalText||"Text selection",suggestion:e.suggestion||"No specific suggestion",reason:e.reason||"Improvement recommended",timestamp:Date.now()})));i(g)}catch(r){console.error("Failed to parse suggestions:",r),i([])}}catch(r){console.error("Failed to analyze document:",r);const _={id:Date.now().toString(),originalText:"Error analyzing document",suggestion:(null===(e=r.message)||void 0===e?void 0:e.includes("document content"))?"Could not access document content":"ollama"===h?"Check that Ollama is running correctly":"Check your API key and try again",reason:(null===(n=r.message)||void 0===n?void 0:n.includes("document content"))?"VibeWrite could not access the document content. Try refreshing the page and making sure you're in edit mode.":r.message||"An error occurred while analyzing your document",timestamp:Date.now(),isError:!0};i([_]),r.message&&r.message.includes("JSON")?console.log("Response parsing issue - model may not be following instructions correctly"):r.message&&r.message.includes("network")&&console.log("Network connectivity issue detected")}finally{d(!1)}var r}})),S=()=>sa(void 0,void 0,void 0,(function*(){if(!l.trim()||"openai"===h&&!f)return;const e={id:Date.now().toString(),role:"user",content:l,timestamp:Date.now()};o((t=>[...t,e])),u(""),d(!0);try{let e="",t="";try{window.parent.postMessage({type:"GET_DOCUMENT_CONTENT"},"*"),e=yield new Promise(((e,t)=>{const n=setTimeout((()=>{e("")}),3e3),r=t=>{t.data&&"DOCUMENT_CONTENT_RESPONSE"===t.data.type&&(clearTimeout(n),window.removeEventListener("message",r),e(t.data.content||""))};window.addEventListener("message",r)})),window.parent.postMessage({type:"GET_SELECTED_TEXT"},"*"),t=yield new Promise(((e,t)=>{const n=setTimeout((()=>{e("")}),1e3),r=t=>{t.data&&"SELECTED_TEXT_RESPONSE"===t.data.type&&(clearTimeout(n),window.removeEventListener("message",r),e(t.data.text||""))};window.addEventListener("message",r)}))}catch(n){console.warn("Failed to get document content/selected text via messaging:",n),e=oa.getDocumentContent()||"",t=oa.getSelectedText()||""}const n=`\n        User message: ${l}\n        \n        ${t?`Selected text in document: ${t}\n\n`:""}\n        \n        ${e?`Context from document: ${e.substring(0,1e3)}...\n\n`:""}\n        \n        Please provide helpful writing advice based on this context.\n      `,r=yield y.current.generateCompletion(n);if(r.error)throw new Error(r.error);const a={id:Date.now().toString(),role:"assistant",content:r.text,timestamp:Date.now()};o((e=>[...e,a]))}catch(e){console.error("Failed to send message:",e);let t="Sorry, I encountered an error processing your request.";e.message&&e.message.includes("403")?t="Error: Access to Ollama server is forbidden (403 error). Make sure Ollama is running with proper permissions and CORS is enabled.":e.message&&e.message.includes("Ollama")?t=e.message:"openai"===h?t="OpenAI API error. Please check your API key and try again.":"ollama"===h&&(t="Could not connect to Ollama server. Please make sure Ollama is running at the configured URL and accessible from the browser.");const n={id:Date.now().toString(),role:"assistant",content:t,timestamp:Date.now()};o((e=>[...e,n]))}finally{d(!1)}})),_=e=>{const t=`Suggestion: "${e.suggestion}"\n\nReason: ${e.reason}`;oa.addComment(t)&&i((t=>t.filter((t=>t.id!==e.id))))},x=e=>{i((t=>t.filter((t=>t.id!==e))))};return(0,a.useEffect)((()=>{w();const e=e=>{"ANALYZE_DOCUMENT"===e.type&&k()},t=e=>{console.log("Sidebar received window message:",e.data),e.data&&"RELOAD_SETTINGS"===e.data.type?(console.log("Sidebar received RELOAD_SETTINGS message"),w()):e.data&&"ANALYZE_DOCUMENT"===e.data.type&&(console.log("Sidebar received ANALYZE_DOCUMENT message"),k())};return chrome.runtime.onMessage.addListener(e),window.addEventListener("message",t),()=>{chrome.runtime.onMessage.removeListener(e),window.removeEventListener("message",t)}}),[]),(0,a.useEffect)((()=>{g.current&&(g.current.scrollTop=g.current.scrollHeight)}),[n]),(0,r.jsxs)("div",{className:"sidebar-container",children:[(0,r.jsxs)("div",{className:"sidebar-header",children:[(0,r.jsx)("h1",{children:"VibeWrite"}),"openai"!==h||f?(0,r.jsxs)("small",{style:{color:"#34a853"},children:["Using ","openai"===h?"OpenAI":"Ollama"," ✓"]}):(0,r.jsx)("small",{style:{color:"#d93025"},children:"Please set OpenAI API key in extension popup"})]}),(0,r.jsxs)("div",{className:"sidebar-tabs",children:[(0,r.jsx)("div",{className:"tab "+("chat"===e?"active":""),onClick:()=>t("chat"),children:"Chat"}),(0,r.jsx)("div",{className:"tab "+("suggestions"===e?"active":""),onClick:()=>t("suggestions"),children:"Suggestions"})]}),(0,r.jsx)("div",{className:"sidebar-content",children:"chat"===e?(0,r.jsxs)("div",{className:"chat-container",children:["ollama"===h&&(0,r.jsx)(ua,{}),(0,r.jsxs)("div",{className:"chat-messages",ref:g,children:[n.map((e=>(0,r.jsx)(ia,{message:e},e.id))),c&&"chat"===e&&(0,r.jsx)(ca,{})]}),(0,r.jsx)("div",{className:"chat-input",children:(0,r.jsxs)("div",{className:"chat-input-box",children:[(0,r.jsx)("textarea",{value:l,onChange:e=>u(e.target.value),onKeyDown:e=>{"Enter"!==e.key||e.shiftKey||(e.preventDefault(),S())},placeholder:"Type a message...",disabled:"openai"===h&&!f||c}),(0,r.jsx)("button",{onClick:S,disabled:!l.trim()||"openai"===h&&!f||c,children:"➤"})]})})]}):(0,r.jsxs)("div",{className:"suggestions-container",children:["ollama"===h&&!c&&0===s.length&&(0,r.jsxs)("div",{className:"ollama-info-notice",style:{backgroundColor:"#EFF6FF",border:"1px solid #BFDBFE",borderRadius:"4px",padding:"8px 12px",margin:"0 0 10px 0",fontSize:"11px"},children:[(0,r.jsx)("p",{style:{margin:"0 0 4px 0",fontWeight:"bold",color:"#3B82F6"},children:"Using Ollama for Suggestions"}),(0,r.jsx)("p",{style:{margin:"0",fontSize:"11px",color:"#1F2937"},children:"The quality of suggestions may depend on the Ollama model selected. For best results, use a model with strong writing capabilities."})]}),c?(0,r.jsx)(ca,{}):s.length>0?s.map((e=>(0,r.jsx)(la,{suggestion:e,onApply:_,onDismiss:x,onRetry:e.isError?b:void 0},e.id))):(0,r.jsxs)("div",{style:{textAlign:"center",padding:"20px 0"},children:[(0,r.jsx)("p",{children:"No suggestions yet."}),(0,r.jsx)("button",{style:{backgroundColor:"#1a73e8",color:"white",border:"none",borderRadius:"4px",padding:"8px 16px",cursor:"pointer"},onClick:k,disabled:"openai"===h&&!f,children:"Analyze Document"})]})]})}),(0,r.jsxs)("div",{className:"sidebar-footer",children:[(0,r.jsx)("div",{children:"VibeWrite v1.0.0"}),(0,r.jsxs)("div",{style:{display:"flex",alignItems:"center",backgroundColor:"openai"===h?"#f0f7f5":"#f0f1ff",borderRadius:"12px",padding:"4px 8px",fontSize:"11px",border:"1px solid "+("openai"===h?"#74aa9c":"#7C83FD")},children:[(0,r.jsx)("span",{style:{width:"8px",height:"8px",borderRadius:"50%",backgroundColor:"openai"===h?"#74aa9c":"#7C83FD",display:"inline-block",marginRight:"5px"}}),"Powered by"," ","openai"===h?"OpenAI":"Ollama (Local)"]})]})]})}),{})}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,