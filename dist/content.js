(()=>{"use strict";class e{static startDebugLogging(){null===this.debugInterval&&(console.log("Starting GoogleDocsAPI debug logging"),this.debugInterval=window.setInterval((()=>{var e;const t=Date.now();if(t-this.lastDebugTime>5e3){this.lastDebugTime=t;const o=this.isInGoogleDocs(),n=document.querySelectorAll(".kix-paragraphrenderer");if(console.log(`[GoogleDocsAPI Debug] isInGoogleDocs: ${o}`),console.log(`[GoogleDocsAPI Debug] paragraphs found: ${(null==n?void 0:n.length)||0}`),n&&n.length>0){const t=null===(e=n[0].textContent)||void 0===e?void 0:e.substring(0,50);console.log(`[GoogleDocsAPI Debug] First paragraph starts with: ${t}...`)}}}),1e3))}static stopDebugLogging(){null!==this.debugInterval&&(window.clearInterval(this.debugInterval),this.debugInterval=null,console.log("Stopped GoogleDocsAPI debug logging"))}static isInGoogleDocs(){try{return"docs.google.com"===window.location.hostname&&(null!==document.querySelector(".kix-paragraphrenderer")||null!==document.querySelector(".docs-editor"))}catch(e){return console.error("Error checking if in Google Docs:",e),!1}}static getDocumentContent(e=3){try{if(console.log("Attempting to retrieve document content..."),!this.isInGoogleDocs())return console.error("Not in a Google Docs document"),"";const t=document.querySelectorAll(".kix-paragraphrenderer");if(!t||0===t.length){if(console.error("Could not find paragraph elements in document, DOM might not be ready"),this.startDebugLogging(),e>0){console.log(`Trying alternative selectors (${e} retries left)`);const t=[".kix-page-content-wrapper",".docs-texteventtarget-iframe",".docs-editor-container"];for(const e of t){const t=document.querySelectorAll(e);if(t&&t.length>0){console.log(`Found ${t.length} elements with selector ${e}`);const o=Array.from(t).map((e=>e.textContent)).filter(Boolean).join("\n");if(o)return console.log(`Retrieved ${o.length} characters using alternative selector`),o}}return new Promise((t=>{setTimeout((()=>{t(this.getDocumentContent(e-1))}),500)}))}return""}const o=Array.from(t).map((e=>e.textContent)).join("\n");return o?this.stopDebugLogging():(console.warn("Document content appears to be empty"),this.startDebugLogging()),console.log(`Retrieved ${o.length} characters from document`),o}catch(e){return console.error("Error getting document content:",e),this.startDebugLogging(),""}}static getSelectedText(){try{if(window.getSelection){const e=window.getSelection();if(e)return e.toString()}return""}catch(e){return console.error("Error getting selected text:",e),""}}static addComment(e){try{if(!this.getSelectedText())return console.warn("No text selected to add a comment to"),!1;const t=document.querySelector('[aria-label="Add comment"]');return t&&(t.click(),setTimeout((()=>{var t,o;const n=document.querySelector(".docos-input-textarea");n&&(null===(o=null===(t=Object.getOwnPropertyDescriptor(HTMLTextAreaElement.prototype,"value"))||void 0===t?void 0:t.set)||void 0===o||o.call(n,e),n.dispatchEvent(new Event("input",{bubbles:!0})),setTimeout((()=>{const e=Array.from(document.querySelectorAll("button")).find((e=>"Comment"===e.textContent));if(e)return e.click(),!0}),300))}),500)),!1}catch(e){return console.error("Error adding comment:",e),!1}}static isGoogleDocsUrl(e){return e.startsWith("https://docs.google.com/document/")}static getDocumentTitle(){try{const e=document.querySelector(".docs-title-input");return e&&e.textContent||"Untitled Document"}catch(e){return console.error("Error getting document title:",e),"Untitled Document"}}}e.debugInterval=null,e.lastDebugTime=0;function t(){const e=document.getElementById("vibewrite-sidebar");e&&e.classList.toggle("open")}function o(){var e;const t=document.getElementById("vibewrite-sidebar");t&&!t.classList.contains("open")&&t.classList.add("open");const o=document.querySelector("#vibewrite-sidebar iframe");o?(console.log("Sending ANALYZE_DOCUMENT to sidebar iframe"),null===(e=o.contentWindow)||void 0===e||e.postMessage({type:"ANALYZE_DOCUMENT"},"*")):(console.error("Could not find sidebar iframe"),chrome.runtime.sendMessage({type:"ANALYZE_DOCUMENT"}))}function n(){const t=e.getSelectedText();if(!t)return void alert("Please select some text to give feedback on.");const o=document.getElementById("vibewrite-sidebar");o&&!o.classList.contains("open")&&o.classList.add("open"),chrome.runtime.sendMessage({type:"CHAT_REQUEST",payload:{message:`Please review and improve the following text: "${t}"`,selectedText:t}})}window.vibeWriteInjected?console.log("VibeWrite already injected, skipping..."):(window.vibeWriteInjected=!0,console.log("VibeWrite content script loaded"),window.addEventListener("load",(function(){return r=this,c=void 0,i=function*(){console.log("Initializing VibeWrite..."),e.isInGoogleDocs()?(yield function(e,t=1e4){return new Promise(((o,n)=>{const r=Date.now();!function c(){const s=document.querySelector(e);s?o(s):Date.now()-r>t?n(new Error(`Timeout waiting for element: ${e}`)):setTimeout(c,100)}()}))}(".docs-titlebar-buttons"),function(){console.log("Starting document content monitoring..."),e.startDebugLogging();let t=0;const o=setInterval((()=>{t++;try{const n=e.getDocumentContent();n?(console.log(`Document content monitoring: Content accessible (${n.length} chars)`),clearInterval(o),e.stopDebugLogging()):console.warn(`Document content monitoring: No content available (check ${t}/20)`)}catch(e){console.error("Document content monitoring: Error accessing content",e)}t>=20&&(console.warn("Document content monitoring: Max checks reached, stopping monitoring"),clearInterval(o))}),3e3)}(),function(){try{const e=document.createElement("div");e.className="vibewrite-sidebar-container",e.id="vibewrite-sidebar",document.body.appendChild(e);const r=document.createElement("iframe");r.style.width="100%",r.style.height="100%",r.style.border="none",r.src=chrome.runtime.getURL("sidebar.html"),e.appendChild(r);const c=document.querySelector(".docs-titlebar-buttons");if(c){const e=document.createElement("div");e.className="vibewrite-toolbar",e.style.display="inline-flex",e.style.alignItems="center";const r=document.createElement("button");r.className="vibewrite-button",r.textContent="VibeWrite",r.style.backgroundColor="#1a73e8",r.style.color="white",r.style.padding="8px 12px",r.style.border="none",r.style.borderRadius="4px",r.style.cursor="pointer",r.style.marginRight="10px",r.addEventListener("click",t);const s=document.createElement("button");s.className="vibewrite-button",s.textContent="Analyze",s.addEventListener("click",o);const i=document.createElement("button");i.className="vibewrite-button",i.textContent="Add Feedback",i.addEventListener("click",n),e.appendChild(r),e.appendChild(s),e.appendChild(i),c.insertBefore(e,c.firstChild),console.log("VibeWrite UI added successfully")}}catch(e){console.error("Error adding VibeWrite UI:",e)}}(),chrome.runtime.onMessage.addListener(((o,n,r)=>{var c;switch(console.log("Content script received message:",o),o.type){case"TOGGLE_SIDEBAR":t(),r({success:!0});break;case"RELOAD_SETTINGS":console.log("Reloading settings in content script");const n=document.querySelector("#vibewrite-sidebar iframe");n&&(null===(c=n.contentWindow)||void 0===c||c.postMessage({type:"RELOAD_SETTINGS"},"*")),r({success:!0});break;case"GET_SELECTED_TEXT":r({success:!0,data:e.getSelectedText()});break;case"GET_DOCUMENT_CONTENT":r({success:!0,data:e.getDocumentContent()});break;case"ADD_COMMENT":o.payload&&o.payload.commentText?r({success:e.addComment(o.payload.commentText)}):r({success:!1,error:"No comment text provided"});break;default:r({success:!1,error:"Unknown message type"})}return!0}))):console.log("Not in a Google Docs document, exiting...")},new((s=void 0)||(s=Promise))((function(e,t){function o(e){try{l(i.next(e))}catch(e){t(e)}}function n(e){try{l(i.throw(e))}catch(e){t(e)}}function l(t){var r;t.done?e(t.value):(r=t.value,r instanceof s?r:new s((function(e){e(r)}))).then(o,n)}l((i=i.apply(r,c||[])).next())}));var r,c,s,i})))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,