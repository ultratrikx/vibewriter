(()=>{"use strict";class e{static getDocumentContent(){try{if(!this.isInGoogleDocs())return console.error("Not in a Google Docs document"),"";const e=document.querySelectorAll(".kix-paragraphrenderer");if(!e||0===e.length)return console.error("Could not find paragraph elements in document, DOM might not be ready"),"";const t=Array.from(e).map((e=>e.textContent)).join("\n");return t||console.warn("Document content appears to be empty"),console.log(`Retrieved ${t.length} characters from document`),t}catch(e){return console.error("Error getting document content:",e),""}}static getSelectedText(){try{if(window.getSelection){const e=window.getSelection();if(e)return e.toString()}return""}catch(e){return console.error("Error getting selected text:",e),""}}static addComment(e){try{if(!this.getSelectedText())return console.warn("No text selected to add a comment to"),!1;const t=document.querySelector('[aria-label="Add comment"]');return t&&(t.click(),setTimeout((()=>{var t,n;const o=document.querySelector(".docos-input-textarea");o&&(null===(n=null===(t=Object.getOwnPropertyDescriptor(HTMLTextAreaElement.prototype,"value"))||void 0===t?void 0:t.set)||void 0===n||n.call(o,e),o.dispatchEvent(new Event("input",{bubbles:!0})),setTimeout((()=>{const e=Array.from(document.querySelectorAll("button")).find((e=>"Comment"===e.textContent));if(e)return e.click(),!0}),300))}),500)),!1}catch(e){return console.error("Error adding comment:",e),!1}}static isInGoogleDocs(){return window.location.href.startsWith("https://docs.google.com/document/")}static getDocumentTitle(){try{const e=document.querySelector(".docs-title-input");return e&&e.textContent||"Untitled Document"}catch(e){return console.error("Error getting document title:",e),"Untitled Document"}}}function t(){const e=document.getElementById("vibewrite-sidebar");e&&e.classList.toggle("open")}function n(){var e;const t=document.getElementById("vibewrite-sidebar");t&&!t.classList.contains("open")&&t.classList.add("open");const n=document.querySelector("#vibewrite-sidebar iframe");n?(console.log("Sending ANALYZE_DOCUMENT to sidebar iframe"),null===(e=n.contentWindow)||void 0===e||e.postMessage({type:"ANALYZE_DOCUMENT"},"*")):(console.error("Could not find sidebar iframe"),chrome.runtime.sendMessage({type:"ANALYZE_DOCUMENT"}))}function o(){const t=e.getSelectedText();if(!t)return void alert("Please select some text to give feedback on.");const n=document.getElementById("vibewrite-sidebar");n&&!n.classList.contains("open")&&n.classList.add("open"),chrome.runtime.sendMessage({type:"CHAT_REQUEST",payload:{message:`Please review and improve the following text: "${t}"`,selectedText:t}})}window.vibeWriteInjected?console.log("VibeWrite already injected, skipping..."):(window.vibeWriteInjected=!0,console.log("VibeWrite content script loaded"),window.addEventListener("load",(function(){return r=this,c=void 0,s=function*(){console.log("Initializing VibeWrite..."),e.isInGoogleDocs()?(yield function(e,t=1e4){return new Promise(((n,o)=>{const r=Date.now();!function c(){const i=document.querySelector(e);i?n(i):Date.now()-r>t?o(new Error(`Timeout waiting for element: ${e}`)):setTimeout(c,100)}()}))}(".docs-titlebar-buttons"),function(){try{const e=document.createElement("div");e.className="vibewrite-sidebar-container",e.id="vibewrite-sidebar",document.body.appendChild(e);const r=document.createElement("iframe");r.style.width="100%",r.style.height="100%",r.style.border="none",r.src=chrome.runtime.getURL("sidebar.html"),e.appendChild(r);const c=document.querySelector(".docs-titlebar-buttons");if(c){const e=document.createElement("div");e.className="vibewrite-toolbar",e.style.display="inline-flex",e.style.alignItems="center";const r=document.createElement("button");r.className="vibewrite-button",r.textContent="VibeWrite",r.style.backgroundColor="#1a73e8",r.style.color="white",r.style.padding="8px 12px",r.style.border="none",r.style.borderRadius="4px",r.style.cursor="pointer",r.style.marginRight="10px",r.addEventListener("click",t);const i=document.createElement("button");i.className="vibewrite-button",i.textContent="Analyze",i.addEventListener("click",n);const s=document.createElement("button");s.className="vibewrite-button",s.textContent="Add Feedback",s.addEventListener("click",o),e.appendChild(r),e.appendChild(i),e.appendChild(s),c.insertBefore(e,c.firstChild),console.log("VibeWrite UI added successfully")}}catch(e){console.error("Error adding VibeWrite UI:",e)}}(),chrome.runtime.onMessage.addListener(((n,o,r)=>{var c;switch(console.log("Content script received message:",n),n.type){case"TOGGLE_SIDEBAR":t(),r({success:!0});break;case"RELOAD_SETTINGS":console.log("Reloading settings in content script");const o=document.querySelector("#vibewrite-sidebar iframe");o&&(null===(c=o.contentWindow)||void 0===c||c.postMessage({type:"RELOAD_SETTINGS"},"*")),r({success:!0});break;case"GET_SELECTED_TEXT":r({success:!0,data:e.getSelectedText()});break;case"GET_DOCUMENT_CONTENT":r({success:!0,data:e.getDocumentContent()});break;case"ADD_COMMENT":n.payload&&n.payload.commentText?r({success:e.addComment(n.payload.commentText)}):r({success:!1,error:"No comment text provided"});break;default:r({success:!1,error:"Unknown message type"})}return!0}))):console.log("Not in a Google Docs document, exiting...")},new((i=void 0)||(i=Promise))((function(e,t){function n(e){try{a(s.next(e))}catch(e){t(e)}}function o(e){try{a(s.throw(e))}catch(e){t(e)}}function a(t){var r;t.done?e(t.value):(r=t.value,r instanceof i?r:new i((function(e){e(r)}))).then(n,o)}a((s=s.apply(r,c||[])).next())}));var r,c,i,s})))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TCxRQUoxQ0EsRUFJeURLLEVBQU9MLE1BSmhEQSxhQUFpQkYsRUFBSUUsRUFBUSxJQUFJRixHQUFFLFNBQVUxQyxHQUFXQSxFQUFRNEMsRUFBUSxLQUlqQk8sS0FBS1IsRUFBV0ssRUFBVyxDQUM3R0gsR0FBTWpELEVBQVlBLEVBQVV3RCxNQUFNMUQsRUFBU0MsR0FBYyxLQUFLbUQsT0FDbEUsSUFQd0MsSUFBVXBELEVBQVNDLEVBQVkrQyxFQUFHOUMsQ0FvQzlFLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJld3JpdGUvLi9zcmMvdXRpbHMvZ29vZ2xlLWRvY3MtYXBpLnRzIiwid2VicGFjazovL3ZpYmV3cml0ZS8uL3NyYy9jb250ZW50L2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEFQSSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBHb29nbGUgRG9jc1xuZXhwb3J0IGNsYXNzIEdvb2dsZURvY3NBUEkge1xuICAgIHN0YXRpYyBnZXREb2N1bWVudENvbnRlbnQoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSdyZSBpbiBhIEdvb2dsZSBEb2NzIGRvY3VtZW50IGVkaXRvclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzSW5Hb29nbGVEb2NzKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTm90IGluIGEgR29vZ2xlIERvY3MgZG9jdW1lbnRcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBHZXQgYWxsIHRleHQgY29udGVudCBmcm9tIHRoZSBkb2N1bWVudFxuICAgICAgICAgICAgY29uc3QgcGFyYWdyYXBocyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIua2l4LXBhcmFncmFwaHJlbmRlcmVyXCIpO1xuICAgICAgICAgICAgaWYgKCFwYXJhZ3JhcGhzIHx8IHBhcmFncmFwaHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkIG5vdCBmaW5kIHBhcmFncmFwaCBlbGVtZW50cyBpbiBkb2N1bWVudCwgRE9NIG1pZ2h0IG5vdCBiZSByZWFkeVwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEV4dHJhY3QgY29udGVudFxuICAgICAgICAgICAgY29uc3QgZG9jdW1lbnRDb250ZW50ID0gQXJyYXkuZnJvbShwYXJhZ3JhcGhzKVxuICAgICAgICAgICAgICAgIC5tYXAoKGVsZW1lbnQpID0+IGVsZW1lbnQudGV4dENvbnRlbnQpXG4gICAgICAgICAgICAgICAgLmpvaW4oXCJcXG5cIik7XG4gICAgICAgICAgICBpZiAoIWRvY3VtZW50Q29udGVudCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkRvY3VtZW50IGNvbnRlbnQgYXBwZWFycyB0byBiZSBlbXB0eVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBSZXRyaWV2ZWQgJHtkb2N1bWVudENvbnRlbnQubGVuZ3RofSBjaGFyYWN0ZXJzIGZyb20gZG9jdW1lbnRgKTtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudENvbnRlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2V0dGluZyBkb2N1bWVudCBjb250ZW50OlwiLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50IHNlbGVjdGVkIHRleHQgaW4gR29vZ2xlIERvY3NcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0U2VsZWN0ZWRUZXh0KCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gVXNpbmcgdGhlIEdvb2dsZSBEb2NzIHNlbGVjdGlvbiBmdW5jdGlvbmFsaXR5XG4gICAgICAgICAgICBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb24udG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBnZXR0aW5nIHNlbGVjdGVkIHRleHQ6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIEdvb2dsZSBEb2NzIGNvbW1lbnQgYXQgdGhlIGN1cnJlbnQgc2VsZWN0aW9uXG4gICAgICogQHBhcmFtIGNvbW1lbnRUZXh0IC0gVGV4dCB0byBhZGQgYXMgYSBjb21tZW50XG4gICAgICovXG4gICAgc3RhdGljIGFkZENvbW1lbnQoY29tbWVudFRleHQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEZpcnN0LCBuZWVkIHRvIG1ha2Ugc3VyZSBzb21ldGhpbmcgaXMgc2VsZWN0ZWRcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkVGV4dCA9IHRoaXMuZ2V0U2VsZWN0ZWRUZXh0KCk7XG4gICAgICAgICAgICBpZiAoIXNlbGVjdGVkVGV4dCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk5vIHRleHQgc2VsZWN0ZWQgdG8gYWRkIGEgY29tbWVudCB0b1wiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTaW11bGF0ZSBjbGlja2luZyB0aGUgXCJBZGQgY29tbWVudFwiIGJ1dHRvbiBvciBtZW51IGl0ZW1cbiAgICAgICAgICAgIGNvbnN0IGNvbW1lbnRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbYXJpYS1sYWJlbD1cIkFkZCBjb21tZW50XCJdJyk7XG4gICAgICAgICAgICBpZiAoY29tbWVudEJ1dHRvbikge1xuICAgICAgICAgICAgICAgIGNvbW1lbnRCdXR0b24uY2xpY2soKTtcbiAgICAgICAgICAgICAgICAvLyBXYWl0IGZvciB0aGUgY29tbWVudCBib3ggdG8gYXBwZWFyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhlIGNvbW1lbnQgaW5wdXQgYm94IGFuZCBpbnNlcnQgb3VyIHRleHRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tbWVudEJveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZG9jb3MtaW5wdXQtdGV4dGFyZWFcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21tZW50Qm94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHZhbHVlIG9mIHRoZSBjb21tZW50IGJveFxuICAgICAgICAgICAgICAgICAgICAgICAgKF9iID0gKF9hID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihIVE1MVGV4dEFyZWFFbGVtZW50LnByb3RvdHlwZSwgXCJ2YWx1ZVwiKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoY29tbWVudEJveCwgY29tbWVudFRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciBpbnB1dCBldmVudCB0byBlbnN1cmUgR29vZ2xlIERvY3MgcmVjb2duaXplcyB0aGUgY2hhbmdlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50Qm94LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaW5wdXRcIiwgeyBidWJibGVzOiB0cnVlIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1Ym1pdCB0aGUgY29tbWVudCAtIGZpbmQgdGhlIFwiQ29tbWVudFwiIGJ1dHRvbiBhbmQgY2xpY2sgaXRcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1lbnRTdWJtaXRCdXR0b24gPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJidXR0b25cIikpLmZpbmQoKGJ1dHRvbikgPT4gYnV0dG9uLnRleHRDb250ZW50ID09PSBcIkNvbW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1lbnRTdWJtaXRCdXR0b24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudFN1Ym1pdEJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAzMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhZGRpbmcgY29tbWVudDpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHdlJ3JlIGluIGEgR29vZ2xlIERvY3MgZG9jdW1lbnRcbiAgICAgKi9cbiAgICBzdGF0aWMgaXNJbkdvb2dsZURvY3MoKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZi5zdGFydHNXaXRoKFwiaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgZG9jdW1lbnQncyB0aXRsZVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXREb2N1bWVudFRpdGxlKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgdGl0bGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kb2NzLXRpdGxlLWlucHV0XCIpO1xuICAgICAgICAgICAgaWYgKHRpdGxlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aXRsZUVsZW1lbnQudGV4dENvbnRlbnQgfHwgXCJVbnRpdGxlZCBEb2N1bWVudFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwiVW50aXRsZWQgRG9jdW1lbnRcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBnZXR0aW5nIGRvY3VtZW50IHRpdGxlOlwiLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gXCJVbnRpdGxlZCBEb2N1bWVudFwiO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLyoqXG4gKiBDb250ZW50IFNjcmlwdCBmb3IgVmliZVdyaXRlIC0gR29vZ2xlIERvY3MgSW50ZWdyYXRpb25cbiAqXG4gKiBUaGlzIHNjcmlwdCBpcyBpbmplY3RlZCBpbnRvIEdvb2dsZSBEb2NzIHBhZ2VzIGFuZCBoYW5kbGVzOlxuICogLSBBZGRpbmcgVUkgZWxlbWVudHMgdG8gdGhlIEdvb2dsZSBEb2NzIGludGVyZmFjZVxuICogLSBDcmVhdGluZyBhbmQgbWFuYWdpbmcgdGhlIHNpZGViYXJcbiAqIC0gQ29tbXVuaWNhdGluZyB3aXRoIHRoZSBHb29nbGUgRG9jcyBkb2N1bWVudFxuICogLSBTZW5kaW5nIGRvY3VtZW50IGNvbnRlbnQgdG8gdGhlIGJhY2tncm91bmQgc2NyaXB0XG4gKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IHsgR29vZ2xlRG9jc0FQSSB9IGZyb20gXCIuLi91dGlscy9nb29nbGUtZG9jcy1hcGlcIjtcbi8vIElmIGFscmVhZHkgaW5qZWN0ZWQsIGV4aXQgZWFybHlcbmlmICh3aW5kb3cudmliZVdyaXRlSW5qZWN0ZWQpIHtcbiAgICBjb25zb2xlLmxvZyhcIlZpYmVXcml0ZSBhbHJlYWR5IGluamVjdGVkLCBza2lwcGluZy4uLlwiKTtcbn1cbmVsc2Uge1xuICAgIHdpbmRvdy52aWJlV3JpdGVJbmplY3RlZCA9IHRydWU7XG4gICAgY29uc29sZS5sb2coXCJWaWJlV3JpdGUgY29udGVudCBzY3JpcHQgbG9hZGVkXCIpO1xuICAgIC8vIEluaXRpYWxpemUgVmliZVdyaXRlIGFmdGVyIHRoZSBwYWdlIGhhcyBmdWxseSBsb2FkZWRcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgaW5pdFZpYmVXcml0ZSk7XG59XG4vLyBNYWluIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uXG5mdW5jdGlvbiBpbml0VmliZVdyaXRlKCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiSW5pdGlhbGl6aW5nIFZpYmVXcml0ZS4uLlwiKTtcbiAgICAgICAgLy8gT25seSBydW4gb24gR29vZ2xlIERvY3MgZG9jdW1lbnQgcGFnZXNcbiAgICAgICAgaWYgKCFHb29nbGVEb2NzQVBJLmlzSW5Hb29nbGVEb2NzKCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTm90IGluIGEgR29vZ2xlIERvY3MgZG9jdW1lbnQsIGV4aXRpbmcuLi5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2FpdCBmb3IgdGhlIEdvb2dsZSBEb2NzIFVJIHRvIGZ1bGx5IGxvYWRcbiAgICAgICAgeWllbGQgd2FpdEZvckVsZW1lbnQoXCIuZG9jcy10aXRsZWJhci1idXR0b25zXCIpO1xuICAgICAgICAvLyBBZGQgb3VyIGN1c3RvbSBVSSBlbGVtZW50c1xuICAgICAgICBhZGRWaWJlV3JpdGVVSSgpO1xuICAgICAgICAvLyBTZXQgdXAgbWVzc2FnZSBoYW5kbGluZ1xuICAgICAgICBzZXR1cE1lc3NhZ2VIYW5kbGVycygpO1xuICAgIH0pO1xufVxuLy8gRnVuY3Rpb24gdG8gY3JlYXRlIGFuZCBhZGQgdGhlIFZpYmVXcml0ZSBVSSB0byBHb29nbGUgRG9jc1xuZnVuY3Rpb24gYWRkVmliZVdyaXRlVUkoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBzaWRlYmFyIGNvbnRhaW5lclxuICAgICAgICBjb25zdCBzaWRlYmFyQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgc2lkZWJhckNvbnRhaW5lci5jbGFzc05hbWUgPSBcInZpYmV3cml0ZS1zaWRlYmFyLWNvbnRhaW5lclwiO1xuICAgICAgICBzaWRlYmFyQ29udGFpbmVyLmlkID0gXCJ2aWJld3JpdGUtc2lkZWJhclwiO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNpZGViYXJDb250YWluZXIpO1xuICAgICAgICAvLyBDcmVhdGUgdGhlIHNpZGViYXIgaWZyYW1lXG4gICAgICAgIGNvbnN0IHNpZGViYXJJZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xuICAgICAgICBzaWRlYmFySWZyYW1lLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgIHNpZGViYXJJZnJhbWUuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG4gICAgICAgIHNpZGViYXJJZnJhbWUuc3R5bGUuYm9yZGVyID0gXCJub25lXCI7XG4gICAgICAgIHNpZGViYXJJZnJhbWUuc3JjID0gY2hyb21lLnJ1bnRpbWUuZ2V0VVJMKFwic2lkZWJhci5odG1sXCIpO1xuICAgICAgICBzaWRlYmFyQ29udGFpbmVyLmFwcGVuZENoaWxkKHNpZGViYXJJZnJhbWUpO1xuICAgICAgICAvLyBBZGQgVmliZVdyaXRlIGJ1dHRvbnMgdG8gdGhlIEdvb2dsZSBEb2NzIHRvb2xiYXJcbiAgICAgICAgY29uc3QgdG9vbGJhckNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZG9jcy10aXRsZWJhci1idXR0b25zXCIpO1xuICAgICAgICBpZiAodG9vbGJhckNvbnRhaW5lcikge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGNvbnRhaW5lciBmb3Igb3VyIGJ1dHRvbnNcbiAgICAgICAgICAgIGNvbnN0IHZpYmVXcml0ZVRvb2xiYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgdmliZVdyaXRlVG9vbGJhci5jbGFzc05hbWUgPSBcInZpYmV3cml0ZS10b29sYmFyXCI7XG4gICAgICAgICAgICB2aWJlV3JpdGVUb29sYmFyLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1mbGV4XCI7XG4gICAgICAgICAgICB2aWJlV3JpdGVUb29sYmFyLnN0eWxlLmFsaWduSXRlbXMgPSBcImNlbnRlclwiOyAvLyBDcmVhdGUgdG9nZ2xlIHNpZGViYXIgYnV0dG9uXG4gICAgICAgICAgICBjb25zdCB0b2dnbGVTaWRlYmFyQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgICAgIHRvZ2dsZVNpZGViYXJCdXR0b24uY2xhc3NOYW1lID0gXCJ2aWJld3JpdGUtYnV0dG9uXCI7XG4gICAgICAgICAgICB0b2dnbGVTaWRlYmFyQnV0dG9uLnRleHRDb250ZW50ID0gXCJWaWJlV3JpdGVcIjtcbiAgICAgICAgICAgIHRvZ2dsZVNpZGViYXJCdXR0b24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjMWE3M2U4XCI7XG4gICAgICAgICAgICB0b2dnbGVTaWRlYmFyQnV0dG9uLnN0eWxlLmNvbG9yID0gXCJ3aGl0ZVwiO1xuICAgICAgICAgICAgdG9nZ2xlU2lkZWJhckJ1dHRvbi5zdHlsZS5wYWRkaW5nID0gXCI4cHggMTJweFwiO1xuICAgICAgICAgICAgdG9nZ2xlU2lkZWJhckJ1dHRvbi5zdHlsZS5ib3JkZXIgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIHRvZ2dsZVNpZGViYXJCdXR0b24uc3R5bGUuYm9yZGVyUmFkaXVzID0gXCI0cHhcIjtcbiAgICAgICAgICAgIHRvZ2dsZVNpZGViYXJCdXR0b24uc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgICAgICB0b2dnbGVTaWRlYmFyQnV0dG9uLnN0eWxlLm1hcmdpblJpZ2h0ID0gXCIxMHB4XCI7XG4gICAgICAgICAgICB0b2dnbGVTaWRlYmFyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0b2dnbGVTaWRlYmFyKTtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhbmFseXplIGJ1dHRvblxuICAgICAgICAgICAgY29uc3QgYW5hbHl6ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgICAgICBhbmFseXplQnV0dG9uLmNsYXNzTmFtZSA9IFwidmliZXdyaXRlLWJ1dHRvblwiO1xuICAgICAgICAgICAgYW5hbHl6ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiQW5hbHl6ZVwiO1xuICAgICAgICAgICAgYW5hbHl6ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYW5hbHl6ZURvY3VtZW50KTtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBmZWVkYmFjayBidXR0b25cbiAgICAgICAgICAgIGNvbnN0IGZlZWRiYWNrQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgICAgIGZlZWRiYWNrQnV0dG9uLmNsYXNzTmFtZSA9IFwidmliZXdyaXRlLWJ1dHRvblwiO1xuICAgICAgICAgICAgZmVlZGJhY2tCdXR0b24udGV4dENvbnRlbnQgPSBcIkFkZCBGZWVkYmFja1wiO1xuICAgICAgICAgICAgZmVlZGJhY2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFkZEZlZWRiYWNrKTtcbiAgICAgICAgICAgIC8vIEFkZCBidXR0b25zIHRvIHRoZSB0b29sYmFyXG4gICAgICAgICAgICB2aWJlV3JpdGVUb29sYmFyLmFwcGVuZENoaWxkKHRvZ2dsZVNpZGViYXJCdXR0b24pO1xuICAgICAgICAgICAgdmliZVdyaXRlVG9vbGJhci5hcHBlbmRDaGlsZChhbmFseXplQnV0dG9uKTtcbiAgICAgICAgICAgIHZpYmVXcml0ZVRvb2xiYXIuYXBwZW5kQ2hpbGQoZmVlZGJhY2tCdXR0b24pO1xuICAgICAgICAgICAgLy8gSW5zZXJ0IG91ciB0b29sYmFyIGJlZm9yZSB0aGUgc2hhcmUgYnV0dG9uXG4gICAgICAgICAgICB0b29sYmFyQ29udGFpbmVyLmluc2VydEJlZm9yZSh2aWJlV3JpdGVUb29sYmFyLCB0b29sYmFyQ29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJWaWJlV3JpdGUgVUkgYWRkZWQgc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWRkaW5nIFZpYmVXcml0ZSBVSTpcIiwgZXJyb3IpO1xuICAgIH1cbn1cbi8vIEZ1bmN0aW9uIHRvIHRvZ2dsZSB0aGUgc2lkZWJhclxuZnVuY3Rpb24gdG9nZ2xlU2lkZWJhcigpIHtcbiAgICBjb25zdCBzaWRlYmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWJld3JpdGUtc2lkZWJhclwiKTtcbiAgICBpZiAoc2lkZWJhcikge1xuICAgICAgICBzaWRlYmFyLmNsYXNzTGlzdC50b2dnbGUoXCJvcGVuXCIpO1xuICAgIH1cbn1cbi8vIEZ1bmN0aW9uIHRvIGFuYWx5emUgdGhlIGRvY3VtZW50IGFuZCBzaG93IHN1Z2dlc3Rpb25zXG5mdW5jdGlvbiBhbmFseXplRG9jdW1lbnQoKSB7XG4gICAgdmFyIF9hO1xuICAgIC8vIE1ha2Ugc3VyZSB0aGUgc2lkZWJhciBpcyBvcGVuXG4gICAgY29uc3Qgc2lkZWJhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmliZXdyaXRlLXNpZGViYXJcIik7XG4gICAgaWYgKHNpZGViYXIgJiYgIXNpZGViYXIuY2xhc3NMaXN0LmNvbnRhaW5zKFwib3BlblwiKSkge1xuICAgICAgICBzaWRlYmFyLmNsYXNzTGlzdC5hZGQoXCJvcGVuXCIpO1xuICAgIH1cbiAgICAvLyBTZW5kIHRoZSBhbmFseXplIG1lc3NhZ2UgZGlyZWN0bHkgdG8gdGhlIHNpZGViYXIgaWZyYW1lXG4gICAgY29uc3Qgc2lkZWJhcklmcmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdmliZXdyaXRlLXNpZGViYXIgaWZyYW1lXCIpO1xuICAgIGlmIChzaWRlYmFySWZyYW1lKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiU2VuZGluZyBBTkFMWVpFX0RPQ1VNRU5UIHRvIHNpZGViYXIgaWZyYW1lXCIpO1xuICAgICAgICAoX2EgPSBzaWRlYmFySWZyYW1lLmNvbnRlbnRXaW5kb3cpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wb3N0TWVzc2FnZSh7IHR5cGU6IFwiQU5BTFlaRV9ET0NVTUVOVFwiIH0sIFwiKlwiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDb3VsZCBub3QgZmluZCBzaWRlYmFyIGlmcmFtZVwiKTtcbiAgICAgICAgLy8gRmFsbGJhY2sgdG8gc2VuZGluZyB2aWEgY2hyb21lIHJ1bnRpbWUgbWVzc2FnaW5nXG4gICAgICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHsgdHlwZTogXCJBTkFMWVpFX0RPQ1VNRU5UXCIgfSk7XG4gICAgfVxufVxuLy8gRnVuY3Rpb24gdG8gYWRkIGZlZWRiYWNrIHRvIHNlbGVjdGVkIHRleHRcbmZ1bmN0aW9uIGFkZEZlZWRiYWNrKCkge1xuICAgIC8vIEdldCB0aGUgc2VsZWN0ZWQgdGV4dFxuICAgIGNvbnN0IHNlbGVjdGVkVGV4dCA9IEdvb2dsZURvY3NBUEkuZ2V0U2VsZWN0ZWRUZXh0KCk7XG4gICAgaWYgKCFzZWxlY3RlZFRleHQpIHtcbiAgICAgICAgYWxlcnQoXCJQbGVhc2Ugc2VsZWN0IHNvbWUgdGV4dCB0byBnaXZlIGZlZWRiYWNrIG9uLlwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBPcGVuIHRoZSBzaWRlYmFyXG4gICAgY29uc3Qgc2lkZWJhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmliZXdyaXRlLXNpZGViYXJcIik7XG4gICAgaWYgKHNpZGViYXIgJiYgIXNpZGViYXIuY2xhc3NMaXN0LmNvbnRhaW5zKFwib3BlblwiKSkge1xuICAgICAgICBzaWRlYmFyLmNsYXNzTGlzdC5hZGQoXCJvcGVuXCIpO1xuICAgIH1cbiAgICAvLyBTZW5kIGEgbWVzc2FnZSB0byB0aGUgc2lkZWJhciB0byBhbmFseXplIHRoZSBzZWxlY3RlZCB0ZXh0XG4gICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiBcIkNIQVRfUkVRVUVTVFwiLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBtZXNzYWdlOiBgUGxlYXNlIHJldmlldyBhbmQgaW1wcm92ZSB0aGUgZm9sbG93aW5nIHRleHQ6IFwiJHtzZWxlY3RlZFRleHR9XCJgLFxuICAgICAgICAgICAgc2VsZWN0ZWRUZXh0LFxuICAgICAgICB9LFxuICAgIH0pO1xufVxuLy8gU2V0IHVwIG1lc3NhZ2UgaGFuZGxlcnNcbmZ1bmN0aW9uIHNldHVwTWVzc2FnZUhhbmRsZXJzKCkge1xuICAgIGNocm9tZS5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcigobWVzc2FnZSwgc2VuZGVyLCBzZW5kUmVzcG9uc2UpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkNvbnRlbnQgc2NyaXB0IHJlY2VpdmVkIG1lc3NhZ2U6XCIsIG1lc3NhZ2UpO1xuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2UudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIlRPR0dMRV9TSURFQkFSXCI6XG4gICAgICAgICAgICAgICAgdG9nZ2xlU2lkZWJhcigpO1xuICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiUkVMT0FEX1NFVFRJTkdTXCI6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZWxvYWRpbmcgc2V0dGluZ3MgaW4gY29udGVudCBzY3JpcHRcIik7XG4gICAgICAgICAgICAgICAgLy8gRm9yd2FyZCB0aGUgbWVzc2FnZSB0byB0aGUgc2lkZWJhciBpZnJhbWVcbiAgICAgICAgICAgICAgICBjb25zdCBzaWRlYmFySWZyYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN2aWJld3JpdGUtc2lkZWJhciBpZnJhbWVcIik7XG4gICAgICAgICAgICAgICAgaWYgKHNpZGViYXJJZnJhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgKF9hID0gc2lkZWJhcklmcmFtZS5jb250ZW50V2luZG93KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucG9zdE1lc3NhZ2UoeyB0eXBlOiBcIlJFTE9BRF9TRVRUSU5HU1wiIH0sIFwiKlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJHRVRfU0VMRUNURURfVEVYVFwiOlxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkVGV4dCA9IEdvb2dsZURvY3NBUEkuZ2V0U2VsZWN0ZWRUZXh0KCk7XG4gICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogc2VsZWN0ZWRUZXh0IH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkdFVF9ET0NVTUVOVF9DT05URU5UXCI6XG4gICAgICAgICAgICAgICAgY29uc3QgZG9jdW1lbnRDb250ZW50ID0gR29vZ2xlRG9jc0FQSS5nZXREb2N1bWVudENvbnRlbnQoKTtcbiAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiB0cnVlLCBkYXRhOiBkb2N1bWVudENvbnRlbnQgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiQUREX0NPTU1FTlRcIjpcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5wYXlsb2FkICYmIG1lc3NhZ2UucGF5bG9hZC5jb21tZW50VGV4dCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWNjZXNzID0gR29vZ2xlRG9jc0FQSS5hZGRDb21tZW50KG1lc3NhZ2UucGF5bG9hZC5jb21tZW50VGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3MgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogXCJObyBjb21tZW50IHRleHQgcHJvdmlkZWRcIixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2Uoe1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IFwiVW5rbm93biBtZXNzYWdlIHR5cGVcIixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gSW5kaWNhdGVzIHdlJ2xsIHJlc3BvbmQgYXN5bmNocm9ub3VzbHlcbiAgICB9KTtcbn1cbi8vIEhlbHBlciBmdW5jdGlvbiB0byB3YWl0IGZvciBhbiBlbGVtZW50IHRvIGJlIHByZXNlbnQgaW4gdGhlIERPTVxuZnVuY3Rpb24gd2FpdEZvckVsZW1lbnQoc2VsZWN0b3IsIHRpbWVvdXQgPSAxMDAwMCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrRWxlbWVudCgpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKERhdGUubm93KCkgLSBzdGFydFRpbWUgPiB0aW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgVGltZW91dCB3YWl0aW5nIGZvciBlbGVtZW50OiAke3NlbGVjdG9yfWApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoY2hlY2tFbGVtZW50LCAxMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNoZWNrRWxlbWVudCgpO1xuICAgIH0pO1xufVxuIl0sIm5hbWVzIjpbIkdvb2dsZURvY3NBUEkiLCJnZXREb2N1bWVudENvbnRlbnQiLCJ0aGlzIiwiaXNJbkdvb2dsZURvY3MiLCJjb25zb2xlIiwiZXJyb3IiLCJwYXJhZ3JhcGhzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwiZG9jdW1lbnRDb250ZW50IiwiQXJyYXkiLCJmcm9tIiwibWFwIiwiZWxlbWVudCIsInRleHRDb250ZW50Iiwiam9pbiIsIndhcm4iLCJsb2ciLCJnZXRTZWxlY3RlZFRleHQiLCJ3aW5kb3ciLCJnZXRTZWxlY3Rpb24iLCJzZWxlY3Rpb24iLCJ0b1N0cmluZyIsImFkZENvbW1lbnQiLCJjb21tZW50VGV4dCIsImNvbW1lbnRCdXR0b24iLCJxdWVyeVNlbGVjdG9yIiwiY2xpY2siLCJzZXRUaW1lb3V0IiwiX2EiLCJfYiIsImNvbW1lbnRCb3giLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJIVE1MVGV4dEFyZWFFbGVtZW50IiwicHJvdG90eXBlIiwic2V0IiwiY2FsbCIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsImJ1YmJsZXMiLCJjb21tZW50U3VibWl0QnV0dG9uIiwiZmluZCIsImJ1dHRvbiIsImxvY2F0aW9uIiwiaHJlZiIsInN0YXJ0c1dpdGgiLCJnZXREb2N1bWVudFRpdGxlIiwidGl0bGVFbGVtZW50IiwidG9nZ2xlU2lkZWJhciIsInNpZGViYXIiLCJnZXRFbGVtZW50QnlJZCIsImNsYXNzTGlzdCIsInRvZ2dsZSIsImFuYWx5emVEb2N1bWVudCIsImNvbnRhaW5zIiwiYWRkIiwic2lkZWJhcklmcmFtZSIsImNvbnRlbnRXaW5kb3ciLCJwb3N0TWVzc2FnZSIsInR5cGUiLCJjaHJvbWUiLCJydW50aW1lIiwic2VuZE1lc3NhZ2UiLCJhZGRGZWVkYmFjayIsInNlbGVjdGVkVGV4dCIsImFsZXJ0IiwicGF5bG9hZCIsIm1lc3NhZ2UiLCJ2aWJlV3JpdGVJbmplY3RlZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsImdlbmVyYXRvciIsInNlbGVjdG9yIiwidGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsImNoZWNrRWxlbWVudCIsIkVycm9yIiwid2FpdEZvckVsZW1lbnQiLCJzaWRlYmFyQ29udGFpbmVyIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImlkIiwiYm9keSIsImFwcGVuZENoaWxkIiwic3R5bGUiLCJ3aWR0aCIsImhlaWdodCIsImJvcmRlciIsInNyYyIsImdldFVSTCIsInRvb2xiYXJDb250YWluZXIiLCJ2aWJlV3JpdGVUb29sYmFyIiwiZGlzcGxheSIsImFsaWduSXRlbXMiLCJ0b2dnbGVTaWRlYmFyQnV0dG9uIiwiYmFja2dyb3VuZENvbG9yIiwiY29sb3IiLCJwYWRkaW5nIiwiYm9yZGVyUmFkaXVzIiwiY3Vyc29yIiwibWFyZ2luUmlnaHQiLCJhbmFseXplQnV0dG9uIiwiZmVlZGJhY2tCdXR0b24iLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwiYWRkVmliZVdyaXRlVUkiLCJvbk1lc3NhZ2UiLCJhZGRMaXN0ZW5lciIsInNlbmRlciIsInNlbmRSZXNwb25zZSIsInN1Y2Nlc3MiLCJkYXRhIiwiUCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5Il0sInNvdXJjZVJvb3QiOiIifQ==