(()=>{"use strict";class e{static startDebugLogging(){null===this.debugInterval&&(console.log("Starting GoogleDocsAPI debug logging"),this.debugInterval=window.setInterval((()=>{var e;const t=Date.now();if(t-this.lastDebugTime>5e3){this.lastDebugTime=t;const n=this.isInGoogleDocs(),o=document.querySelectorAll(".kix-paragraphrenderer");if(console.log(`[GoogleDocsAPI Debug] isInGoogleDocs: ${n}`),console.log(`[GoogleDocsAPI Debug] paragraphs found: ${(null==o?void 0:o.length)||0}`),o&&o.length>0){const t=null===(e=o[0].textContent)||void 0===e?void 0:e.substring(0,50);console.log(`[GoogleDocsAPI Debug] First paragraph starts with: ${t}...`)}}}),1e3))}static stopDebugLogging(){null!==this.debugInterval&&(window.clearInterval(this.debugInterval),this.debugInterval=null,console.log("Stopped GoogleDocsAPI debug logging"))}static isInGoogleDocs(){try{return"docs.google.com"===window.location.hostname&&(null!==document.querySelector(".kix-paragraphrenderer")||null!==document.querySelector(".docs-editor"))}catch(e){return console.error("Error checking if in Google Docs:",e),!1}}static getDocumentContent(e=3){try{if(console.log("Attempting to retrieve document content..."),!this.isInGoogleDocs())return console.error("Not in a Google Docs document"),"";const t=document.querySelectorAll(".kix-paragraphrenderer");if(!t||0===t.length){if(console.error("Could not find paragraph elements in document, DOM might not be ready"),this.startDebugLogging(),e>0){console.log(`Trying alternative selectors (${e} retries left)`);const t=[".kix-page-content-wrapper",".docs-texteventtarget-iframe",".docs-editor-container"];for(const e of t){const t=document.querySelectorAll(e);if(t&&t.length>0){console.log(`Found ${t.length} elements with selector ${e}`);const n=Array.from(t).map((e=>e.textContent)).filter(Boolean).join("\n");if(n)return console.log(`Retrieved ${n.length} characters using alternative selector`),n}}return new Promise((t=>{setTimeout((()=>{t(this.getDocumentContent(e-1))}),500)}))}return""}const n=Array.from(t).map((e=>e.textContent)).join("\n");return n?this.stopDebugLogging():(console.warn("Document content appears to be empty"),this.startDebugLogging()),console.log(`Retrieved ${n.length} characters from document`),n}catch(e){return console.error("Error getting document content:",e),this.startDebugLogging(),""}}static forceGetDocumentContent(){try{console.log("Attempting forced document content retrieval...");try{const e=document.createElement("script");e.textContent='\n                    try {\n                        // Try to access Google Docs internal data\n                        if (window.IS_INTEGRATION_ADAPTER_RUNNING__) {\n                            // Store document text in a global variable\n                            window.vibeWriteExtractedContent = document.body.innerText || document.documentElement.innerText;\n                            console.log("Document content extracted by injected script");\n                        }\n                    } catch(e) {\n                        console.error("Injected script error:", e);\n                    }\n                ',document.head.appendChild(e),setTimeout((()=>{document.head.removeChild(e)}),500);const t=window.vibeWriteExtractedContent;if(t&&t.length>100)return console.log(`Retrieved ${t.length} characters via injected script`),t}catch(e){console.error("Script injection approach failed:",e)}const e=[".kix-paragraphrenderer",".kix-page-content-wrapper",".docs-editor-container",".kix-appview-editor",".docs-texteventtarget-iframe",".kix-canvas-tile-content",".goog-inline-block.kix-lineview-text-block","[contenteditable='true']",".docs-text-ui-cursor-blink",".kix-canvas-tile-content",".goog-inline-block"];for(const t of e){const e=document.querySelectorAll(t);if(e&&e.length>0){console.log(`Found ${e.length} elements with selector ${t}`);const n=Array.from(e).map((e=>e.textContent)).filter(Boolean).join("\n");if(n)return console.log(`Retrieved ${n.length} characters using selector ${t}`),n}}const t=document.body.textContent;return t&&t.length>100?(console.log(`Retrieved ${t.length} characters from document.body.textContent`),t):(console.error("Forced document content retrieval failed - no content found"),"")}catch(e){return console.error("Error in forced document content retrieval:",e),""}}static getSelectedText(){try{if(window.getSelection){const e=window.getSelection();if(e)return e.toString()}return""}catch(e){return console.error("Error getting selected text:",e),""}}static addComment(e){try{if(!this.getSelectedText())return console.warn("No text selected to add a comment to"),!1;const t=document.querySelector('[aria-label="Add comment"]');return t&&(t.click(),setTimeout((()=>{var t,n;const o=document.querySelector(".docos-input-textarea");o&&(null===(n=null===(t=Object.getOwnPropertyDescriptor(HTMLTextAreaElement.prototype,"value"))||void 0===t?void 0:t.set)||void 0===n||n.call(o,e),o.dispatchEvent(new Event("input",{bubbles:!0})),setTimeout((()=>{const e=Array.from(document.querySelectorAll("button")).find((e=>"Comment"===e.textContent));if(e)return e.click(),!0}),300))}),500)),!1}catch(e){return console.error("Error adding comment:",e),!1}}static isGoogleDocsUrl(e){return e.startsWith("https://docs.google.com/document/")}static getDocumentTitle(){try{const e=document.querySelector(".docs-title-input");return e&&e.textContent||"Untitled Document"}catch(e){return console.error("Error getting document title:",e),"Untitled Document"}}}e.debugInterval=null,e.lastDebugTime=0;function t(){var e;try{const t=document.createElement("div");t.className="vibewrite-sidebar-container",t.id="vibewrite-sidebar",document.body.appendChild(t),c("Sidebar container created and added to DOM",{id:t.id,className:t.className,parentElement:null===(e=t.parentElement)||void 0===e?void 0:e.tagName});const i=document.createElement("iframe");i.id="vibewrite-sidebar-iframe",i.style.width="100%",i.style.height="100%",i.style.border="none",i.allow="clipboard-read; clipboard-write",i.src=chrome.runtime.getURL("sidebar.html"),t.appendChild(i),window.vibeWriteSidebarIframe=i,i.addEventListener("load",(()=>{var e;c("Sidebar iframe loaded",{src:i.src,hasContentWindow:!!i.contentWindow,readyState:(null===(e=i.contentDocument)||void 0===e?void 0:e.readyState)||"unknown"}),i.contentWindow&&i.contentWindow.postMessage({type:"SIDEBAR_READY"},"*")}));const s=document.querySelector(".docs-titlebar-buttons");if(s){const e=document.createElement("div");e.className="vibewrite-toolbar",e.style.display="inline-flex",e.style.alignItems="center";const t=document.createElement("button");t.className="vibewrite-button",t.textContent="VibeWrite",t.style.backgroundColor="#1a73e8",t.style.color="white",t.style.padding="8px 12px",t.style.border="none",t.style.borderRadius="4px",t.style.cursor="pointer",t.style.marginRight="10px",t.addEventListener("click",n);const i=document.createElement("button");i.className="vibewrite-button",i.textContent="Analyze",i.addEventListener("click",o);const a=document.createElement("button");a.className="vibewrite-button",a.textContent="Add Feedback",a.addEventListener("click",r),e.appendChild(t),e.appendChild(i),e.appendChild(a),s.insertBefore(e,s.firstChild),c("VibeWrite UI added successfully")}}catch(e){c("Error adding VibeWrite UI:",e)}}function n(){let e=document.getElementById("vibewrite-sidebar");if(!e){c("Sidebar not found, creating it first");try{t(),e=document.getElementById("vibewrite-sidebar"),c("Sidebar created successfully:",e)}catch(e){c("Error creating sidebar:",e),alert("VibeWrite: Could not create sidebar. Please reload the page and try again.")}}if(e){const t=e.classList.contains("open");return e.classList.toggle("open"),c("Sidebar "+(t?"closed":"opened")),e.style.display="none",e.offsetHeight,e.style.display="flex",!0}return c("Failed to find or create sidebar"),!1}function o(){document.getElementById("vibewrite-sidebar")||(c("Sidebar not found, creating it first"),t());const e=document.getElementById("vibewrite-sidebar");e&&!e.classList.contains("open")&&(e.classList.add("open"),e.style.display="none",e.offsetHeight,e.style.display="flex");const n=document.getElementById("vibewrite-sidebar-iframe");(null==n?void 0:n.contentWindow)?(c("Sending ANALYZE_DOCUMENT to sidebar iframe"),n.contentWindow.postMessage({type:"ANALYZE_DOCUMENT"},"*")):(c("Could not find sidebar iframe, trying broadcast"),window.postMessage({type:"ANALYZE_DOCUMENT",source:"content-script"},"*"),chrome.runtime.sendMessage({type:"ANALYZE_DOCUMENT"}))}function r(){const t=e.getSelectedText();if(!t)return void alert("Please select some text to give feedback on.");const n=document.getElementById("vibewrite-sidebar");n&&!n.classList.contains("open")&&n.classList.add("open"),chrome.runtime.sendMessage({type:"CHAT_REQUEST",payload:{message:`Please review and improve the following text: "${t}"`,selectedText:t}})}function i(e){c("Attempting to post message to sidebar:",e);const t=document.querySelector("#vibewrite-sidebar iframe");if(null==t?void 0:t.contentWindow)return c("Found iframe inside sidebar container, posting message"),void t.contentWindow.postMessage(e,"*");const n=document.querySelector("#vibewrite-sidebar");if(null==n?void 0:n.contentWindow)return c("Found sidebar container with contentWindow, posting message"),void n.contentWindow.postMessage(e,"*");const o=[".vibewrite-sidebar-container iframe",".vibewrite-sidebar","iframe[src*='sidebar.html']","iframe"];for(const t of o){const n=document.querySelector(t);if(null==n?void 0:n.contentWindow)return c(`Found element using fallback selector "${t}", posting message`),void n.contentWindow.postMessage(e,"*")}c("Could not find sidebar iframe, broadcasting message"),window.parent&&window.parent!==window&&(c("Broadcasting message to parent window"),window.parent.postMessage(e,"*")),window.top&&window.top!==window&&window.top!==window.parent&&(c("Broadcasting message to top window"),window.top.postMessage(e,"*")),c("Could not find any suitable target for message")}function c(t,...n){const o=(new Date).toISOString().slice(11,19);console.log(`[VibeWrite Debug ${o}] ${t}:`,...n),t.includes("document content")&&function(){try{const t=document.querySelector("#vibewrite-sidebar"),n=document.querySelector("#vibewrite-sidebar iframe"),o=document.querySelectorAll(".kix-paragraphrenderer");c("DOM State",{url:window.location.href,isGoogleDocs:"docs.google.com"===window.location.hostname,sidebarExists:!!t,sidebarIframeExists:!!n,paragraphCount:o.length,bodyChildCount:document.body.childElementCount,hasEditorElement:!!document.querySelector(".docs-editor-container")});const r=e.getDocumentContent(),i=e.forceGetDocumentContent();c("Content Retrieval Test",{standardContentWorks:!!r,standardContentLength:(null==r?void 0:r.length)||0,forcedContentWorks:!!i,forcedContentLength:(null==i?void 0:i.length)||0})}catch(e){console.error("Error logging DOM state:",e)}}()}window.vibeWriteInjected?console.log("VibeWrite already injected, skipping..."):(window.vibeWriteInjected=!0,console.log("VibeWrite content script loaded"),window.addEventListener("load",(function(){return o=this,r=void 0,a=function*(){console.log("Initializing VibeWrite..."),e.isInGoogleDocs()?(yield function(e,t=1e4){return new Promise(((n,o)=>{const r=Date.now();!function i(){const c=document.querySelector(e);c?n(c):Date.now()-r>t?o(new Error(`Timeout waiting for element: ${e}`)):setTimeout(i,100)}()}))}(".docs-titlebar-buttons"),function(){c("Starting document content monitoring..."),e.startDebugLogging();let t=0;const n=setInterval((()=>{t++;try{const o=e.getDocumentContent();o?(c(`Document content monitoring: Content accessible (${o.length} chars)`),clearInterval(n),e.stopDebugLogging()):c(`Document content monitoring: No content available (check ${t}/20)`)}catch(e){c("Document content monitoring: Error accessing content",e)}t>=20&&(c("Document content monitoring: Max checks reached, stopping monitoring"),clearInterval(n))}),3e3)}(),t(),c("Setting up message handlers..."),chrome.runtime.onMessage.addListener(((t,o,r)=>{switch(c("Content script received message:",t),t.type){case"ANALYZE_DOCUMENT":c("Received ANALYZE_DOCUMENT message"),i({type:"ANALYZE_DOCUMENT"}),r({success:!0});break;case"GET_DOCUMENT_CONTENT":c("Received GET_DOCUMENT_CONTENT message from chrome.runtime");let o=e.getDocumentContent();o||(c("Standard retrieval failed, trying forced method..."),o=e.forceGetDocumentContent()),r({success:!!o,data:{content:o||""},error:o?void 0:"Could not retrieve document content"});break;case"GET_DOCUMENT_CONTENT_RELAY":console.log("Content script received relay request from background");try{const t=e.forceGetDocumentContent();c("Got document content via relay",{contentLength:(null==t?void 0:t.length)||0}),window.postMessage({type:"DOCUMENT_CONTENT_RESPONSE",content:t||"",source:"content-relay"},"*");const n=document.getElementById("vibewrite-sidebar-iframe");(null==n?void 0:n.contentWindow)&&n.contentWindow.postMessage({type:"DOCUMENT_CONTENT_RESPONSE",content:t||"",source:"content-direct"},"*"),r({success:!0})}catch(e){console.error("Error relaying document content:",e),r({success:!1,error:"Failed to relay document content"})}break;case"TOGGLE_SIDEBAR":c("Toggling sidebar visibility"),n(),r({success:!0});break;default:c("Unknown message type:",t.type),r({success:!1,error:"Unknown message type"})}return!0})),window.addEventListener("message",(t=>{c("Content script received window message:",t.data,"Source:",t.source);const n=document.querySelector("#vibewrite-sidebar");if(c("Sidebar iframe element:",n,"with contentWindow:",null==n?void 0:n.contentWindow),t.source===(null==n?void 0:n.contentWindow)||c("Message not from sidebar iframe, but processing anyway for debugging"),t.data&&"GET_DOCUMENT_CONTENT"===t.data.type){c("Processing GET_DOCUMENT_CONTENT request from sidebar");try{let t=e.getDocumentContent();if(t||(c("Standard content retrieval failed, trying forced method..."),t=e.forceGetDocumentContent()),!t)return c("Trying delayed retrieval as last resort..."),void setTimeout((()=>{i({type:"DOCUMENT_CONTENT_RESPONSE",content:e.forceGetDocumentContent()||"Empty document or content cannot be accessed"})}),1e3);i({type:"DOCUMENT_CONTENT_RESPONSE",content:t||""}),c(`Sent document content to sidebar (${(null==t?void 0:t.length)||0} characters)`)}catch(t){c("Error getting document content:",t);try{const t=e.forceGetDocumentContent();if(t)return i({type:"DOCUMENT_CONTENT_RESPONSE",content:t}),void c(`Sent emergency document content to sidebar (${t.length} characters)`)}catch(e){c("Emergency content retrieval also failed:",e)}i({type:"DOCUMENT_CONTENT_RESPONSE",error:"Failed to retrieve document content"})}}else if(t.data&&"GET_SELECTED_TEXT"===t.data.type){c("Processing GET_SELECTED_TEXT request from sidebar");try{const t=e.getSelectedText();i({type:"SELECTED_TEXT_RESPONSE",text:t||""}),c(`Sent selected text to sidebar (${(null==t?void 0:t.length)||0} characters)`)}catch(e){c("Error getting selected text:",e),i({type:"SELECTED_TEXT_RESPONSE",text:"",error:"Failed to retrieve selected text"})}}}))):console.log("Not in a Google Docs document, exiting...")},new((s=void 0)||(s=Promise))((function(e,t){function n(e){try{c(a.next(e))}catch(e){t(e)}}function i(e){try{c(a.throw(e))}catch(e){t(e)}}function c(t){var o;t.done?e(t.value):(o=t.value,o instanceof s?o:new s((function(e){e(o)}))).then(n,i)}c((a=a.apply(o,r||[])).next())}));var o,r,s,a})))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,