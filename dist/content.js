(()=>{"use strict";class e{static startDebugLogging(){null===this.debugInterval&&(console.log("Starting GoogleDocsAPI debug logging"),this.debugInterval=window.setInterval((()=>{var e;const t=Date.now();if(t-this.lastDebugTime>5e3){this.lastDebugTime=t;const n=this.isInGoogleDocs(),o=document.querySelectorAll(".kix-paragraphrenderer");if(console.log(`[GoogleDocsAPI Debug] isInGoogleDocs: ${n}`),console.log(`[GoogleDocsAPI Debug] paragraphs found: ${(null==o?void 0:o.length)||0}`),o&&o.length>0){const t=null===(e=o[0].textContent)||void 0===e?void 0:e.substring(0,50);console.log(`[GoogleDocsAPI Debug] First paragraph starts with: ${t}...`)}}}),1e3))}static stopDebugLogging(){null!==this.debugInterval&&(window.clearInterval(this.debugInterval),this.debugInterval=null,console.log("Stopped GoogleDocsAPI debug logging"))}static isInGoogleDocs(){try{return"docs.google.com"===window.location.hostname&&(null!==document.querySelector(".kix-paragraphrenderer")||null!==document.querySelector(".docs-editor"))}catch(e){return console.error("Error checking if in Google Docs:",e),!1}}static getDocumentContent(e=3){try{if(console.log("Attempting to retrieve document content..."),!this.isInGoogleDocs())return console.error("Not in a Google Docs document"),"";const t=document.querySelectorAll(".kix-paragraphrenderer");if(!t||0===t.length){if(console.error("Could not find paragraph elements in document, DOM might not be ready"),this.startDebugLogging(),e>0){console.log(`Trying alternative selectors (${e} retries left)`);const t=[".kix-page-content-wrapper",".docs-texteventtarget-iframe",".docs-editor-container"];for(const e of t){const t=document.querySelectorAll(e);if(t&&t.length>0){console.log(`Found ${t.length} elements with selector ${e}`);const n=Array.from(t).map((e=>e.textContent)).filter(Boolean).join("\n");if(n)return console.log(`Retrieved ${n.length} characters using alternative selector`),n}}return new Promise((t=>{setTimeout((()=>{t(this.getDocumentContent(e-1))}),500)}))}return""}const n=Array.from(t).map((e=>e.textContent)).join("\n");return n?this.stopDebugLogging():(console.warn("Document content appears to be empty"),this.startDebugLogging()),console.log(`Retrieved ${n.length} characters from document`),n}catch(e){return console.error("Error getting document content:",e),this.startDebugLogging(),""}}static forceGetDocumentContent(){try{console.log("Attempting forced document content retrieval...");try{const e=document.createElement("script");e.textContent='\n                    try {\n                        // Try to access Google Docs internal data\n                        if (window.IS_INTEGRATION_ADAPTER_RUNNING__) {\n                            // Store document text in a global variable\n                            window.vibeWriteExtractedContent = document.body.innerText || document.documentElement.innerText;\n                            console.log("Document content extracted by injected script");\n                        }\n                    } catch(e) {\n                        console.error("Injected script error:", e);\n                    }\n                ',document.head.appendChild(e),setTimeout((()=>{document.head.removeChild(e)}),500);const t=window.vibeWriteExtractedContent;if(t&&t.length>100)return console.log(`Retrieved ${t.length} characters via injected script`),t}catch(e){console.error("Script injection approach failed:",e)}const e=[".kix-paragraphrenderer",".kix-page-content-wrapper",".docs-editor-container",".kix-appview-editor",".docs-texteventtarget-iframe",".kix-canvas-tile-content",".goog-inline-block.kix-lineview-text-block","[contenteditable='true']",".docs-text-ui-cursor-blink",".kix-canvas-tile-content",".goog-inline-block"];for(const t of e){const e=document.querySelectorAll(t);if(e&&e.length>0){console.log(`Found ${e.length} elements with selector ${t}`);const n=Array.from(e).map((e=>e.textContent)).filter(Boolean).join("\n");if(n)return console.log(`Retrieved ${n.length} characters using selector ${t}`),n}}const t=document.body.textContent;return t&&t.length>100?(console.log(`Retrieved ${t.length} characters from document.body.textContent`),t):(console.error("Forced document content retrieval failed - no content found"),"")}catch(e){return console.error("Error in forced document content retrieval:",e),""}}static getSelectedText(){try{if(window.getSelection){const e=window.getSelection();if(e)return e.toString()}return""}catch(e){return console.error("Error getting selected text:",e),""}}static addComment(e){try{if(!this.getSelectedText())return console.warn("No text selected to add a comment to"),!1;const t=document.querySelector('[aria-label="Add comment"]');return t&&(t.click(),setTimeout((()=>{var t,n;const o=document.querySelector(".docos-input-textarea");o&&(null===(n=null===(t=Object.getOwnPropertyDescriptor(HTMLTextAreaElement.prototype,"value"))||void 0===t?void 0:t.set)||void 0===n||n.call(o,e),o.dispatchEvent(new Event("input",{bubbles:!0})),setTimeout((()=>{const e=Array.from(document.querySelectorAll("button")).find((e=>"Comment"===e.textContent));if(e)return e.click(),!0}),300))}),500)),!1}catch(e){return console.error("Error adding comment:",e),!1}}static isGoogleDocsUrl(e){return e.startsWith("https://docs.google.com/document/")}static getDocumentTitle(){try{const e=document.querySelector(".docs-title-input");return e&&e.textContent||"Untitled Document"}catch(e){return console.error("Error getting document title:",e),"Untitled Document"}}}e.debugInterval=null,e.lastDebugTime=0;function t(){const e=document.getElementById("vibewrite-sidebar");e&&e.classList.toggle("open")}function n(){var e;const t=document.getElementById("vibewrite-sidebar");t&&!t.classList.contains("open")&&t.classList.add("open");const n=document.querySelector("#vibewrite-sidebar iframe");n?(i("Sending ANALYZE_DOCUMENT to sidebar iframe"),null===(e=n.contentWindow)||void 0===e||e.postMessage({type:"ANALYZE_DOCUMENT"},"*")):(i("Could not find sidebar iframe"),chrome.runtime.sendMessage({type:"ANALYZE_DOCUMENT"}))}function o(){const t=e.getSelectedText();if(!t)return void alert("Please select some text to give feedback on.");const n=document.getElementById("vibewrite-sidebar");n&&!n.classList.contains("open")&&n.classList.add("open"),chrome.runtime.sendMessage({type:"CHAT_REQUEST",payload:{message:`Please review and improve the following text: "${t}"`,selectedText:t}})}function r(e){i("Attempting to post message to sidebar:",e);const t=document.querySelector("#vibewrite-sidebar iframe");if(null==t?void 0:t.contentWindow)return i("Found iframe inside sidebar container, posting message"),void t.contentWindow.postMessage(e,"*");const n=document.querySelector("#vibewrite-sidebar");if(null==n?void 0:n.contentWindow)return i("Found sidebar container with contentWindow, posting message"),void n.contentWindow.postMessage(e,"*");const o=[".vibewrite-sidebar-container iframe",".vibewrite-sidebar","iframe[src*='sidebar.html']","iframe"];for(const t of o){const n=document.querySelector(t);if(null==n?void 0:n.contentWindow)return i(`Found element using fallback selector "${t}", posting message`),void n.contentWindow.postMessage(e,"*")}i("Could not find sidebar iframe, broadcasting message"),window.parent&&window.parent!==window&&(i("Broadcasting message to parent window"),window.parent.postMessage(e,"*")),window.top&&window.top!==window&&window.top!==window.parent&&(i("Broadcasting message to top window"),window.top.postMessage(e,"*")),i("Could not find any suitable target for message")}function i(t,...n){const o=(new Date).toISOString().slice(11,19);console.log(`[VibeWrite Debug ${o}] ${t}:`,...n),t.includes("document content")&&function(){try{const t=document.querySelector("#vibewrite-sidebar"),n=document.querySelector("#vibewrite-sidebar iframe"),o=document.querySelectorAll(".kix-paragraphrenderer");i("DOM State",{url:window.location.href,isGoogleDocs:"docs.google.com"===window.location.hostname,sidebarExists:!!t,sidebarIframeExists:!!n,paragraphCount:o.length,bodyChildCount:document.body.childElementCount,hasEditorElement:!!document.querySelector(".docs-editor-container")});const r=e.getDocumentContent(),c=e.forceGetDocumentContent();i("Content Retrieval Test",{standardContentWorks:!!r,standardContentLength:(null==r?void 0:r.length)||0,forcedContentWorks:!!c,forcedContentLength:(null==c?void 0:c.length)||0})}catch(e){console.error("Error logging DOM state:",e)}}()}window.vibeWriteInjected?console.log("VibeWrite already injected, skipping..."):(window.vibeWriteInjected=!0,console.log("VibeWrite content script loaded"),window.addEventListener("load",(function(){return c=this,s=void 0,d=function*(){console.log("Initializing VibeWrite..."),e.isInGoogleDocs()?(yield function(e,t=1e4){return new Promise(((n,o)=>{const r=Date.now();!function i(){const c=document.querySelector(e);c?n(c):Date.now()-r>t?o(new Error(`Timeout waiting for element: ${e}`)):setTimeout(i,100)}()}))}(".docs-titlebar-buttons"),function(){i("Starting document content monitoring..."),e.startDebugLogging();let t=0;const n=setInterval((()=>{t++;try{const o=e.getDocumentContent();o?(i(`Document content monitoring: Content accessible (${o.length} chars)`),clearInterval(n),e.stopDebugLogging()):i(`Document content monitoring: No content available (check ${t}/20)`)}catch(e){i("Document content monitoring: Error accessing content",e)}t>=20&&(i("Document content monitoring: Max checks reached, stopping monitoring"),clearInterval(n))}),3e3)}(),function(){var e;try{const r=document.createElement("div");r.className="vibewrite-sidebar-container",r.id="vibewrite-sidebar",document.body.appendChild(r),i("Sidebar container created and added to DOM",{id:r.id,className:r.className,parentElement:null===(e=r.parentElement)||void 0===e?void 0:e.tagName});const c=document.createElement("iframe");c.id="vibewrite-sidebar-iframe",c.style.width="100%",c.style.height="100%",c.style.border="none",c.allow="clipboard-read; clipboard-write",c.src=chrome.runtime.getURL("sidebar.html"),r.appendChild(c),window.vibeWriteSidebarIframe=c,c.addEventListener("load",(()=>{var e;i("Sidebar iframe loaded",{src:c.src,hasContentWindow:!!c.contentWindow,readyState:(null===(e=c.contentDocument)||void 0===e?void 0:e.readyState)||"unknown"})}));const s=document.querySelector(".docs-titlebar-buttons");if(s){const e=document.createElement("div");e.className="vibewrite-toolbar",e.style.display="inline-flex",e.style.alignItems="center";const r=document.createElement("button");r.className="vibewrite-button",r.textContent="VibeWrite",r.style.backgroundColor="#1a73e8",r.style.color="white",r.style.padding="8px 12px",r.style.border="none",r.style.borderRadius="4px",r.style.cursor="pointer",r.style.marginRight="10px",r.addEventListener("click",t);const c=document.createElement("button");c.className="vibewrite-button",c.textContent="Analyze",c.addEventListener("click",n);const a=document.createElement("button");a.className="vibewrite-button",a.textContent="Add Feedback",a.addEventListener("click",o),e.appendChild(r),e.appendChild(c),e.appendChild(a),s.insertBefore(e,s.firstChild),i("VibeWrite UI added successfully")}}catch(e){i("Error adding VibeWrite UI:",e)}}(),i("Setting up message handlers..."),chrome.runtime.onMessage.addListener(((t,n,o)=>{switch(i("Content script received message:",t),t.type){case"ANALYZE_DOCUMENT":i("Received ANALYZE_DOCUMENT message"),r({type:"ANALYZE_DOCUMENT"}),o({success:!0});break;case"GET_DOCUMENT_CONTENT":i("Received GET_DOCUMENT_CONTENT message from chrome.runtime");let n=e.getDocumentContent();n||(i("Standard retrieval failed, trying forced method..."),n=e.forceGetDocumentContent()),o({success:!!n,data:{content:n||""},error:n?void 0:"Could not retrieve document content"});break;case"GET_DOCUMENT_CONTENT_RELAY":console.log("Content script received relay request from background");try{const t=e.forceGetDocumentContent();i("Got document content via relay",{contentLength:(null==t?void 0:t.length)||0}),window.postMessage({type:"DOCUMENT_CONTENT_RESPONSE",content:t||"",source:"content-relay"},"*");const n=document.getElementById("vibewrite-sidebar-iframe");(null==n?void 0:n.contentWindow)&&n.contentWindow.postMessage({type:"DOCUMENT_CONTENT_RESPONSE",content:t||"",source:"content-direct"},"*"),o({success:!0})}catch(e){console.error("Error relaying document content:",e),o({success:!1,error:"Failed to relay document content"})}break;default:i("Unknown message type:",t.type),o({success:!1,error:"Unknown message type"})}return!0})),window.addEventListener("message",(t=>{i("Content script received window message:",t.data,"Source:",t.source);const n=document.querySelector("#vibewrite-sidebar");if(i("Sidebar iframe element:",n,"with contentWindow:",null==n?void 0:n.contentWindow),t.source===(null==n?void 0:n.contentWindow)||i("Message not from sidebar iframe, but processing anyway for debugging"),t.data&&"GET_DOCUMENT_CONTENT"===t.data.type){i("Processing GET_DOCUMENT_CONTENT request from sidebar");try{let t=e.getDocumentContent();if(t||(i("Standard content retrieval failed, trying forced method..."),t=e.forceGetDocumentContent()),!t)return i("Trying delayed retrieval as last resort..."),void setTimeout((()=>{r({type:"DOCUMENT_CONTENT_RESPONSE",content:e.forceGetDocumentContent()||"Empty document or content cannot be accessed"})}),1e3);r({type:"DOCUMENT_CONTENT_RESPONSE",content:t||""}),i(`Sent document content to sidebar (${(null==t?void 0:t.length)||0} characters)`)}catch(t){i("Error getting document content:",t);try{const t=e.forceGetDocumentContent();if(t)return r({type:"DOCUMENT_CONTENT_RESPONSE",content:t}),void i(`Sent emergency document content to sidebar (${t.length} characters)`)}catch(e){i("Emergency content retrieval also failed:",e)}r({type:"DOCUMENT_CONTENT_RESPONSE",error:"Failed to retrieve document content"})}}else if(t.data&&"GET_SELECTED_TEXT"===t.data.type){i("Processing GET_SELECTED_TEXT request from sidebar");try{const t=e.getSelectedText();r({type:"SELECTED_TEXT_RESPONSE",text:t||""}),i(`Sent selected text to sidebar (${(null==t?void 0:t.length)||0} characters)`)}catch(e){i("Error getting selected text:",e),r({type:"SELECTED_TEXT_RESPONSE",text:"",error:"Failed to retrieve selected text"})}}}))):console.log("Not in a Google Docs document, exiting...")},new((a=void 0)||(a=Promise))((function(e,t){function n(e){try{r(d.next(e))}catch(e){t(e)}}function o(e){try{r(d.throw(e))}catch(e){t(e)}}function r(t){var r;t.done?e(t.value):(r=t.value,r instanceof a?r:new a((function(e){e(r)}))).then(n,o)}r((d=d.apply(c,s||[])).next())}));var c,s,a,d})))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UyxJQUFNQyxFQUFLeEQsRUFBVXlELEtBQUtGLEdBQVMsQ0FBRSxNQUFPNUksR0FBS3VGLEVBQU92RixFQUFJLENBQUUsQ0FDMUYsU0FBUytJLEVBQVNILEdBQVMsSUFBTUMsRUFBS3hELEVBQWlCLE1BQUV1RCxHQUFTLENBQUUsTUFBTzVJLEdBQUt1RixFQUFPdkYsRUFBSSxDQUFFLENBQzdGLFNBQVM2SSxFQUFLRyxHQUpsQixJQUFlSixFQUlhSSxFQUFPQyxLQUFPN0osRUFBUTRKLEVBQU9KLFFBSjFDQSxFQUl5REksRUFBT0osTUFKaERBLGFBQWlCRixFQUFJRSxFQUFRLElBQUlGLEdBQUUsU0FBVXRKLEdBQVdBLEVBQVF3SixFQUFRLEtBSWpCTSxLQUFLUCxFQUFXSSxFQUFXLENBQzdHRixHQUFNeEQsRUFBWUEsRUFBVThELE1BQU1oRSxFQUFTQyxHQUFjLEtBQUswRCxPQUNsRSxJQVB3QyxJQUFVM0QsRUFBU0MsRUFBWXNELEVBQUdyRCxDQXNDOUUsSSIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmV3cml0ZS8uL3NyYy91dGlscy9nb29nbGUtZG9jcy1hcGkudHMiLCJ3ZWJwYWNrOi8vdmliZXdyaXRlLy4vc3JjL2NvbnRlbnQvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQVBJIGZvciBpbnRlcmFjdGluZyB3aXRoIEdvb2dsZSBEb2NzXG5leHBvcnQgY2xhc3MgR29vZ2xlRG9jc0FQSSB7XG4gICAgLyoqXG4gICAgICogU3RhcnQgcGVyaW9kaWMgbG9nZ2luZyBvZiBkb2N1bWVudCBzdGF0ZVxuICAgICAqL1xuICAgIHN0YXRpYyBzdGFydERlYnVnTG9nZ2luZygpIHtcbiAgICAgICAgLy8gRG9uJ3Qgc3RhcnQgbXVsdGlwbGUgZGVidWcgaW50ZXJ2YWxzXG4gICAgICAgIGlmICh0aGlzLmRlYnVnSW50ZXJ2YWwgIT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnNvbGUubG9nKFwiU3RhcnRpbmcgR29vZ2xlRG9jc0FQSSBkZWJ1ZyBsb2dnaW5nXCIpO1xuICAgICAgICB0aGlzLmRlYnVnSW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIC8vIE9ubHkgbG9nIGV2ZXJ5IDUgc2Vjb25kcyBhdCBtb3N0IHRvIGF2b2lkIHNwYW1taW5nIHRoZSBjb25zb2xlXG4gICAgICAgICAgICBpZiAobm93IC0gdGhpcy5sYXN0RGVidWdUaW1lID4gNTAwMCkge1xuICAgICAgICAgICAgICAgIHRoaXMubGFzdERlYnVnVGltZSA9IG5vdztcbiAgICAgICAgICAgICAgICBjb25zdCBpc0luRG9jcyA9IHRoaXMuaXNJbkdvb2dsZURvY3MoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhZ3JhcGhzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5raXgtcGFyYWdyYXBocmVuZGVyZXJcIik7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtHb29nbGVEb2NzQVBJIERlYnVnXSBpc0luR29vZ2xlRG9jczogJHtpc0luRG9jc31gKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW0dvb2dsZURvY3NBUEkgRGVidWddIHBhcmFncmFwaHMgZm91bmQ6ICR7KHBhcmFncmFwaHMgPT09IG51bGwgfHwgcGFyYWdyYXBocyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYWdyYXBocy5sZW5ndGgpIHx8IDB9YCk7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFncmFwaHMgJiYgcGFyYWdyYXBocy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0UGFyYSA9IChfYSA9IHBhcmFncmFwaHNbMF0udGV4dENvbnRlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdWJzdHJpbmcoMCwgNTApO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW0dvb2dsZURvY3NBUEkgRGVidWddIEZpcnN0IHBhcmFncmFwaCBzdGFydHMgd2l0aDogJHtmaXJzdFBhcmF9Li4uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcCBwZXJpb2RpYyBsb2dnaW5nXG4gICAgICovXG4gICAgc3RhdGljIHN0b3BEZWJ1Z0xvZ2dpbmcoKSB7XG4gICAgICAgIGlmICh0aGlzLmRlYnVnSW50ZXJ2YWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuZGVidWdJbnRlcnZhbCk7XG4gICAgICAgICAgICB0aGlzLmRlYnVnSW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJTdG9wcGVkIEdvb2dsZURvY3NBUEkgZGVidWcgbG9nZ2luZ1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB3ZSdyZSBjdXJyZW50bHkgaW4gYSBHb29nbGUgRG9jcyBkb2N1bWVudCBlZGl0b3JcbiAgICAgKi9cbiAgICBzdGF0aWMgaXNJbkdvb2dsZURvY3MoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgR29vZ2xlIERvY3Mgc3BlY2lmaWMgZWxlbWVudHNcbiAgICAgICAgICAgIGNvbnN0IGlzSW5Eb2NzID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSBcImRvY3MuZ29vZ2xlLmNvbVwiICYmXG4gICAgICAgICAgICAgICAgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIua2l4LXBhcmFncmFwaHJlbmRlcmVyXCIpICE9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZG9jcy1lZGl0b3JcIikgIT09IG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuIGlzSW5Eb2NzO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGNoZWNraW5nIGlmIGluIEdvb2dsZSBEb2NzOlwiLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBlbnRpcmUgZG9jdW1lbnQgY29udGVudCBmcm9tIEdvb2dsZSBEb2NzXG4gICAgICovXG4gICAgc3RhdGljIGdldERvY3VtZW50Q29udGVudChtYXhSZXRyaWVzID0gMykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJBdHRlbXB0aW5nIHRvIHJldHJpZXZlIGRvY3VtZW50IGNvbnRlbnQuLi5cIik7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSdyZSBpbiBhIEdvb2dsZSBEb2NzIGRvY3VtZW50IGVkaXRvclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzSW5Hb29nbGVEb2NzKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTm90IGluIGEgR29vZ2xlIERvY3MgZG9jdW1lbnRcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBHZXQgYWxsIHRleHQgY29udGVudCBmcm9tIHRoZSBkb2N1bWVudFxuICAgICAgICAgICAgY29uc3QgcGFyYWdyYXBocyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIua2l4LXBhcmFncmFwaHJlbmRlcmVyXCIpO1xuICAgICAgICAgICAgaWYgKCFwYXJhZ3JhcGhzIHx8IHBhcmFncmFwaHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkIG5vdCBmaW5kIHBhcmFncmFwaCBlbGVtZW50cyBpbiBkb2N1bWVudCwgRE9NIG1pZ2h0IG5vdCBiZSByZWFkeVwiKTtcbiAgICAgICAgICAgICAgICAvLyBTdGFydCBkZWJ1ZyBsb2dnaW5nIHdoZW4gd2UgY2FuJ3QgZmluZCBwYXJhZ3JhcGggZWxlbWVudHNcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0RGVidWdMb2dnaW5nKCk7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSByZXRyaWVzIGxlZnQsIHRyeSBhIGRpZmZlcmVudCBzZWxlY3RvclxuICAgICAgICAgICAgICAgIGlmIChtYXhSZXRyaWVzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVHJ5aW5nIGFsdGVybmF0aXZlIHNlbGVjdG9ycyAoJHttYXhSZXRyaWVzfSByZXRyaWVzIGxlZnQpYCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRyeSBhbHRlcm5hdGl2ZSBzZWxlY3RvcnMgZm9yIEdvb2dsZSBEb2NzIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWx0ZXJuYXRpdmVzID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIua2l4LXBhZ2UtY29udGVudC13cmFwcGVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIi5kb2NzLXRleHRldmVudHRhcmdldC1pZnJhbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiLmRvY3MtZWRpdG9yLWNvbnRhaW5lclwiLFxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNlbGVjdG9yIG9mIGFsdGVybmF0aXZlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50cyAmJiBlbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEZvdW5kICR7ZWxlbWVudHMubGVuZ3RofSBlbGVtZW50cyB3aXRoIHNlbGVjdG9yICR7c2VsZWN0b3J9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJ5IHRvIGdldCB0aGUgY29udGVudCBmcm9tIHRoZXNlIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IEFycmF5LmZyb20oZWxlbWVudHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKGVsZW1lbnQpID0+IGVsZW1lbnQudGV4dENvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oXCJcXG5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFJldHJpZXZlZCAke2NvbnRlbnQubGVuZ3RofSBjaGFyYWN0ZXJzIHVzaW5nIGFsdGVybmF0aXZlIHNlbGVjdG9yYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBub25lIG9mIHRoZSBhbHRlcm5hdGl2ZXMgd29ya2VkLCB3YWl0IGEgYml0IGFuZCByZXRyeSB3aXRoIG9yaWdpbmFsIHNlbGVjdG9yXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLmdldERvY3VtZW50Q29udGVudChtYXhSZXRyaWVzIC0gMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRXh0cmFjdCBjb250ZW50XG4gICAgICAgICAgICBjb25zdCBkb2N1bWVudENvbnRlbnQgPSBBcnJheS5mcm9tKHBhcmFncmFwaHMpXG4gICAgICAgICAgICAgICAgLm1hcCgoZWxlbWVudCkgPT4gZWxlbWVudC50ZXh0Q29udGVudClcbiAgICAgICAgICAgICAgICAuam9pbihcIlxcblwiKTtcbiAgICAgICAgICAgIGlmICghZG9jdW1lbnRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRG9jdW1lbnQgY29udGVudCBhcHBlYXJzIHRvIGJlIGVtcHR5XCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnREZWJ1Z0xvZ2dpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIENvbnRlbnQgcmV0cmlldmVkIHN1Y2Nlc3NmdWxseSwgd2UgY2FuIHN0b3AgZGVidWcgbG9nZ2luZ1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcERlYnVnTG9nZ2luZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5sb2coYFJldHJpZXZlZCAke2RvY3VtZW50Q29udGVudC5sZW5ndGh9IGNoYXJhY3RlcnMgZnJvbSBkb2N1bWVudGApO1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50Q29udGVudDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBnZXR0aW5nIGRvY3VtZW50IGNvbnRlbnQ6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnREZWJ1Z0xvZ2dpbmcoKTtcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBkb2N1bWVudCBjb250ZW50IHdpdGhvdXQgY2hlY2tpbmcgaWYgd2UncmUgaW4gR29vZ2xlIERvY3MuXG4gICAgICogVGhpcyBpcyB1c2VkIGFzIGEgZmFsbGJhY2sgbWV0aG9kIGZvciB0aGUgbWVzc2FnZSBwYXNzaW5nIGFyY2hpdGVjdHVyZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZm9yY2VHZXREb2N1bWVudENvbnRlbnQoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkF0dGVtcHRpbmcgZm9yY2VkIGRvY3VtZW50IGNvbnRlbnQgcmV0cmlldmFsLi4uXCIpO1xuICAgICAgICAgICAgLy8gRmlyc3QgdHJ5IHRvIGluamVjdCBhIGhvb2sgZGlyZWN0bHkgaW50byB0aGUgR29vZ2xlIERvY3MgcGFnZVxuICAgICAgICAgICAgLy8gVGhpcyBhZ2dyZXNzaXZlIGFwcHJvYWNoIG1heSBoZWxwIGFjY2VzcyB0aGUgaW5uZXIgZG9jdW1lbnRcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NyaXB0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICAgICAgc2NyaXB0RWxlbWVudC50ZXh0Q29udGVudCA9IGBcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUcnkgdG8gYWNjZXNzIEdvb2dsZSBEb2NzIGludGVybmFsIGRhdGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5JU19JTlRFR1JBVElPTl9BREFQVEVSX1JVTk5JTkdfXykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RvcmUgZG9jdW1lbnQgdGV4dCBpbiBhIGdsb2JhbCB2YXJpYWJsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnZpYmVXcml0ZUV4dHJhY3RlZENvbnRlbnQgPSBkb2N1bWVudC5ib2R5LmlubmVyVGV4dCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuaW5uZXJUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJEb2N1bWVudCBjb250ZW50IGV4dHJhY3RlZCBieSBpbmplY3RlZCBzY3JpcHRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkluamVjdGVkIHNjcmlwdCBlcnJvcjpcIiwgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYDtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIC8vIFdhaXQgYSBtb21lbnQgZm9yIHNjcmlwdCB0byBleGVjdXRlXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmhlYWQucmVtb3ZlQ2hpbGQoc2NyaXB0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBzY3JpcHQgbWFuYWdlZCB0byBleHRyYWN0IGNvbnRlbnRcbiAgICAgICAgICAgICAgICBjb25zdCBleHRyYWN0ZWRDb250ZW50ID0gd2luZG93XG4gICAgICAgICAgICAgICAgICAgIC52aWJlV3JpdGVFeHRyYWN0ZWRDb250ZW50O1xuICAgICAgICAgICAgICAgIGlmIChleHRyYWN0ZWRDb250ZW50ICYmIGV4dHJhY3RlZENvbnRlbnQubGVuZ3RoID4gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBSZXRyaWV2ZWQgJHtleHRyYWN0ZWRDb250ZW50Lmxlbmd0aH0gY2hhcmFjdGVycyB2aWEgaW5qZWN0ZWQgc2NyaXB0YCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBleHRyYWN0ZWRDb250ZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlNjcmlwdCBpbmplY3Rpb24gYXBwcm9hY2ggZmFpbGVkOlwiLCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRyeSBtdWx0aXBsZSBzZWxlY3RvcnMgdG8gZmluZCBkb2N1bWVudCBjb250ZW50XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RvcnMgPSBbXG4gICAgICAgICAgICAgICAgXCIua2l4LXBhcmFncmFwaHJlbmRlcmVyXCIsXG4gICAgICAgICAgICAgICAgXCIua2l4LXBhZ2UtY29udGVudC13cmFwcGVyXCIsXG4gICAgICAgICAgICAgICAgXCIuZG9jcy1lZGl0b3ItY29udGFpbmVyXCIsXG4gICAgICAgICAgICAgICAgXCIua2l4LWFwcHZpZXctZWRpdG9yXCIsXG4gICAgICAgICAgICAgICAgXCIuZG9jcy10ZXh0ZXZlbnR0YXJnZXQtaWZyYW1lXCIsXG4gICAgICAgICAgICAgICAgXCIua2l4LWNhbnZhcy10aWxlLWNvbnRlbnRcIixcbiAgICAgICAgICAgICAgICBcIi5nb29nLWlubGluZS1ibG9jay5raXgtbGluZXZpZXctdGV4dC1ibG9ja1wiLFxuICAgICAgICAgICAgICAgIFwiW2NvbnRlbnRlZGl0YWJsZT0ndHJ1ZSddXCIsXG4gICAgICAgICAgICAgICAgXCIuZG9jcy10ZXh0LXVpLWN1cnNvci1ibGlua1wiLCAvLyBUcnkgdG8gZmluZCBjdXJzb3IgcG9zaXRpb25cbiAgICAgICAgICAgICAgICBcIi5raXgtY2FudmFzLXRpbGUtY29udGVudFwiLCAvLyBUcnkgdG8gZmluZCBjYW52YXMgZWxlbWVudHNcbiAgICAgICAgICAgICAgICBcIi5nb29nLWlubGluZS1ibG9ja1wiLCAvLyBHZW5lcmljIEdvb2dsZSBEb2NzIGVsZW1lbnRcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNlbGVjdG9yIG9mIHNlbGVjdG9ycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRzICYmIGVsZW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEZvdW5kICR7ZWxlbWVudHMubGVuZ3RofSBlbGVtZW50cyB3aXRoIHNlbGVjdG9yICR7c2VsZWN0b3J9YCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBBcnJheS5mcm9tKGVsZW1lbnRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoZWxlbWVudCkgPT4gZWxlbWVudC50ZXh0Q29udGVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKFwiXFxuXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFJldHJpZXZlZCAke2NvbnRlbnQubGVuZ3RofSBjaGFyYWN0ZXJzIHVzaW5nIHNlbGVjdG9yICR7c2VsZWN0b3J9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIGFsbCBzZWxlY3RvcnMgZmFpbCwgdHJ5IHRvIGdldCBhbnkgdGV4dCBmcm9tIHRoZSBkb2N1bWVudFxuICAgICAgICAgICAgY29uc3QgYWxsVGV4dCA9IGRvY3VtZW50LmJvZHkudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICBpZiAoYWxsVGV4dCAmJiBhbGxUZXh0Lmxlbmd0aCA+IDEwMCkge1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgdXNlIGlmIHN1YnN0YW50aWFsIGNvbnRlbnRcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgUmV0cmlldmVkICR7YWxsVGV4dC5sZW5ndGh9IGNoYXJhY3RlcnMgZnJvbSBkb2N1bWVudC5ib2R5LnRleHRDb250ZW50YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsbFRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRm9yY2VkIGRvY3VtZW50IGNvbnRlbnQgcmV0cmlldmFsIGZhaWxlZCAtIG5vIGNvbnRlbnQgZm91bmRcIik7XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiBmb3JjZWQgZG9jdW1lbnQgY29udGVudCByZXRyaWV2YWw6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgc2VsZWN0ZWQgdGV4dCBpbiBHb29nbGUgRG9jc1xuICAgICAqL1xuICAgIHN0YXRpYyBnZXRTZWxlY3RlZFRleHQoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBVc2luZyB0aGUgR29vZ2xlIERvY3Mgc2VsZWN0aW9uIGZ1bmN0aW9uYWxpdHlcbiAgICAgICAgICAgIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbi50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdldHRpbmcgc2VsZWN0ZWQgdGV4dDpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgR29vZ2xlIERvY3MgY29tbWVudCBhdCB0aGUgY3VycmVudCBzZWxlY3Rpb25cbiAgICAgKiBAcGFyYW0gY29tbWVudFRleHQgLSBUZXh0IHRvIGFkZCBhcyBhIGNvbW1lbnRcbiAgICAgKi9cbiAgICBzdGF0aWMgYWRkQ29tbWVudChjb21tZW50VGV4dCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gRmlyc3QsIG5lZWQgdG8gbWFrZSBzdXJlIHNvbWV0aGluZyBpcyBzZWxlY3RlZFxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRUZXh0ID0gdGhpcy5nZXRTZWxlY3RlZFRleHQoKTtcbiAgICAgICAgICAgIGlmICghc2VsZWN0ZWRUZXh0KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiTm8gdGV4dCBzZWxlY3RlZCB0byBhZGQgYSBjb21tZW50IHRvXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNpbXVsYXRlIGNsaWNraW5nIHRoZSBcIkFkZCBjb21tZW50XCIgYnV0dG9uIG9yIG1lbnUgaXRlbVxuICAgICAgICAgICAgY29uc3QgY29tbWVudEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1thcmlhLWxhYmVsPVwiQWRkIGNvbW1lbnRcIl0nKTtcbiAgICAgICAgICAgIGlmIChjb21tZW50QnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgY29tbWVudEJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgICAgIC8vIFdhaXQgZm9yIHRoZSBjb21tZW50IGJveCB0byBhcHBlYXJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICAgICAgLy8gRmluZCB0aGUgY29tbWVudCBpbnB1dCBib3ggYW5kIGluc2VydCBvdXIgdGV4dFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21tZW50Qm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kb2Nvcy1pbnB1dC10ZXh0YXJlYVwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1lbnRCb3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgdmFsdWUgb2YgdGhlIGNvbW1lbnQgYm94XG4gICAgICAgICAgICAgICAgICAgICAgICAoX2IgPSAoX2EgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEhUTUxUZXh0QXJlYUVsZW1lbnQucHJvdG90eXBlLCBcInZhbHVlXCIpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChjb21tZW50Qm94LCBjb21tZW50VGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIGlucHV0IGV2ZW50IHRvIGVuc3VyZSBHb29nbGUgRG9jcyByZWNvZ25pemVzIHRoZSBjaGFuZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRCb3guZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiLCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3VibWl0IHRoZSBjb21tZW50IC0gZmluZCB0aGUgXCJDb21tZW50XCIgYnV0dG9uIGFuZCBjbGljayBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tbWVudFN1Ym1pdEJ1dHRvbiA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImJ1dHRvblwiKSkuZmluZCgoYnV0dG9uKSA9PiBidXR0b24udGV4dENvbnRlbnQgPT09IFwiQ29tbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWVudFN1Ym1pdEJ1dHRvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50U3VibWl0QnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDMwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFkZGluZyBjb21tZW50OlwiLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYSBVUkwgaXMgYSBHb29nbGUgRG9jcyBkb2N1bWVudCBVUkxcbiAgICAgKi9cbiAgICBzdGF0aWMgaXNHb29nbGVEb2NzVXJsKHVybCkge1xuICAgICAgICByZXR1cm4gdXJsLnN0YXJ0c1dpdGgoXCJodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9cIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBkb2N1bWVudCdzIHRpdGxlXG4gICAgICovXG4gICAgc3RhdGljIGdldERvY3VtZW50VGl0bGUoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB0aXRsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmRvY3MtdGl0bGUtaW5wdXRcIik7XG4gICAgICAgICAgICBpZiAodGl0bGVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRpdGxlRWxlbWVudC50ZXh0Q29udGVudCB8fCBcIlVudGl0bGVkIERvY3VtZW50XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJVbnRpdGxlZCBEb2N1bWVudFwiO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdldHRpbmcgZG9jdW1lbnQgdGl0bGU6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBcIlVudGl0bGVkIERvY3VtZW50XCI7XG4gICAgICAgIH1cbiAgICB9XG59XG5Hb29nbGVEb2NzQVBJLmRlYnVnSW50ZXJ2YWwgPSBudWxsO1xuR29vZ2xlRG9jc0FQSS5sYXN0RGVidWdUaW1lID0gMDtcbiIsIi8qKlxuICogQ29udGVudCBTY3JpcHQgZm9yIFZpYmVXcml0ZSAtIEdvb2dsZSBEb2NzIEludGVncmF0aW9uXG4gKlxuICogVGhpcyBzY3JpcHQgaXMgaW5qZWN0ZWQgaW50byBHb29nbGUgRG9jcyBwYWdlcyBhbmQgaGFuZGxlczpcbiAqIC0gQWRkaW5nIFVJIGVsZW1lbnRzIHRvIHRoZSBHb29nbGUgRG9jcyBpbnRlcmZhY2VcbiAqIC0gQ3JlYXRpbmcgYW5kIG1hbmFnaW5nIHRoZSBzaWRlYmFyXG4gKiAtIENvbW11bmljYXRpbmcgd2l0aCB0aGUgR29vZ2xlIERvY3MgZG9jdW1lbnRcbiAqIC0gU2VuZGluZyBkb2N1bWVudCBjb250ZW50IHRvIHRoZSBiYWNrZ3JvdW5kIHNjcmlwdFxuICovXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmltcG9ydCB7IEdvb2dsZURvY3NBUEkgfSBmcm9tIFwiLi4vdXRpbHMvZ29vZ2xlLWRvY3MtYXBpXCI7XG4vLyBJZiBhbHJlYWR5IGluamVjdGVkLCBleGl0IGVhcmx5XG5pZiAod2luZG93LnZpYmVXcml0ZUluamVjdGVkKSB7XG4gICAgY29uc29sZS5sb2coXCJWaWJlV3JpdGUgYWxyZWFkeSBpbmplY3RlZCwgc2tpcHBpbmcuLi5cIik7XG59XG5lbHNlIHtcbiAgICB3aW5kb3cudmliZVdyaXRlSW5qZWN0ZWQgPSB0cnVlO1xuICAgIGNvbnNvbGUubG9nKFwiVmliZVdyaXRlIGNvbnRlbnQgc2NyaXB0IGxvYWRlZFwiKTtcbiAgICAvLyBJbml0aWFsaXplIFZpYmVXcml0ZSBhZnRlciB0aGUgcGFnZSBoYXMgZnVsbHkgbG9hZGVkXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGluaXRWaWJlV3JpdGUpO1xufVxuLy8gTWFpbiBpbml0aWFsaXphdGlvbiBmdW5jdGlvblxuZnVuY3Rpb24gaW5pdFZpYmVXcml0ZSgpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkluaXRpYWxpemluZyBWaWJlV3JpdGUuLi5cIik7XG4gICAgICAgIC8vIE9ubHkgcnVuIG9uIEdvb2dsZSBEb2NzIGRvY3VtZW50IHBhZ2VzXG4gICAgICAgIGlmICghR29vZ2xlRG9jc0FQSS5pc0luR29vZ2xlRG9jcygpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk5vdCBpbiBhIEdvb2dsZSBEb2NzIGRvY3VtZW50LCBleGl0aW5nLi4uXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdhaXQgZm9yIHRoZSBHb29nbGUgRG9jcyBVSSB0byBmdWxseSBsb2FkXG4gICAgICAgIHlpZWxkIHdhaXRGb3JFbGVtZW50KFwiLmRvY3MtdGl0bGViYXItYnV0dG9uc1wiKTtcbiAgICAgICAgLy8gU3RhcnQgcGVyaW9kaWMgZG9jdW1lbnQgY29udGVudCBtb25pdG9yaW5nIGZvciBkZWJ1Z2dpbmdcbiAgICAgICAgc3RhcnREb2N1bWVudE1vbml0b3JpbmcoKTtcbiAgICAgICAgLy8gQWRkIG91ciBjdXN0b20gVUkgZWxlbWVudHNcbiAgICAgICAgYWRkVmliZVdyaXRlVUkoKTtcbiAgICAgICAgLy8gU2V0IHVwIG1lc3NhZ2UgaGFuZGxpbmdcbiAgICAgICAgc2V0dXBNZXNzYWdlSGFuZGxlcnMoKTtcbiAgICB9KTtcbn1cbi8vIE1vbml0b3IgZG9jdW1lbnQgY29udGVudCBhdmFpbGFiaWxpdHlcbmZ1bmN0aW9uIHN0YXJ0RG9jdW1lbnRNb25pdG9yaW5nKCkge1xuICAgIGRlYnVnTG9nKFwiU3RhcnRpbmcgZG9jdW1lbnQgY29udGVudCBtb25pdG9yaW5nLi4uXCIpO1xuICAgIC8vIEVuYWJsZSBkZWJ1ZyBsb2dnaW5nIGluIEdvb2dsZURvY3NBUElcbiAgICBHb29nbGVEb2NzQVBJLnN0YXJ0RGVidWdMb2dnaW5nKCk7XG4gICAgLy8gQWxzbyBwZXJmb3JtIG91ciBvd24gY2hlY2sgdG8gZW5zdXJlIGRvY3VtZW50IGlzIGFjY2Vzc2libGVcbiAgICBsZXQgY2hlY2tDb3VudCA9IDA7XG4gICAgY29uc3QgbWF4Q2hlY2tzID0gMjA7XG4gICAgY29uc3QgY2hlY2tJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgY2hlY2tDb3VudCsrO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IEdvb2dsZURvY3NBUEkuZ2V0RG9jdW1lbnRDb250ZW50KCk7XG4gICAgICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgICAgICAgIGRlYnVnTG9nKGBEb2N1bWVudCBjb250ZW50IG1vbml0b3Jpbmc6IENvbnRlbnQgYWNjZXNzaWJsZSAoJHtjb250ZW50Lmxlbmd0aH0gY2hhcnMpYCk7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChjaGVja0ludGVydmFsKTtcbiAgICAgICAgICAgICAgICBHb29nbGVEb2NzQVBJLnN0b3BEZWJ1Z0xvZ2dpbmcoKTsgLy8gU3RvcCBsb2dnaW5nIG9uY2Ugd2UgY29uZmlybSBpdCB3b3Jrc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVidWdMb2coYERvY3VtZW50IGNvbnRlbnQgbW9uaXRvcmluZzogTm8gY29udGVudCBhdmFpbGFibGUgKGNoZWNrICR7Y2hlY2tDb3VudH0vJHttYXhDaGVja3N9KWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGRlYnVnTG9nKFwiRG9jdW1lbnQgY29udGVudCBtb25pdG9yaW5nOiBFcnJvciBhY2Nlc3NpbmcgY29udGVudFwiLCBlcnIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFN0b3AgY2hlY2tpbmcgYWZ0ZXIgbWF4Q2hlY2tzXG4gICAgICAgIGlmIChjaGVja0NvdW50ID49IG1heENoZWNrcykge1xuICAgICAgICAgICAgZGVidWdMb2coXCJEb2N1bWVudCBjb250ZW50IG1vbml0b3Jpbmc6IE1heCBjaGVja3MgcmVhY2hlZCwgc3RvcHBpbmcgbW9uaXRvcmluZ1wiKTtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoY2hlY2tJbnRlcnZhbCk7XG4gICAgICAgIH1cbiAgICB9LCAzMDAwKTtcbn1cbi8vIEZ1bmN0aW9uIHRvIGNyZWF0ZSBhbmQgYWRkIHRoZSBWaWJlV3JpdGUgVUkgdG8gR29vZ2xlIERvY3NcbmZ1bmN0aW9uIGFkZFZpYmVXcml0ZVVJKCkge1xuICAgIHZhciBfYTtcbiAgICB0cnkge1xuICAgICAgICAvLyBDcmVhdGUgdGhlIHNpZGViYXIgY29udGFpbmVyXG4gICAgICAgIGNvbnN0IHNpZGViYXJDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBzaWRlYmFyQ29udGFpbmVyLmNsYXNzTmFtZSA9IFwidmliZXdyaXRlLXNpZGViYXItY29udGFpbmVyXCI7XG4gICAgICAgIHNpZGViYXJDb250YWluZXIuaWQgPSBcInZpYmV3cml0ZS1zaWRlYmFyXCI7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2lkZWJhckNvbnRhaW5lcik7XG4gICAgICAgIGRlYnVnTG9nKFwiU2lkZWJhciBjb250YWluZXIgY3JlYXRlZCBhbmQgYWRkZWQgdG8gRE9NXCIsIHtcbiAgICAgICAgICAgIGlkOiBzaWRlYmFyQ29udGFpbmVyLmlkLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBzaWRlYmFyQ29udGFpbmVyLmNsYXNzTmFtZSxcbiAgICAgICAgICAgIHBhcmVudEVsZW1lbnQ6IChfYSA9IHNpZGViYXJDb250YWluZXIucGFyZW50RWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRhZ05hbWUsXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBDcmVhdGUgdGhlIHNpZGViYXIgaWZyYW1lXG4gICAgICAgIGNvbnN0IHNpZGViYXJJZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xuICAgICAgICBzaWRlYmFySWZyYW1lLmlkID0gXCJ2aWJld3JpdGUtc2lkZWJhci1pZnJhbWVcIjsgLy8gQWRkIGEgc3BlY2lmaWMgSUQgZm9yIGVhc2llciBzZWxlY3Rpb25cbiAgICAgICAgc2lkZWJhcklmcmFtZS5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgICAgICBzaWRlYmFySWZyYW1lLnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuICAgICAgICBzaWRlYmFySWZyYW1lLnN0eWxlLmJvcmRlciA9IFwibm9uZVwiO1xuICAgICAgICBzaWRlYmFySWZyYW1lLmFsbG93ID0gXCJjbGlwYm9hcmQtcmVhZDsgY2xpcGJvYXJkLXdyaXRlXCI7IC8vIEFkZCBwZXJtaXNzaW9uc1xuICAgICAgICBzaWRlYmFySWZyYW1lLnNyYyA9IGNocm9tZS5ydW50aW1lLmdldFVSTChcInNpZGViYXIuaHRtbFwiKTtcbiAgICAgICAgc2lkZWJhckNvbnRhaW5lci5hcHBlbmRDaGlsZChzaWRlYmFySWZyYW1lKTtcbiAgICAgICAgLy8gU3RvcmUgaWZyYW1lIHJlZmVyZW5jZSBpbiB3aW5kb3cgZm9yIGVhc3kgYWNjZXNzIGZyb20gYW55d2hlcmVcbiAgICAgICAgd2luZG93LnZpYmVXcml0ZVNpZGViYXJJZnJhbWUgPSBzaWRlYmFySWZyYW1lO1xuICAgICAgICAvLyBBZGQgYSBsb2FkIGV2ZW50IGxpc3RlbmVyIHRvIHZlcmlmeSB0aGUgaWZyYW1lIGxvYWRlZCBwcm9wZXJseVxuICAgICAgICBzaWRlYmFySWZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGRlYnVnTG9nKFwiU2lkZWJhciBpZnJhbWUgbG9hZGVkXCIsIHtcbiAgICAgICAgICAgICAgICBzcmM6IHNpZGViYXJJZnJhbWUuc3JjLFxuICAgICAgICAgICAgICAgIGhhc0NvbnRlbnRXaW5kb3c6ICEhc2lkZWJhcklmcmFtZS5jb250ZW50V2luZG93LFxuICAgICAgICAgICAgICAgIHJlYWR5U3RhdGU6ICgoX2EgPSBzaWRlYmFySWZyYW1lLmNvbnRlbnREb2N1bWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlYWR5U3RhdGUpIHx8IFwidW5rbm93blwiLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBBZGQgVmliZVdyaXRlIGJ1dHRvbnMgdG8gdGhlIEdvb2dsZSBEb2NzIHRvb2xiYXJcbiAgICAgICAgY29uc3QgdG9vbGJhckNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZG9jcy10aXRsZWJhci1idXR0b25zXCIpO1xuICAgICAgICBpZiAodG9vbGJhckNvbnRhaW5lcikge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGNvbnRhaW5lciBmb3Igb3VyIGJ1dHRvbnNcbiAgICAgICAgICAgIGNvbnN0IHZpYmVXcml0ZVRvb2xiYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgdmliZVdyaXRlVG9vbGJhci5jbGFzc05hbWUgPSBcInZpYmV3cml0ZS10b29sYmFyXCI7XG4gICAgICAgICAgICB2aWJlV3JpdGVUb29sYmFyLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1mbGV4XCI7XG4gICAgICAgICAgICB2aWJlV3JpdGVUb29sYmFyLnN0eWxlLmFsaWduSXRlbXMgPSBcImNlbnRlclwiOyAvLyBDcmVhdGUgdG9nZ2xlIHNpZGViYXIgYnV0dG9uXG4gICAgICAgICAgICBjb25zdCB0b2dnbGVTaWRlYmFyQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgICAgIHRvZ2dsZVNpZGViYXJCdXR0b24uY2xhc3NOYW1lID0gXCJ2aWJld3JpdGUtYnV0dG9uXCI7XG4gICAgICAgICAgICB0b2dnbGVTaWRlYmFyQnV0dG9uLnRleHRDb250ZW50ID0gXCJWaWJlV3JpdGVcIjtcbiAgICAgICAgICAgIHRvZ2dsZVNpZGViYXJCdXR0b24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjMWE3M2U4XCI7XG4gICAgICAgICAgICB0b2dnbGVTaWRlYmFyQnV0dG9uLnN0eWxlLmNvbG9yID0gXCJ3aGl0ZVwiO1xuICAgICAgICAgICAgdG9nZ2xlU2lkZWJhckJ1dHRvbi5zdHlsZS5wYWRkaW5nID0gXCI4cHggMTJweFwiO1xuICAgICAgICAgICAgdG9nZ2xlU2lkZWJhckJ1dHRvbi5zdHlsZS5ib3JkZXIgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIHRvZ2dsZVNpZGViYXJCdXR0b24uc3R5bGUuYm9yZGVyUmFkaXVzID0gXCI0cHhcIjtcbiAgICAgICAgICAgIHRvZ2dsZVNpZGViYXJCdXR0b24uc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgICAgICB0b2dnbGVTaWRlYmFyQnV0dG9uLnN0eWxlLm1hcmdpblJpZ2h0ID0gXCIxMHB4XCI7XG4gICAgICAgICAgICB0b2dnbGVTaWRlYmFyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0b2dnbGVTaWRlYmFyKTtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhbmFseXplIGJ1dHRvblxuICAgICAgICAgICAgY29uc3QgYW5hbHl6ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgICAgICBhbmFseXplQnV0dG9uLmNsYXNzTmFtZSA9IFwidmliZXdyaXRlLWJ1dHRvblwiO1xuICAgICAgICAgICAgYW5hbHl6ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiQW5hbHl6ZVwiO1xuICAgICAgICAgICAgYW5hbHl6ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYW5hbHl6ZURvY3VtZW50KTtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBmZWVkYmFjayBidXR0b25cbiAgICAgICAgICAgIGNvbnN0IGZlZWRiYWNrQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgICAgIGZlZWRiYWNrQnV0dG9uLmNsYXNzTmFtZSA9IFwidmliZXdyaXRlLWJ1dHRvblwiO1xuICAgICAgICAgICAgZmVlZGJhY2tCdXR0b24udGV4dENvbnRlbnQgPSBcIkFkZCBGZWVkYmFja1wiO1xuICAgICAgICAgICAgZmVlZGJhY2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFkZEZlZWRiYWNrKTtcbiAgICAgICAgICAgIC8vIEFkZCBidXR0b25zIHRvIHRoZSB0b29sYmFyXG4gICAgICAgICAgICB2aWJlV3JpdGVUb29sYmFyLmFwcGVuZENoaWxkKHRvZ2dsZVNpZGViYXJCdXR0b24pO1xuICAgICAgICAgICAgdmliZVdyaXRlVG9vbGJhci5hcHBlbmRDaGlsZChhbmFseXplQnV0dG9uKTtcbiAgICAgICAgICAgIHZpYmVXcml0ZVRvb2xiYXIuYXBwZW5kQ2hpbGQoZmVlZGJhY2tCdXR0b24pO1xuICAgICAgICAgICAgLy8gSW5zZXJ0IG91ciB0b29sYmFyIGJlZm9yZSB0aGUgc2hhcmUgYnV0dG9uXG4gICAgICAgICAgICB0b29sYmFyQ29udGFpbmVyLmluc2VydEJlZm9yZSh2aWJlV3JpdGVUb29sYmFyLCB0b29sYmFyQ29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgZGVidWdMb2coXCJWaWJlV3JpdGUgVUkgYWRkZWQgc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBkZWJ1Z0xvZyhcIkVycm9yIGFkZGluZyBWaWJlV3JpdGUgVUk6XCIsIGVycm9yKTtcbiAgICB9XG59XG4vLyBGdW5jdGlvbiB0byB0b2dnbGUgdGhlIHNpZGViYXJcbmZ1bmN0aW9uIHRvZ2dsZVNpZGViYXIoKSB7XG4gICAgY29uc3Qgc2lkZWJhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmliZXdyaXRlLXNpZGViYXJcIik7XG4gICAgaWYgKHNpZGViYXIpIHtcbiAgICAgICAgc2lkZWJhci5jbGFzc0xpc3QudG9nZ2xlKFwib3BlblwiKTtcbiAgICB9XG59XG4vLyBGdW5jdGlvbiB0byBhbmFseXplIHRoZSBkb2N1bWVudCBhbmQgc2hvdyBzdWdnZXN0aW9uc1xuZnVuY3Rpb24gYW5hbHl6ZURvY3VtZW50KCkge1xuICAgIHZhciBfYTtcbiAgICAvLyBNYWtlIHN1cmUgdGhlIHNpZGViYXIgaXMgb3BlblxuICAgIGNvbnN0IHNpZGViYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZpYmV3cml0ZS1zaWRlYmFyXCIpO1xuICAgIGlmIChzaWRlYmFyICYmICFzaWRlYmFyLmNsYXNzTGlzdC5jb250YWlucyhcIm9wZW5cIikpIHtcbiAgICAgICAgc2lkZWJhci5jbGFzc0xpc3QuYWRkKFwib3BlblwiKTtcbiAgICB9XG4gICAgLy8gU2VuZCB0aGUgYW5hbHl6ZSBtZXNzYWdlIGRpcmVjdGx5IHRvIHRoZSBzaWRlYmFyIGlmcmFtZVxuICAgIGNvbnN0IHNpZGViYXJJZnJhbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3ZpYmV3cml0ZS1zaWRlYmFyIGlmcmFtZVwiKTtcbiAgICBpZiAoc2lkZWJhcklmcmFtZSkge1xuICAgICAgICBkZWJ1Z0xvZyhcIlNlbmRpbmcgQU5BTFlaRV9ET0NVTUVOVCB0byBzaWRlYmFyIGlmcmFtZVwiKTtcbiAgICAgICAgKF9hID0gc2lkZWJhcklmcmFtZS5jb250ZW50V2luZG93KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucG9zdE1lc3NhZ2UoeyB0eXBlOiBcIkFOQUxZWkVfRE9DVU1FTlRcIiB9LCBcIipcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBkZWJ1Z0xvZyhcIkNvdWxkIG5vdCBmaW5kIHNpZGViYXIgaWZyYW1lXCIpO1xuICAgICAgICAvLyBGYWxsYmFjayB0byBzZW5kaW5nIHZpYSBjaHJvbWUgcnVudGltZSBtZXNzYWdpbmdcbiAgICAgICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2UoeyB0eXBlOiBcIkFOQUxZWkVfRE9DVU1FTlRcIiB9KTtcbiAgICB9XG59XG4vLyBGdW5jdGlvbiB0byBhZGQgZmVlZGJhY2sgdG8gc2VsZWN0ZWQgdGV4dFxuZnVuY3Rpb24gYWRkRmVlZGJhY2soKSB7XG4gICAgLy8gR2V0IHRoZSBzZWxlY3RlZCB0ZXh0XG4gICAgY29uc3Qgc2VsZWN0ZWRUZXh0ID0gR29vZ2xlRG9jc0FQSS5nZXRTZWxlY3RlZFRleHQoKTtcbiAgICBpZiAoIXNlbGVjdGVkVGV4dCkge1xuICAgICAgICBhbGVydChcIlBsZWFzZSBzZWxlY3Qgc29tZSB0ZXh0IHRvIGdpdmUgZmVlZGJhY2sgb24uXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIE9wZW4gdGhlIHNpZGViYXJcbiAgICBjb25zdCBzaWRlYmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWJld3JpdGUtc2lkZWJhclwiKTtcbiAgICBpZiAoc2lkZWJhciAmJiAhc2lkZWJhci5jbGFzc0xpc3QuY29udGFpbnMoXCJvcGVuXCIpKSB7XG4gICAgICAgIHNpZGViYXIuY2xhc3NMaXN0LmFkZChcIm9wZW5cIik7XG4gICAgfVxuICAgIC8vIFNlbmQgYSBtZXNzYWdlIHRvIHRoZSBzaWRlYmFyIHRvIGFuYWx5emUgdGhlIHNlbGVjdGVkIHRleHRcbiAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7XG4gICAgICAgIHR5cGU6IFwiQ0hBVF9SRVFVRVNUXCIsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBQbGVhc2UgcmV2aWV3IGFuZCBpbXByb3ZlIHRoZSBmb2xsb3dpbmcgdGV4dDogXCIke3NlbGVjdGVkVGV4dH1cImAsXG4gICAgICAgICAgICBzZWxlY3RlZFRleHQsXG4gICAgICAgIH0sXG4gICAgfSk7XG59XG4vLyBTZXQgdXAgbWVzc2FnZSBoYW5kbGVyc1xuZnVuY3Rpb24gc2V0dXBNZXNzYWdlSGFuZGxlcnMoKSB7XG4gICAgZGVidWdMb2coXCJTZXR0aW5nIHVwIG1lc3NhZ2UgaGFuZGxlcnMuLi5cIik7XG4gICAgLy8gTGlzdGVuIGZvciBtZXNzYWdlcyBmcm9tIHRoZSBleHRlbnNpb25cbiAgICBjaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1lc3NhZ2UsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGRlYnVnTG9nKFwiQ29udGVudCBzY3JpcHQgcmVjZWl2ZWQgbWVzc2FnZTpcIiwgbWVzc2FnZSk7XG4gICAgICAgIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiQU5BTFlaRV9ET0NVTUVOVFwiOlxuICAgICAgICAgICAgICAgIGRlYnVnTG9nKFwiUmVjZWl2ZWQgQU5BTFlaRV9ET0NVTUVOVCBtZXNzYWdlXCIpO1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlVG9TaWRlYmFyKHsgdHlwZTogXCJBTkFMWVpFX0RPQ1VNRU5UXCIgfSk7XG4gICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJHRVRfRE9DVU1FTlRfQ09OVEVOVFwiOlxuICAgICAgICAgICAgICAgIGRlYnVnTG9nKFwiUmVjZWl2ZWQgR0VUX0RPQ1VNRU5UX0NPTlRFTlQgbWVzc2FnZSBmcm9tIGNocm9tZS5ydW50aW1lXCIpO1xuICAgICAgICAgICAgICAgIC8vIFRyeSBzdGFuZGFyZCBtZXRob2QgZmlyc3RcbiAgICAgICAgICAgICAgICBsZXQgY29udGVudCA9IEdvb2dsZURvY3NBUEkuZ2V0RG9jdW1lbnRDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhhdCBmYWlscywgdHJ5IGZvcmNlZCByZXRyaWV2YWxcbiAgICAgICAgICAgICAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWdMb2coXCJTdGFuZGFyZCByZXRyaWV2YWwgZmFpbGVkLCB0cnlpbmcgZm9yY2VkIG1ldGhvZC4uLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IEdvb2dsZURvY3NBUEkuZm9yY2VHZXREb2N1bWVudENvbnRlbnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogISFjb250ZW50LFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IGNvbnRlbnQ6IGNvbnRlbnQgfHwgXCJcIiB9LFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogIWNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gXCJDb3VsZCBub3QgcmV0cmlldmUgZG9jdW1lbnQgY29udGVudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJHRVRfRE9DVU1FTlRfQ09OVEVOVF9SRUxBWVwiOlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ29udGVudCBzY3JpcHQgcmVjZWl2ZWQgcmVsYXkgcmVxdWVzdCBmcm9tIGJhY2tncm91bmRcIik7XG4gICAgICAgICAgICAgICAgLy8gR2V0IGNvbnRlbnQgYW5kIGJyb2FkY2FzdCBpdCB0byBhbnkgbGlzdGVuaW5nIGlmcmFtZXNcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gR29vZ2xlRG9jc0FQSS5mb3JjZUdldERvY3VtZW50Q29udGVudCgpO1xuICAgICAgICAgICAgICAgICAgICBkZWJ1Z0xvZyhcIkdvdCBkb2N1bWVudCBjb250ZW50IHZpYSByZWxheVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50TGVuZ3RoOiAoY29udGVudCA9PT0gbnVsbCB8fCBjb250ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb250ZW50Lmxlbmd0aCkgfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIEJyb2FkY2FzdCB0byBhbnkgcG90ZW50aWFsIGxpc3RlbmVyc1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJET0NVTUVOVF9DT05URU5UX1JFU1BPTlNFXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50IHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IFwiY29udGVudC1yZWxheVwiLFxuICAgICAgICAgICAgICAgICAgICB9LCBcIipcIik7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFsc28gdHJ5IHRvIHNlbmQgZGlyZWN0bHkgdG8gdGhlIGlmcmFtZSBpZiB3ZSBoYXZlIGEgcmVmZXJlbmNlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNpZGViYXJJZnJhbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZpYmV3cml0ZS1zaWRlYmFyLWlmcmFtZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNpZGViYXJJZnJhbWUgPT09IG51bGwgfHwgc2lkZWJhcklmcmFtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2lkZWJhcklmcmFtZS5jb250ZW50V2luZG93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaWRlYmFySWZyYW1lLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiRE9DVU1FTlRfQ09OVEVOVF9SRVNQT05TRVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQgfHwgXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IFwiY29udGVudC1kaXJlY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIFwiKlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHJlbGF5aW5nIGRvY3VtZW50IGNvbnRlbnQ6XCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IFwiRmFpbGVkIHRvIHJlbGF5IGRvY3VtZW50IGNvbnRlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBkZWJ1Z0xvZyhcIlVua25vd24gbWVzc2FnZSB0eXBlOlwiLCBtZXNzYWdlLnR5cGUpO1xuICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogXCJVbmtub3duIG1lc3NhZ2UgdHlwZVwiLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlOyAvLyBJbXBvcnRhbnQ6IGluZGljYXRlcyB3ZSdsbCByZXNwb25kIGFzeW5jaHJvbm91c2x5XG4gICAgfSk7IC8vIEFsc28gbGlzdGVuIGZvciBtZXNzYWdlcyBmcm9tIHRoZSBzaWRlYmFyIGlmcmFtZVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgLy8gQWNjZXB0IG1lc3NhZ2VzIGZyb20gdGhlIHNpZGViYXIgaWZyYW1lLCBidXQgbG9nIGFuZCBkZWJ1ZyB0aGVtIHJlZ2FyZGxlc3Mgb2Ygc291cmNlXG4gICAgICAgIGRlYnVnTG9nKFwiQ29udGVudCBzY3JpcHQgcmVjZWl2ZWQgd2luZG93IG1lc3NhZ2U6XCIsIGV2ZW50LmRhdGEsIFwiU291cmNlOlwiLCBldmVudC5zb3VyY2UpO1xuICAgICAgICAvLyBEZWJ1ZyBzaWRlYmFyIGlmcmFtZSBlbGVtZW50XG4gICAgICAgIGNvbnN0IHNpZGViYXJJZnJhbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3ZpYmV3cml0ZS1zaWRlYmFyXCIpO1xuICAgICAgICBkZWJ1Z0xvZyhcIlNpZGViYXIgaWZyYW1lIGVsZW1lbnQ6XCIsIHNpZGViYXJJZnJhbWUsIFwid2l0aCBjb250ZW50V2luZG93OlwiLCBzaWRlYmFySWZyYW1lID09PSBudWxsIHx8IHNpZGViYXJJZnJhbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNpZGViYXJJZnJhbWUuY29udGVudFdpbmRvdyk7XG4gICAgICAgIC8vIENoZWNrIGV2ZW50IHNvdXJjZSBidXQgZG9uJ3QgYmxvY2sgbWVzc2FnZXMgZHVyaW5nIGRldmVsb3BtZW50XG4gICAgICAgIGNvbnN0IGlzRnJvbVNpZGViYXIgPSBldmVudC5zb3VyY2UgPT09IChzaWRlYmFySWZyYW1lID09PSBudWxsIHx8IHNpZGViYXJJZnJhbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNpZGViYXJJZnJhbWUuY29udGVudFdpbmRvdyk7XG4gICAgICAgIGlmICghaXNGcm9tU2lkZWJhcikge1xuICAgICAgICAgICAgZGVidWdMb2coXCJNZXNzYWdlIG5vdCBmcm9tIHNpZGViYXIgaWZyYW1lLCBidXQgcHJvY2Vzc2luZyBhbnl3YXkgZm9yIGRlYnVnZ2luZ1wiKTtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGlzIGNvbW1lbnQgYW5kIHRoZSBuZXh0IGxpbmUgdG8gZW5mb3JjZSBzdHJpY3Qgc291cmNlIGNoZWNraW5nIGluIHByb2R1Y3Rpb25cbiAgICAgICAgICAgIC8vIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQuZGF0YSAmJiBldmVudC5kYXRhLnR5cGUgPT09IFwiR0VUX0RPQ1VNRU5UX0NPTlRFTlRcIikge1xuICAgICAgICAgICAgZGVidWdMb2coXCJQcm9jZXNzaW5nIEdFVF9ET0NVTUVOVF9DT05URU5UIHJlcXVlc3QgZnJvbSBzaWRlYmFyXCIpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBGaXJzdCB0cnkgcmVndWxhciBtZXRob2RcbiAgICAgICAgICAgICAgICBsZXQgY29udGVudCA9IEdvb2dsZURvY3NBUEkuZ2V0RG9jdW1lbnRDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhhdCBmYWlscywgdHJ5IGZvcmNlZCByZXRyaWV2YWxcbiAgICAgICAgICAgICAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWdMb2coXCJTdGFuZGFyZCBjb250ZW50IHJldHJpZXZhbCBmYWlsZWQsIHRyeWluZyBmb3JjZWQgbWV0aG9kLi4uXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gR29vZ2xlRG9jc0FQSS5mb3JjZUdldERvY3VtZW50Q29udGVudCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBzdGlsbCBkb24ndCBoYXZlIGNvbnRlbnQsIHRyeSBvbmUgbW9yZSBhcHByb2FjaCB3aXRoIGEgZGVsYXlcbiAgICAgICAgICAgICAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWdMb2coXCJUcnlpbmcgZGVsYXllZCByZXRyaWV2YWwgYXMgbGFzdCByZXNvcnQuLi5cIik7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdFJlc29ydENvbnRlbnQgPSBHb29nbGVEb2NzQVBJLmZvcmNlR2V0RG9jdW1lbnRDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZVRvU2lkZWJhcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJET0NVTUVOVF9DT05URU5UX1JFU1BPTlNFXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogbGFzdFJlc29ydENvbnRlbnQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJFbXB0eSBkb2N1bWVudCBvciBjb250ZW50IGNhbm5vdCBiZSBhY2Nlc3NlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gZWFybHksIHRoZSBkZWxheWVkIGZ1bmN0aW9uIHdpbGwgaGFuZGxlIHNlbmRpbmcgdGhlIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBTZW5kIHRoZSBjb250ZW50IGJhY2sgdG8gdGhlIHNpZGViYXJcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZVRvU2lkZWJhcih7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiRE9DVU1FTlRfQ09OVEVOVF9SRVNQT05TRVwiLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50IHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZGVidWdMb2coYFNlbnQgZG9jdW1lbnQgY29udGVudCB0byBzaWRlYmFyICgkeyhjb250ZW50ID09PSBudWxsIHx8IGNvbnRlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbnRlbnQubGVuZ3RoKSB8fCAwfSBjaGFyYWN0ZXJzKWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZGVidWdMb2coXCJFcnJvciBnZXR0aW5nIGRvY3VtZW50IGNvbnRlbnQ6XCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAvLyBUcnkgZm9yY2VkIHJldHJpZXZhbCBhcyBhIGxhc3QgcmVzb3J0XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW1lcmdlbmN5Q29udGVudCA9IEdvb2dsZURvY3NBUEkuZm9yY2VHZXREb2N1bWVudENvbnRlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVtZXJnZW5jeUNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlVG9TaWRlYmFyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIkRPQ1VNRU5UX0NPTlRFTlRfUkVTUE9OU0VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBlbWVyZ2VuY3lDb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z0xvZyhgU2VudCBlbWVyZ2VuY3kgZG9jdW1lbnQgY29udGVudCB0byBzaWRlYmFyICgke2VtZXJnZW5jeUNvbnRlbnQubGVuZ3RofSBjaGFyYWN0ZXJzKWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnTG9nKFwiRW1lcmdlbmN5IGNvbnRlbnQgcmV0cmlldmFsIGFsc28gZmFpbGVkOlwiLCBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gU2VuZCBlcnJvciBiYWNrIHRvIHRoZSBzaWRlYmFyXG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VUb1NpZGViYXIoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIkRPQ1VNRU5UX0NPTlRFTlRfUkVTUE9OU0VcIixcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IFwiRmFpbGVkIHRvIHJldHJpZXZlIGRvY3VtZW50IGNvbnRlbnRcIixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChldmVudC5kYXRhICYmIGV2ZW50LmRhdGEudHlwZSA9PT0gXCJHRVRfU0VMRUNURURfVEVYVFwiKSB7XG4gICAgICAgICAgICBkZWJ1Z0xvZyhcIlByb2Nlc3NpbmcgR0VUX1NFTEVDVEVEX1RFWFQgcmVxdWVzdCBmcm9tIHNpZGViYXJcIik7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIEdldCBzZWxlY3RlZCB0ZXh0IHVzaW5nIEdvb2dsZURvY3NBUElcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZFRleHQgPSBHb29nbGVEb2NzQVBJLmdldFNlbGVjdGVkVGV4dCgpO1xuICAgICAgICAgICAgICAgIC8vIFNlbmQgdGhlIHRleHQgYmFjayB0byB0aGUgc2lkZWJhclxuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlVG9TaWRlYmFyKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJTRUxFQ1RFRF9URVhUX1JFU1BPTlNFXCIsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHNlbGVjdGVkVGV4dCB8fCBcIlwiLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRlYnVnTG9nKGBTZW50IHNlbGVjdGVkIHRleHQgdG8gc2lkZWJhciAoJHsoc2VsZWN0ZWRUZXh0ID09PSBudWxsIHx8IHNlbGVjdGVkVGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VsZWN0ZWRUZXh0Lmxlbmd0aCkgfHwgMH0gY2hhcmFjdGVycylgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGRlYnVnTG9nKFwiRXJyb3IgZ2V0dGluZyBzZWxlY3RlZCB0ZXh0OlwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgLy8gU2VuZCBlcnJvciBiYWNrIHRvIHRoZSBzaWRlYmFyXG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VUb1NpZGViYXIoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlNFTEVDVEVEX1RFWFRfUkVTUE9OU0VcIixcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IFwiRmFpbGVkIHRvIHJldHJpZXZlIHNlbGVjdGVkIHRleHRcIixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHBvc3QgbWVzc2FnZXMgdG8gdGhlIHNpZGViYXIgaWZyYW1lXG5mdW5jdGlvbiBwb3N0TWVzc2FnZVRvU2lkZWJhcihtZXNzYWdlKSB7XG4gICAgZGVidWdMb2coXCJBdHRlbXB0aW5nIHRvIHBvc3QgbWVzc2FnZSB0byBzaWRlYmFyOlwiLCBtZXNzYWdlKTtcbiAgICAvLyBGaXJzdCB0cnkgdGhlIGRpcmVjdCBzaWRlYmFyIElEIHdpdGggaWZyYW1lXG4gICAgY29uc3Qgc2lkZWJhcklmcmFtZUluQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN2aWJld3JpdGUtc2lkZWJhciBpZnJhbWVcIik7XG4gICAgaWYgKHNpZGViYXJJZnJhbWVJbkNvbnRhaW5lciA9PT0gbnVsbCB8fCBzaWRlYmFySWZyYW1lSW5Db250YWluZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNpZGViYXJJZnJhbWVJbkNvbnRhaW5lci5jb250ZW50V2luZG93KSB7XG4gICAgICAgIGRlYnVnTG9nKFwiRm91bmQgaWZyYW1lIGluc2lkZSBzaWRlYmFyIGNvbnRhaW5lciwgcG9zdGluZyBtZXNzYWdlXCIpO1xuICAgICAgICBzaWRlYmFySWZyYW1lSW5Db250YWluZXIuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZShtZXNzYWdlLCBcIipcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gVGhlbiB0cnkgdGhlIHNpZGViYXIgY29udGFpbmVyIGl0c2VsZlxuICAgIGNvbnN0IHNpZGViYXJDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3ZpYmV3cml0ZS1zaWRlYmFyXCIpO1xuICAgIGlmIChzaWRlYmFyQ29udGFpbmVyID09PSBudWxsIHx8IHNpZGViYXJDb250YWluZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNpZGViYXJDb250YWluZXIuY29udGVudFdpbmRvdykge1xuICAgICAgICBkZWJ1Z0xvZyhcIkZvdW5kIHNpZGViYXIgY29udGFpbmVyIHdpdGggY29udGVudFdpbmRvdywgcG9zdGluZyBtZXNzYWdlXCIpO1xuICAgICAgICBzaWRlYmFyQ29udGFpbmVyLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UobWVzc2FnZSwgXCIqXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFRyeSBmYWxsYmFjayBzZWxlY3RvcnNcbiAgICBjb25zdCBmYWxsYmFja1NlbGVjdG9ycyA9IFtcbiAgICAgICAgXCIudmliZXdyaXRlLXNpZGViYXItY29udGFpbmVyIGlmcmFtZVwiLFxuICAgICAgICBcIi52aWJld3JpdGUtc2lkZWJhclwiLFxuICAgICAgICBcImlmcmFtZVtzcmMqPSdzaWRlYmFyLmh0bWwnXVwiLFxuICAgICAgICBcImlmcmFtZVwiLCAvLyBMYXN0IHJlc29ydCwgdHJ5IGFueSBpZnJhbWVcbiAgICBdO1xuICAgIGZvciAoY29uc3Qgc2VsZWN0b3Igb2YgZmFsbGJhY2tTZWxlY3RvcnMpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICBpZiAoZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlbGVtZW50LmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgICAgIGRlYnVnTG9nKGBGb3VuZCBlbGVtZW50IHVzaW5nIGZhbGxiYWNrIHNlbGVjdG9yIFwiJHtzZWxlY3Rvcn1cIiwgcG9zdGluZyBtZXNzYWdlYCk7XG4gICAgICAgICAgICBlbGVtZW50LmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UobWVzc2FnZSwgXCIqXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIElmIGFsbCBlbHNlIGZhaWxzLCBicm9hZGNhc3QgdG8gYWxsIHBvdGVudGlhbCB3aW5kb3dzXG4gICAgZGVidWdMb2coXCJDb3VsZCBub3QgZmluZCBzaWRlYmFyIGlmcmFtZSwgYnJvYWRjYXN0aW5nIG1lc3NhZ2VcIik7XG4gICAgLy8gVHJ5IHBhcmVudCBhbmQgdG9wIHdpbmRvd3MgYXMgbGFzdCByZXNvcnRcbiAgICBpZiAod2luZG93LnBhcmVudCAmJiB3aW5kb3cucGFyZW50ICE9PSB3aW5kb3cpIHtcbiAgICAgICAgZGVidWdMb2coXCJCcm9hZGNhc3RpbmcgbWVzc2FnZSB0byBwYXJlbnQgd2luZG93XCIpO1xuICAgICAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKG1lc3NhZ2UsIFwiKlwiKTtcbiAgICB9XG4gICAgaWYgKHdpbmRvdy50b3AgJiYgd2luZG93LnRvcCAhPT0gd2luZG93ICYmIHdpbmRvdy50b3AgIT09IHdpbmRvdy5wYXJlbnQpIHtcbiAgICAgICAgZGVidWdMb2coXCJCcm9hZGNhc3RpbmcgbWVzc2FnZSB0byB0b3Agd2luZG93XCIpO1xuICAgICAgICB3aW5kb3cudG9wLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIFwiKlwiKTtcbiAgICB9XG4gICAgZGVidWdMb2coXCJDb3VsZCBub3QgZmluZCBhbnkgc3VpdGFibGUgdGFyZ2V0IGZvciBtZXNzYWdlXCIpO1xufVxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHdhaXQgZm9yIGFuIGVsZW1lbnQgdG8gYmUgcHJlc2VudCBpbiB0aGUgRE9NXG5mdW5jdGlvbiB3YWl0Rm9yRWxlbWVudChzZWxlY3RvciwgdGltZW91dCA9IDEwMDAwKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tFbGVtZW50KCkge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSA+IHRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBUaW1lb3V0IHdhaXRpbmcgZm9yIGVsZW1lbnQ6ICR7c2VsZWN0b3J9YCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChjaGVja0VsZW1lbnQsIDEwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tFbGVtZW50KCk7XG4gICAgfSk7XG59XG4vLyBIZWxwZXIgZnVuY3Rpb24gZm9yIGVuaGFuY2VkIGRlYnVnIGxvZ2dpbmdcbmZ1bmN0aW9uIGRlYnVnTG9nKGNvbnRleHQsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMTEsIDE5KTsgLy8gSEg6TU06U1NcbiAgICBjb25zb2xlLmxvZyhgW1ZpYmVXcml0ZSBEZWJ1ZyAke3RpbWVzdGFtcH1dICR7Y29udGV4dH06YCwgLi4uYXJncyk7XG4gICAgLy8gQWxzbyBsb2cgRE9NIHN0YXRlIGZvciBkZWJ1Z2dpbmdcbiAgICBpZiAoY29udGV4dC5pbmNsdWRlcyhcImRvY3VtZW50IGNvbnRlbnRcIikpIHtcbiAgICAgICAgbG9nRE9NU3RhdGUoKTtcbiAgICB9XG59XG4vLyBMb2cgdGhlIGN1cnJlbnQgRE9NIHN0YXRlIGZvciBkZWJ1Z2dpbmdcbmZ1bmN0aW9uIGxvZ0RPTVN0YXRlKCkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIExvZyBET00gc3RydWN0dXJlIGluZm9ybWF0aW9uXG4gICAgICAgIGNvbnN0IHNpZGViYXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN2aWJld3JpdGUtc2lkZWJhclwiKTtcbiAgICAgICAgY29uc3Qgc2lkZWJhcklmcmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdmliZXdyaXRlLXNpZGViYXIgaWZyYW1lXCIpO1xuICAgICAgICBjb25zdCBwYXJhZ3JhcGhzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5raXgtcGFyYWdyYXBocmVuZGVyZXJcIik7XG4gICAgICAgIGRlYnVnTG9nKFwiRE9NIFN0YXRlXCIsIHtcbiAgICAgICAgICAgIHVybDogd2luZG93LmxvY2F0aW9uLmhyZWYsXG4gICAgICAgICAgICBpc0dvb2dsZURvY3M6IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSA9PT0gXCJkb2NzLmdvb2dsZS5jb21cIixcbiAgICAgICAgICAgIHNpZGViYXJFeGlzdHM6ICEhc2lkZWJhckVsZW1lbnQsXG4gICAgICAgICAgICBzaWRlYmFySWZyYW1lRXhpc3RzOiAhIXNpZGViYXJJZnJhbWUsXG4gICAgICAgICAgICBwYXJhZ3JhcGhDb3VudDogcGFyYWdyYXBocy5sZW5ndGgsXG4gICAgICAgICAgICBib2R5Q2hpbGRDb3VudDogZG9jdW1lbnQuYm9keS5jaGlsZEVsZW1lbnRDb3VudCxcbiAgICAgICAgICAgIGhhc0VkaXRvckVsZW1lbnQ6ICEhZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kb2NzLWVkaXRvci1jb250YWluZXJcIiksXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBDaGVjayBpZiBhbnkgY29udGVudCByZXRyaWV2YWwgbWV0aG9kIHdvcmtzXG4gICAgICAgIGNvbnN0IHN0YW5kYXJkQ29udGVudCA9IEdvb2dsZURvY3NBUEkuZ2V0RG9jdW1lbnRDb250ZW50KCk7XG4gICAgICAgIGNvbnN0IGZvcmNlZENvbnRlbnQgPSBHb29nbGVEb2NzQVBJLmZvcmNlR2V0RG9jdW1lbnRDb250ZW50KCk7XG4gICAgICAgIGRlYnVnTG9nKFwiQ29udGVudCBSZXRyaWV2YWwgVGVzdFwiLCB7XG4gICAgICAgICAgICBzdGFuZGFyZENvbnRlbnRXb3JrczogISFzdGFuZGFyZENvbnRlbnQsXG4gICAgICAgICAgICBzdGFuZGFyZENvbnRlbnRMZW5ndGg6IChzdGFuZGFyZENvbnRlbnQgPT09IG51bGwgfHwgc3RhbmRhcmRDb250ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdGFuZGFyZENvbnRlbnQubGVuZ3RoKSB8fCAwLFxuICAgICAgICAgICAgZm9yY2VkQ29udGVudFdvcmtzOiAhIWZvcmNlZENvbnRlbnQsXG4gICAgICAgICAgICBmb3JjZWRDb250ZW50TGVuZ3RoOiAoZm9yY2VkQ29udGVudCA9PT0gbnVsbCB8fCBmb3JjZWRDb250ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmb3JjZWRDb250ZW50Lmxlbmd0aCkgfHwgMCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGxvZ2dpbmcgRE9NIHN0YXRlOlwiLCBlcnIpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJHb29nbGVEb2NzQVBJIiwic3RhcnREZWJ1Z0xvZ2dpbmciLCJ0aGlzIiwiZGVidWdJbnRlcnZhbCIsImNvbnNvbGUiLCJsb2ciLCJ3aW5kb3ciLCJzZXRJbnRlcnZhbCIsIl9hIiwibm93IiwiRGF0ZSIsImxhc3REZWJ1Z1RpbWUiLCJpc0luRG9jcyIsImlzSW5Hb29nbGVEb2NzIiwicGFyYWdyYXBocyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImxlbmd0aCIsImZpcnN0UGFyYSIsInRleHRDb250ZW50Iiwic3Vic3RyaW5nIiwic3RvcERlYnVnTG9nZ2luZyIsImNsZWFySW50ZXJ2YWwiLCJsb2NhdGlvbiIsImhvc3RuYW1lIiwicXVlcnlTZWxlY3RvciIsImVycm9yIiwiZ2V0RG9jdW1lbnRDb250ZW50IiwibWF4UmV0cmllcyIsImFsdGVybmF0aXZlcyIsInNlbGVjdG9yIiwiZWxlbWVudHMiLCJjb250ZW50IiwiQXJyYXkiLCJmcm9tIiwibWFwIiwiZWxlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJqb2luIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiZG9jdW1lbnRDb250ZW50Iiwid2FybiIsImZvcmNlR2V0RG9jdW1lbnRDb250ZW50Iiwic2NyaXB0RWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJyZW1vdmVDaGlsZCIsImV4dHJhY3RlZENvbnRlbnQiLCJ2aWJlV3JpdGVFeHRyYWN0ZWRDb250ZW50IiwiZSIsInNlbGVjdG9ycyIsImFsbFRleHQiLCJib2R5IiwiZ2V0U2VsZWN0ZWRUZXh0IiwiZ2V0U2VsZWN0aW9uIiwic2VsZWN0aW9uIiwidG9TdHJpbmciLCJhZGRDb21tZW50IiwiY29tbWVudFRleHQiLCJjb21tZW50QnV0dG9uIiwiY2xpY2siLCJfYiIsImNvbW1lbnRCb3giLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJIVE1MVGV4dEFyZWFFbGVtZW50IiwicHJvdG90eXBlIiwic2V0IiwiY2FsbCIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsImJ1YmJsZXMiLCJjb21tZW50U3VibWl0QnV0dG9uIiwiZmluZCIsImJ1dHRvbiIsImlzR29vZ2xlRG9jc1VybCIsInVybCIsInN0YXJ0c1dpdGgiLCJnZXREb2N1bWVudFRpdGxlIiwidGl0bGVFbGVtZW50IiwidG9nZ2xlU2lkZWJhciIsInNpZGViYXIiLCJnZXRFbGVtZW50QnlJZCIsImNsYXNzTGlzdCIsInRvZ2dsZSIsImFuYWx5emVEb2N1bWVudCIsImNvbnRhaW5zIiwiYWRkIiwic2lkZWJhcklmcmFtZSIsImRlYnVnTG9nIiwiY29udGVudFdpbmRvdyIsInBvc3RNZXNzYWdlIiwidHlwZSIsImNocm9tZSIsInJ1bnRpbWUiLCJzZW5kTWVzc2FnZSIsImFkZEZlZWRiYWNrIiwic2VsZWN0ZWRUZXh0IiwiYWxlcnQiLCJwYXlsb2FkIiwibWVzc2FnZSIsInBvc3RNZXNzYWdlVG9TaWRlYmFyIiwic2lkZWJhcklmcmFtZUluQ29udGFpbmVyIiwic2lkZWJhckNvbnRhaW5lciIsImZhbGxiYWNrU2VsZWN0b3JzIiwicGFyZW50IiwidG9wIiwiY29udGV4dCIsImFyZ3MiLCJ0aW1lc3RhbXAiLCJ0b0lTT1N0cmluZyIsInNsaWNlIiwiaW5jbHVkZXMiLCJzaWRlYmFyRWxlbWVudCIsImhyZWYiLCJpc0dvb2dsZURvY3MiLCJzaWRlYmFyRXhpc3RzIiwic2lkZWJhcklmcmFtZUV4aXN0cyIsInBhcmFncmFwaENvdW50IiwiYm9keUNoaWxkQ291bnQiLCJjaGlsZEVsZW1lbnRDb3VudCIsImhhc0VkaXRvckVsZW1lbnQiLCJzdGFuZGFyZENvbnRlbnQiLCJmb3JjZWRDb250ZW50Iiwic3RhbmRhcmRDb250ZW50V29ya3MiLCJzdGFuZGFyZENvbnRlbnRMZW5ndGgiLCJmb3JjZWRDb250ZW50V29ya3MiLCJmb3JjZWRDb250ZW50TGVuZ3RoIiwiZXJyIiwibG9nRE9NU3RhdGUiLCJ2aWJlV3JpdGVJbmplY3RlZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsImdlbmVyYXRvciIsInRpbWVvdXQiLCJyZWplY3QiLCJzdGFydFRpbWUiLCJjaGVja0VsZW1lbnQiLCJFcnJvciIsIndhaXRGb3JFbGVtZW50IiwiY2hlY2tDb3VudCIsImNoZWNrSW50ZXJ2YWwiLCJzdGFydERvY3VtZW50TW9uaXRvcmluZyIsImNsYXNzTmFtZSIsImlkIiwicGFyZW50RWxlbWVudCIsInRhZ05hbWUiLCJzdHlsZSIsIndpZHRoIiwiaGVpZ2h0IiwiYm9yZGVyIiwiYWxsb3ciLCJzcmMiLCJnZXRVUkwiLCJ2aWJlV3JpdGVTaWRlYmFySWZyYW1lIiwiaGFzQ29udGVudFdpbmRvdyIsInJlYWR5U3RhdGUiLCJjb250ZW50RG9jdW1lbnQiLCJ0b29sYmFyQ29udGFpbmVyIiwidmliZVdyaXRlVG9vbGJhciIsImRpc3BsYXkiLCJhbGlnbkl0ZW1zIiwidG9nZ2xlU2lkZWJhckJ1dHRvbiIsImJhY2tncm91bmRDb2xvciIsImNvbG9yIiwicGFkZGluZyIsImJvcmRlclJhZGl1cyIsImN1cnNvciIsIm1hcmdpblJpZ2h0IiwiYW5hbHl6ZUJ1dHRvbiIsImZlZWRiYWNrQnV0dG9uIiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsImFkZFZpYmVXcml0ZVVJIiwib25NZXNzYWdlIiwiYWRkTGlzdGVuZXIiLCJzZW5kZXIiLCJzZW5kUmVzcG9uc2UiLCJzdWNjZXNzIiwiZGF0YSIsInVuZGVmaW5lZCIsImNvbnRlbnRMZW5ndGgiLCJzb3VyY2UiLCJldmVudCIsImVtZXJnZW5jeUNvbnRlbnQiLCJ0ZXh0IiwiUCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9