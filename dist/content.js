(()=>{"use strict";class e{static getDocumentContent(){try{return Array.from(document.querySelectorAll(".kix-paragraphrenderer")).map((e=>e.textContent)).join("\n")}catch(e){return console.error("Error getting document content:",e),""}}static getSelectedText(){try{if(window.getSelection){const e=window.getSelection();if(e)return e.toString()}return""}catch(e){return console.error("Error getting selected text:",e),""}}static addComment(e){try{if(!this.getSelectedText())return console.warn("No text selected to add a comment to"),!1;const t=document.querySelector('[aria-label="Add comment"]');return t&&(t.click(),setTimeout((()=>{var t,n;const o=document.querySelector(".docos-input-textarea");o&&(null===(n=null===(t=Object.getOwnPropertyDescriptor(HTMLTextAreaElement.prototype,"value"))||void 0===t?void 0:t.set)||void 0===n||n.call(o,e),o.dispatchEvent(new Event("input",{bubbles:!0})),setTimeout((()=>{const e=Array.from(document.querySelectorAll("button")).find((e=>"Comment"===e.textContent));if(e)return e.click(),!0}),300))}),500)),!1}catch(e){return console.error("Error adding comment:",e),!1}}static isInGoogleDocs(){return window.location.href.startsWith("https://docs.google.com/document/")}static getDocumentTitle(){try{const e=document.querySelector(".docs-title-input");return e&&e.textContent||"Untitled Document"}catch(e){return console.error("Error getting document title:",e),"Untitled Document"}}}function t(){const e=document.getElementById("vibewrite-sidebar");e&&e.classList.toggle("open")}function n(){chrome.runtime.sendMessage({type:"ANALYZE_DOCUMENT"});const e=document.getElementById("vibewrite-sidebar");e&&!e.classList.contains("open")&&e.classList.add("open")}function o(){const t=e.getSelectedText();if(!t)return void alert("Please select some text to give feedback on.");const n=document.getElementById("vibewrite-sidebar");n&&!n.classList.contains("open")&&n.classList.add("open"),chrome.runtime.sendMessage({type:"CHAT_REQUEST",payload:{message:`Please review and improve the following text: "${t}"`,selectedText:t}})}window.vibeWriteInjected?console.log("VibeWrite already injected, skipping..."):(window.vibeWriteInjected=!0,console.log("VibeWrite content script loaded"),window.addEventListener("load",(function(){return r=this,c=void 0,s=function*(){console.log("Initializing VibeWrite..."),e.isInGoogleDocs()?(yield function(e,t=1e4){return new Promise(((n,o)=>{const r=Date.now();!function c(){const i=document.querySelector(e);i?n(i):Date.now()-r>t?o(new Error(`Timeout waiting for element: ${e}`)):setTimeout(c,100)}()}))}(".docs-titlebar-buttons"),function(){try{const e=document.createElement("div");e.className="vibewrite-sidebar-container",e.id="vibewrite-sidebar",document.body.appendChild(e);const r=document.createElement("iframe");r.style.width="100%",r.style.height="100%",r.style.border="none",r.src=chrome.runtime.getURL("sidebar.html"),e.appendChild(r);const c=document.querySelector(".docs-titlebar-buttons");if(c){const e=document.createElement("div");e.className="vibewrite-toolbar",e.style.display="inline-flex",e.style.alignItems="center";const r=document.createElement("button");r.className="vibewrite-button",r.textContent="VibeWrite",r.style.backgroundColor="#1a73e8",r.style.color="white",r.style.padding="8px 12px",r.style.border="none",r.style.borderRadius="4px",r.style.cursor="pointer",r.style.marginRight="10px",r.addEventListener("click",t);const i=document.createElement("button");i.className="vibewrite-button",i.textContent="Analyze",i.addEventListener("click",n);const s=document.createElement("button");s.className="vibewrite-button",s.textContent="Add Feedback",s.addEventListener("click",o),e.appendChild(r),e.appendChild(i),e.appendChild(s),c.insertBefore(e,c.firstChild),console.log("VibeWrite UI added successfully")}}catch(e){console.error("Error adding VibeWrite UI:",e)}}(),chrome.runtime.onMessage.addListener(((n,o,r)=>{var c;switch(console.log("Content script received message:",n),n.type){case"TOGGLE_SIDEBAR":t(),r({success:!0});break;case"RELOAD_SETTINGS":console.log("Reloading settings in content script");const o=document.querySelector("#vibewrite-sidebar iframe");o&&(null===(c=o.contentWindow)||void 0===c||c.postMessage({type:"RELOAD_SETTINGS"},"*")),r({success:!0});break;case"GET_SELECTED_TEXT":r({success:!0,data:e.getSelectedText()});break;case"GET_DOCUMENT_CONTENT":r({success:!0,data:e.getDocumentContent()});break;case"ADD_COMMENT":n.payload&&n.payload.commentText?r({success:e.addComment(n.payload.commentText)}):r({success:!1,error:"No comment text provided"});break;default:r({success:!1,error:"Unknown message type"})}return!0}))):console.log("Not in a Google Docs document, exiting...")},new((i=void 0)||(i=Promise))((function(e,t){function n(e){try{a(s.next(e))}catch(e){t(e)}}function o(e){try{a(s.throw(e))}catch(e){t(e)}}function a(t){var r;t.done?e(t.value):(r=t.value,r instanceof i?r:new i((function(e){e(r)}))).then(n,o)}a((s=s.apply(r,c||[])).next())}));var r,c,i,s})))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,