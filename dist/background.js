(()=>{"use strict";var e=function(e,o,t,r){return new(t||(t=Promise))((function(n,s){function c(e){try{l(r.next(e))}catch(e){s(e)}}function a(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var o;e.done?n(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(c,a)}l((r=r.apply(e,o||[])).next())}))};function o(o){return e(this,void 0,void 0,(function*(){var e;try{console.log("Testing connection to Ollama server at",o);const t=yield fetch(`${o}/api/tags`);if(t.ok){const o=yield t.json();return console.log("Ollama connection successful. Available models:",null===(e=o.models)||void 0===e?void 0:e.map((e=>e.name)).join(", ")),!0}return console.warn(`Ollama server returned status ${t.status}: ${t.statusText}`),!1}catch(e){return console.warn("Could not connect to Ollama server:",e),!1}}))}chrome.runtime.onInstalled.addListener((e=>{console.log("VibeWrite installed:",e),chrome.storage.sync.set({useDarkMode:!1,autoSuggest:!1,aiProvider:"openai",aiModel:"gpt-4",ollamaBaseUrl:"http://localhost:11434"}).then((()=>{console.log("Default settings initialized"),o("http://localhost:11434")})).catch((e=>{console.error("Error initializing settings:",e)}))})),chrome.runtime.onMessage.addListener(((t,r,n)=>{var s,c,a,l;switch(console.log("Background received message:",t,"from:",r),t.type){case"CHECK_OLLAMA_CONNECTION":return console.log("Checking Ollama connection"),o((null===(s=t.data)||void 0===s?void 0:s.baseUrl)||"http://localhost:11434").then((e=>{console.log("Ollama connection result:",e),n({success:!0,isConnected:e})})).catch((e=>{console.error("Error checking Ollama connection:",e),n({success:!1,isConnected:!1,error:e.message})})),!0;case"GET_OLLAMA_MODELS":{console.log("Getting available Ollama models");const e=(null===(c=t.data)||void 0===c?void 0:c.baseUrl)||"http://localhost:11434";return fetch(`${e}/api/tags`).then((e=>{if(!e.ok)throw new Error(`Ollama server returned ${e.status}: ${e.statusText}`);return e.json()})).then((e=>{console.log("Available Ollama models:",e),n({success:!0,models:e.models||[]})})).catch((e=>{console.error("Error getting Ollama models:",e),n({success:!1,error:e.message})})),!0}case"GET_DOCUMENT_CONTENT_API":{console.log("Background: received GET_DOCUMENT_CONTENT_API for doc",null===(a=t.data)||void 0===a?void 0:a.docId);const o=null===(l=t.data)||void 0===l?void 0:l.docId;return chrome.identity.getAuthToken({interactive:!0},(function(t){return e(this,void 0,void 0,(function*(){if(chrome.runtime.lastError)return console.error("Error getting auth token:",chrome.runtime.lastError),void n({success:!1,error:chrome.runtime.lastError.message});try{const e=yield fetch(`https://docs.googleapis.com/v1/documents/${o}`,{headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"}});if(!e.ok)throw new Error(`Google Docs API returned ${e.status}: ${e.statusText}`);const r=yield e.json();console.log("API response received, processing document content");let s="";if(r.body&&r.body.content)for(const e of r.body.content)if(e.paragraph)for(const o of e.paragraph.elements||[])o.textRun&&o.textRun.content&&(s+=o.textRun.content);console.log(`Extracted ${s.length} characters from document`),n({success:!0,data:{content:s}})}catch(e){console.error("Error fetching document via API:",e);const o=e instanceof Error?e.message:String(e);n({success:!1,error:o})}}))})),!0}case"GET_DOCUMENT_CONTENT_RELAY":return console.log("Background script relaying document content request to active tab"),r.tab&&r.tab.id?chrome.tabs.sendMessage(r.tab.id,{type:"GET_DOCUMENT_CONTENT_RELAY"},(e=>{console.log("Relay response received:",e),n(e)})):chrome.tabs.query({active:!0,currentWindow:!0},(e=>{e.length>0&&e[0].id?chrome.tabs.sendMessage(e[0].id,{type:"GET_DOCUMENT_CONTENT_RELAY"},(e=>{console.log("Relay response from query:",e),n(e)})):n({success:!1,error:"Could not find active tab for relay"})})),!0;case"TOGGLE_SIDEBAR":return console.log("Background handling TOGGLE_SIDEBAR request"),chrome.tabs.query({active:!0,currentWindow:!0},(e=>{e.length>0&&e[0].id?(console.log("Sending TOGGLE_SIDEBAR message to content script in tab:",e[0].id),chrome.tabs.sendMessage(e[0].id,{type:"TOGGLE_SIDEBAR"},(e=>{console.log("Toggle sidebar response:",e),n(e||{success:!0})}))):(console.error("No active tab found"),n({success:!1,error:"Could not find active tab"}))})),!0;case"OLLAMA_API_REQUEST":{console.log("Processing Ollama API request in background");const{baseUrl:e,model:o,prompt:r}=t.data||{};return fetch(`${e}/api/generate`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:o,prompt:r,stream:!1,options:{temperature:.7,num_predict:500}})}).then((e=>{if(!e.ok)throw new Error(`Ollama server returned ${e.status}: ${e.statusText}`);return e.json()})).then((e=>{console.log("Ollama API response received:",e),n({success:!0,data:e})})).catch((e=>{console.error("Error in Ollama API call:",e),n({success:!1,error:e.message})})),!0}case"GET_API_KEY":return chrome.storage.sync.get("openaiApiKey").then((e=>{n({success:!0,data:e.openaiApiKey||""})})).catch((e=>{console.error("Error getting API key:",e),n({success:!1,error:"Failed to retrieve API key"})})),!0;default:return console.log("Unhandled message type:",t.type),n({success:!1,error:`Unhandled message type: ${t.type}`}),!1}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,