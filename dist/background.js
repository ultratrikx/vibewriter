(()=>{"use strict";chrome.runtime.onInstalled.addListener((e=>{console.log("VibeWrite installed:",e),chrome.storage.sync.set({useDarkMode:!1,autoSuggest:!1,aiProvider:"openai",aiModel:"gpt-4",ollamaBaseUrl:"http://localhost:11434"}).then((()=>{console.log("Default settings initialized")})).catch((e=>{console.error("Error initializing settings:",e)}))})),chrome.runtime.onMessage.addListener(((e,t,o)=>{if(console.log("Background received message:",e,"from:",t),"GET_API_KEY"===e.type)return chrome.storage.sync.get("openaiApiKey").then((e=>{o({success:!0,data:e.openaiApiKey||""})})).catch((e=>{console.error("Error getting API key:",e),o({success:!1,error:"Failed to retrieve API key"})})),!0;console.log("Unhandled message type:",e.type),o({success:!1,error:"Unknown message type"})})),chrome.tabs.onActivated.addListener((e=>{chrome.tabs.get(e.tabId).then((t=>{var o;(null===(o=t.url)||void 0===o?void 0:o.startsWith("https://docs.google.com/document/"))&&chrome.scripting.executeScript({target:{tabId:e.tabId},func:()=>window.hasOwnProperty("vibeWriteInjected")}).then((t=>{var o;!0!==(null===(o=t[0])||void 0===o?void 0:o.result)&&(console.log("Content script not detected, injecting..."),chrome.scripting.executeScript({target:{tabId:e.tabId},files:["content.js"]}).catch((e=>{console.error("Failed to inject content script:",e)})),chrome.scripting.insertCSS({target:{tabId:e.tabId},files:["content.css"]}).catch((e=>{console.error("Failed to inject CSS:",e)})))})).catch((e=>{console.error("Error checking for content script:",e)}))})).catch((e=>{console.error("Error getting tab info:",e)}))})),console.log("VibeWrite background script loaded")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsIm1hcHBpbmdzIjoibUJBUUFBLE9BQU9DLFFBQVFDLFlBQVlDLGFBQWFDLElBQ3BDQyxRQUFRQyxJQUFJLHVCQUF3QkYsR0FDcENKLE9BQU9PLFFBQVFDLEtBQ1ZDLElBQUksQ0FDTEMsYUFBYSxFQUNiQyxhQUFhLEVBQ2JDLFdBQVksU0FDWkMsUUFBUyxRQUNUQyxjQUFlLDJCQUVkQyxNQUFLLEtBQ05WLFFBQVFDLElBQUksK0JBQStCLElBRTFDVSxPQUFPQyxJQUNSWixRQUFRWSxNQUFNLCtCQUFnQ0EsRUFBTSxHQUN0RCxJQUdOakIsT0FBT0MsUUFBUWlCLFVBQVVmLGFBQVksQ0FBQ2dCLEVBQVNDLEVBQVFDLEtBR25ELEdBRkFoQixRQUFRQyxJQUFJLCtCQUFnQ2EsRUFBUyxRQUFTQyxHQUdyRCxnQkFEREQsRUFBUUcsS0FpQlIsT0FmQXRCLE9BQU9PLFFBQVFDLEtBQ1ZlLElBQUksZ0JBQ0pSLE1BQU1TLElBQ1BILEVBQWEsQ0FDVEksU0FBUyxFQUNUQyxLQUFNRixFQUFPRyxjQUFnQixJQUMvQixJQUVEWCxPQUFPQyxJQUNSWixRQUFRWSxNQUFNLHlCQUEwQkEsR0FDeENJLEVBQWEsQ0FDVEksU0FBUyxFQUNUUixNQUFPLDhCQUNULEtBRUMsRUFFUFosUUFBUUMsSUFBSSwwQkFBMkJhLEVBQVFHLE1BQy9DRCxFQUFhLENBQUVJLFNBQVMsRUFBT1IsTUFBTyx3QkFDOUMsSUFHSmpCLE9BQU80QixLQUFLQyxZQUFZMUIsYUFBYTJCLElBQ2pDOUIsT0FBTzRCLEtBQ0ZMLElBQUlPLEVBQVdDLE9BQ2ZoQixNQUFNaUIsSUFDUCxJQUFJQyxHQUNtQixRQUFsQkEsRUFBS0QsRUFBSUUsV0FBd0IsSUFBUEQsT0FBZ0IsRUFBU0EsRUFBR0UsV0FBVyx1Q0FFbEVuQyxPQUFPb0MsVUFDRkMsY0FBYyxDQUNmQyxPQUFRLENBQUVQLE1BQU9ELEVBQVdDLE9BQzVCUSxLQUFNLElBRUtDLE9BQU9DLGVBQWUsdUJBR2hDMUIsTUFBTTJCLElBQ1AsSUFBSVQsR0FDdUUsS0FBaEQsUUFBckJBLEVBQUtTLEVBQVEsVUFBdUIsSUFBUFQsT0FBZ0IsRUFBU0EsRUFBR1QsVUFDM0RuQixRQUFRQyxJQUFJLDZDQUNaTixPQUFPb0MsVUFDRkMsY0FBYyxDQUNmQyxPQUFRLENBQUVQLE1BQU9ELEVBQVdDLE9BQzVCWSxNQUFPLENBQUMsZ0JBRVAzQixPQUFPQyxJQUNSWixRQUFRWSxNQUFNLG1DQUFvQ0EsRUFBTSxJQUU1RGpCLE9BQU9vQyxVQUNGUSxVQUFVLENBQ1hOLE9BQVEsQ0FBRVAsTUFBT0QsRUFBV0MsT0FDNUJZLE1BQU8sQ0FBQyxpQkFFUDNCLE9BQU9DLElBQ1JaLFFBQVFZLE1BQU0sd0JBQXlCQSxFQUFNLElBRXJELElBRUNELE9BQU9DLElBQ1JaLFFBQVFZLE1BQU0scUNBQXNDQSxFQUFNLEdBRWxFLElBRUNELE9BQU9DLElBQ1JaLFFBQVFZLE1BQU0sMEJBQTJCQSxFQUFNLEdBQ2pELElBR05aLFFBQVFDLElBQUkscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJld3JpdGUvLi9zcmMvYmFja2dyb3VuZC9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQmFja2dyb3VuZCBTY3JpcHQgZm9yIFZpYmVXcml0ZSBleHRlbnNpb25cbiAqXG4gKiBUaGlzIHNjcmlwdCBydW5zIGluIHRoZSBiYWNrZ3JvdW5kIGFuZCBoYW5kbGVzIGNvbW11bmljYXRpb24gYmV0d2VlblxuICogcG9wdXAsIGNvbnRlbnQgc2NyaXB0cywgYW5kIHRoZSBzZXJ2ZXIuXG4gKi9cbi8vIExpc3RlbiBmb3IgaW5zdGFsbGF0aW9uIGV2ZW50c1xuY2hyb21lLnJ1bnRpbWUub25JbnN0YWxsZWQuYWRkTGlzdGVuZXIoKGRldGFpbHMpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIlZpYmVXcml0ZSBpbnN0YWxsZWQ6XCIsIGRldGFpbHMpOyAvLyBTZXQgZGVmYXVsdCBzZXR0aW5nc1xuICAgIGNocm9tZS5zdG9yYWdlLnN5bmNcbiAgICAgICAgLnNldCh7XG4gICAgICAgIHVzZURhcmtNb2RlOiBmYWxzZSxcbiAgICAgICAgYXV0b1N1Z2dlc3Q6IGZhbHNlLFxuICAgICAgICBhaVByb3ZpZGVyOiBcIm9wZW5haVwiLFxuICAgICAgICBhaU1vZGVsOiBcImdwdC00XCIsXG4gICAgICAgIG9sbGFtYUJhc2VVcmw6IFwiaHR0cDovL2xvY2FsaG9zdDoxMTQzNFwiLFxuICAgIH0pXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJEZWZhdWx0IHNldHRpbmdzIGluaXRpYWxpemVkXCIpO1xuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluaXRpYWxpemluZyBzZXR0aW5nczpcIiwgZXJyb3IpO1xuICAgIH0pO1xufSk7XG4vLyBIYW5kbGUgbWVzc2FnZXMgZnJvbSBjb250ZW50IHNjcmlwdHMgYW5kIHBvcHVwXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1lc3NhZ2UsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJCYWNrZ3JvdW5kIHJlY2VpdmVkIG1lc3NhZ2U6XCIsIG1lc3NhZ2UsIFwiZnJvbTpcIiwgc2VuZGVyKTtcbiAgICAvLyBIYW5kbGUgZGlmZmVyZW50IG1lc3NhZ2UgdHlwZXNcbiAgICBzd2l0Y2ggKG1lc3NhZ2UudHlwZSkge1xuICAgICAgICBjYXNlIFwiR0VUX0FQSV9LRVlcIjpcbiAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmNcbiAgICAgICAgICAgICAgICAuZ2V0KFwib3BlbmFpQXBpS2V5XCIpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3VsdC5vcGVuYWlBcGlLZXkgfHwgXCJcIixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBnZXR0aW5nIEFQSSBrZXk6XCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2Uoe1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IFwiRmFpbGVkIHRvIHJldHJpZXZlIEFQSSBrZXlcIixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIEltcG9ydGFudDogaW5kaWNhdGVzIHdlJ2xsIHJlc3BvbmQgYXN5bmNocm9ub3VzbHlcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVW5oYW5kbGVkIG1lc3NhZ2UgdHlwZTpcIiwgbWVzc2FnZS50eXBlKTtcbiAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogXCJVbmtub3duIG1lc3NhZ2UgdHlwZVwiIH0pO1xuICAgIH1cbn0pO1xuLy8gSGFuZGxlIHRhYiBhY3RpdmF0aW9uIC0gaW5qZWN0IGNvbnRlbnQgc2NyaXB0IGlmIG9uIEdvb2dsZSBEb2NzXG5jaHJvbWUudGFicy5vbkFjdGl2YXRlZC5hZGRMaXN0ZW5lcigoYWN0aXZlSW5mbykgPT4ge1xuICAgIGNocm9tZS50YWJzXG4gICAgICAgIC5nZXQoYWN0aXZlSW5mby50YWJJZClcbiAgICAgICAgLnRoZW4oKHRhYikgPT4ge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICgoX2EgPSB0YWIudXJsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3RhcnRzV2l0aChcImh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2RvY3VtZW50L1wiKSkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byBpbmplY3QgdGhlIGNvbnRlbnQgc2NyaXB0XG4gICAgICAgICAgICBjaHJvbWUuc2NyaXB0aW5nXG4gICAgICAgICAgICAgICAgLmV4ZWN1dGVTY3JpcHQoe1xuICAgICAgICAgICAgICAgIHRhcmdldDogeyB0YWJJZDogYWN0aXZlSW5mby50YWJJZCB9LFxuICAgICAgICAgICAgICAgIGZ1bmM6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgb3VyIGNvbnRlbnQgc2NyaXB0IGlzIGFscmVhZHkgaW5qZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5oYXNPd25Qcm9wZXJ0eShcInZpYmVXcml0ZUluamVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGlmICgoKF9hID0gcmVzdWx0c1swXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlc3VsdCkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDb250ZW50IHNjcmlwdCBub3QgZGV0ZWN0ZWQsIGluamVjdGluZy4uLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgY2hyb21lLnNjcmlwdGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLmV4ZWN1dGVTY3JpcHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB7IHRhYklkOiBhY3RpdmVJbmZvLnRhYklkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlczogW1wiY29udGVudC5qc1wiXSxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gaW5qZWN0IGNvbnRlbnQgc2NyaXB0OlwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjaHJvbWUuc2NyaXB0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAuaW5zZXJ0Q1NTKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogeyB0YWJJZDogYWN0aXZlSW5mby50YWJJZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXM6IFtcImNvbnRlbnQuY3NzXCJdLFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBpbmplY3QgQ1NTOlwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjaGVja2luZyBmb3IgY29udGVudCBzY3JpcHQ6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2V0dGluZyB0YWIgaW5mbzpcIiwgZXJyb3IpO1xuICAgIH0pO1xufSk7XG4vLyBMb2dnaW5nIHRvIGhlbHAgZGVidWdcbmNvbnNvbGUubG9nKFwiVmliZVdyaXRlIGJhY2tncm91bmQgc2NyaXB0IGxvYWRlZFwiKTtcbiJdLCJuYW1lcyI6WyJjaHJvbWUiLCJydW50aW1lIiwib25JbnN0YWxsZWQiLCJhZGRMaXN0ZW5lciIsImRldGFpbHMiLCJjb25zb2xlIiwibG9nIiwic3RvcmFnZSIsInN5bmMiLCJzZXQiLCJ1c2VEYXJrTW9kZSIsImF1dG9TdWdnZXN0IiwiYWlQcm92aWRlciIsImFpTW9kZWwiLCJvbGxhbWFCYXNlVXJsIiwidGhlbiIsImNhdGNoIiwiZXJyb3IiLCJvbk1lc3NhZ2UiLCJtZXNzYWdlIiwic2VuZGVyIiwic2VuZFJlc3BvbnNlIiwidHlwZSIsImdldCIsInJlc3VsdCIsInN1Y2Nlc3MiLCJkYXRhIiwib3BlbmFpQXBpS2V5IiwidGFicyIsIm9uQWN0aXZhdGVkIiwiYWN0aXZlSW5mbyIsInRhYklkIiwidGFiIiwiX2EiLCJ1cmwiLCJzdGFydHNXaXRoIiwic2NyaXB0aW5nIiwiZXhlY3V0ZVNjcmlwdCIsInRhcmdldCIsImZ1bmMiLCJ3aW5kb3ciLCJoYXNPd25Qcm9wZXJ0eSIsInJlc3VsdHMiLCJmaWxlcyIsImluc2VydENTUyJdLCJzb3VyY2VSb290IjoiIn0=