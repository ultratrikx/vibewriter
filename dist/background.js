(()=>{"use strict";({545:function(){var e=this&&this.__awaiter||function(e,o,t,r){return new(t||(t=Promise))((function(s,n){function c(e){try{i(r.next(e))}catch(e){n(e)}}function a(e){try{i(r.throw(e))}catch(e){n(e)}}function i(e){var o;e.done?s(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(c,a)}i((r=r.apply(e,o||[])).next())}))};function o(o){return e(this,void 0,void 0,(function*(){var e;try{console.log("Testing connection to Ollama server at",o);const t=yield fetch(`${o}/api/tags`);if(t.ok){const o=yield t.json();return console.log("Ollama connection successful. Available models:",null===(e=o.models)||void 0===e?void 0:e.map((e=>e.name)).join(", ")),!0}return console.warn(`Ollama server returned status ${t.status}: ${t.statusText}`),!1}catch(e){return console.warn("Could not connect to Ollama server:",e),!1}}))}chrome.runtime.onInstalled.addListener((e=>{console.log("VibeWrite installed:",e),chrome.storage.sync.set({useDarkMode:!1,autoSuggest:!1,aiProvider:"openai",aiModel:"gpt-4",ollamaBaseUrl:"http://localhost:11434"}).then((()=>{console.log("Default settings initialized"),o("http://localhost:11434")})).catch((e=>{console.error("Error initializing settings:",e)}))})),chrome.runtime.onMessage.addListener(((e,t,r)=>{var s;switch(console.log("Background received message:",e,"from:",t),e.type){case"CHECK_OLLAMA_CONNECTION":return console.log("Checking Ollama connection"),o(e.data.baseUrl||"http://localhost:11434").then((e=>{console.log("Ollama connection result:",e),r({success:!0,isConnected:e})})).catch((e=>{console.error("Error checking Ollama connection:",e),r({success:!1,isConnected:!1,error:e.message})})),!0;case"GET_OLLAMA_MODELS":console.log("Getting available Ollama models");const n=e.data.baseUrl||"http://localhost:11434";return fetch(`${n}/api/tags`).then((e=>{if(!e.ok)throw new Error(`Ollama server returned ${e.status}: ${e.statusText}`);return e.json()})).then((e=>{console.log("Available Ollama models:",e),r({success:!0,models:e.models||[]})})).catch((e=>{console.error("Error getting Ollama models:",e),r({success:!1,error:e.message})})),!0;case"OLLAMA_API_REQUEST":console.log("Processing Ollama API request in background");const{baseUrl:c,model:a,prompt:i}=e.data;return fetch(`${c}/api/generate`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:a,prompt:i,stream:!1,options:{temperature:.7,num_predict:500}})}).then((e=>{if(!e.ok)throw new Error(`Ollama server returned ${e.status}: ${e.statusText}`);return e.json()})).then((e=>{console.log("Ollama API response received:",e),r({success:!0,data:e})})).catch((e=>{console.error("Error in Ollama API call:",e),r({success:!1,error:e.message})})),!0;case"GET_API_KEY":return chrome.storage.sync.get("openaiApiKey").then((e=>{r({success:!0,data:e.openaiApiKey||""})})).catch((e=>{console.error("Error getting API key:",e),r({success:!1,error:"Failed to retrieve API key"})})),!0;case"ANALYZE_DOCUMENT":return t.tab&&t.tab.id?(chrome.tabs.sendMessage(t.tab.id,{type:"ANALYZE_DOCUMENT"}).then((()=>{console.log("Forwarded ANALYZE_DOCUMENT message to content script"),r({success:!0})})).catch((e=>{console.error("Error forwarding ANALYZE_DOCUMENT message:",e),r({success:!1,error:"Failed to forward message"})})),!0):(chrome.tabs.query({active:!0,currentWindow:!0},(e=>{var o;(null===(o=e[0])||void 0===o?void 0:o.id)?chrome.tabs.sendMessage(e[0].id,{type:"ANALYZE_DOCUMENT"}).then((()=>{console.log("Forwarded ANALYZE_DOCUMENT to active tab"),r({success:!0})})).catch((e=>{console.error("Error forwarding to active tab:",e),r({success:!1,error:"Failed to forward message"})})):r({success:!1,error:"No active tab found"})})),!0);case"TOGGLE_SIDEBAR":return(null===(s=t.tab)||void 0===s?void 0:s.id)?chrome.tabs.sendMessage(t.tab.id,{type:"TOGGLE_SIDEBAR"}).then((e=>{r(e)})).catch((e=>{console.error("Error toggling sidebar:",e),r({success:!1,error:"Failed to toggle sidebar"})})):chrome.tabs.query({active:!0,currentWindow:!0},(e=>{var o;(null===(o=e[0])||void 0===o?void 0:o.id)?chrome.tabs.sendMessage(e[0].id,{type:"PING"}).then((()=>chrome.tabs.sendMessage(e[0].id,{type:"TOGGLE_SIDEBAR"}))).then((e=>{r(e)})).catch((()=>{var o;(null===(o=e[0].url)||void 0===o?void 0:o.startsWith("https://docs.google.com/document/"))?chrome.scripting.executeScript({target:{tabId:e[0].id},files:["content.js"]}).then((()=>{setTimeout((()=>{chrome.tabs.sendMessage(e[0].id,{type:"TOGGLE_SIDEBAR"}).then((e=>{r(e)})).catch((e=>{console.error("Error after script injection:",e),r({success:!1,error:"Failed after script injection"})}))}),500)})).catch((e=>{console.error("Error injecting content script:",e),r({success:!1,error:"Failed to inject content script"})})):r({success:!1,error:"Not a Google Docs page"})})):r({success:!1,error:"No active tab found"})})),!0;case"GET_DOCUMENT_CONTENT_FROM_BACKGROUND":return console.log("Background script received GET_DOCUMENT_CONTENT_FROM_BACKGROUND"),chrome.tabs.query({active:!0,currentWindow:!0},(e=>{var o;(null===(o=e[0])||void 0===o?void 0:o.id)?(console.log(`Sending GET_DOCUMENT_CONTENT to tab ${e[0].id}`),chrome.tabs.sendMessage(e[0].id,{type:"GET_DOCUMENT_CONTENT"}).then((e=>{var o;console.log("Got response from content script:",e),(null==e?void 0:e.success)&&(null===(o=null==e?void 0:e.data)||void 0===o?void 0:o.content)?r({success:!0,data:{content:e.data.content}}):r({success:!1,data:{error:"Failed to retrieve document content"}})})).catch((e=>{console.error("Error sending message to content script:",e),r({success:!1,data:{error:"Communication with content script failed"}})}))):(console.error("No active tab found"),r({success:!1,data:{error:"No active tab found"}}))})),!0;case"GET_DOCUMENT_CONTENT_RELAY":return console.log("Background script relaying document content request to active tab"),chrome.tabs.query({active:!0,currentWindow:!0},(e=>{var o;(null===(o=e[0])||void 0===o?void 0:o.id)&&chrome.tabs.sendMessage(e[0].id,{type:"GET_DOCUMENT_CONTENT_RELAY",source:"background"}).catch((e=>{console.error("Error relaying message to tab:",e)}))})),!1;default:return console.log("Unknown message type:",e.type),r({success:!1,error:"Unknown message type"}),!0}}))}})[545]()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,