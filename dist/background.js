(()=>{"use strict";var e=function(e,o,t,r){return new(t||(t=Promise))((function(n,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function c(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var o;e.done?n(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(a,c)}l((r=r.apply(e,o||[])).next())}))};function o(o){return e(this,void 0,void 0,(function*(){var e;try{console.log("Testing connection to Ollama server at",o);const t=yield fetch(`${o}/api/tags`);if(t.ok){const o=yield t.json();return console.log("Ollama connection successful. Available models:",null===(e=o.models)||void 0===e?void 0:e.map((e=>e.name)).join(", ")),!0}return console.warn(`Ollama server returned status ${t.status}: ${t.statusText}`),!1}catch(e){return console.warn("Could not connect to Ollama server:",e),!1}}))}chrome.runtime.onInstalled.addListener((e=>{console.log("VibeWrite installed:",e),chrome.storage.sync.set({useDarkMode:!1,autoSuggest:!1,aiProvider:"openai",aiModel:"gpt-4",ollamaBaseUrl:"http://localhost:11434"}).then((()=>{console.log("Default settings initialized"),o("http://localhost:11434")})).catch((e=>{console.error("Error initializing settings:",e)}))})),chrome.runtime.onMessage.addListener(((t,r,n)=>{var s,a,c,l;switch(console.log("Background received message:",t,"from:",r),t.type){case"CHECK_OLLAMA_CONNECTION":return console.log("Checking Ollama connection"),o((null===(s=t.data)||void 0===s?void 0:s.baseUrl)||"http://localhost:11434").then((e=>{console.log("Ollama connection result:",e),n({success:!0,isConnected:e})})).catch((e=>{console.error("Error checking Ollama connection:",e),n({success:!1,isConnected:!1,error:e.message})})),!0;case"GET_OLLAMA_MODELS":{console.log("Getting available Ollama models");const e=(null===(a=t.data)||void 0===a?void 0:a.baseUrl)||"http://localhost:11434";return fetch(`${e}/api/tags`).then((e=>{if(!e.ok)throw new Error(`Ollama server returned ${e.status}: ${e.statusText}`);return e.json()})).then((e=>{console.log("Available Ollama models:",e),n({success:!0,models:e.models||[]})})).catch((e=>{console.error("Error getting Ollama models:",e),n({success:!1,error:e.message})})),!0}case"GET_DOCUMENT_CONTENT_API":{console.log("Background: received GET_DOCUMENT_CONTENT_API for doc",null===(c=t.data)||void 0===c?void 0:c.docId);const o=null===(l=t.data)||void 0===l?void 0:l.docId;return chrome.identity.getAuthToken({interactive:!0},(function(t){return e(this,void 0,void 0,(function*(){if(chrome.runtime.lastError)return console.error("Error getting auth token:",chrome.runtime.lastError),void n({success:!1,error:chrome.runtime.lastError.message});try{const e=yield fetch(`https://docs.googleapis.com/v1/documents/${o}`,{headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"}});if(!e.ok)throw new Error(`Google Docs API returned ${e.status}: ${e.statusText}`);const r=yield e.json();console.log("API response received, processing document content");let s="";if(r.body&&r.body.content)for(const e of r.body.content)if(e.paragraph)for(const o of e.paragraph.elements||[])o.textRun&&o.textRun.content&&(s+=o.textRun.content);console.log(`Extracted ${s.length} characters from document`),n({success:!0,data:{content:s}})}catch(e){console.error("Error fetching document via API:",e);const o=e instanceof Error?e.message:String(e);n({success:!1,error:o})}}))})),!0}case"GET_DOCUMENT_CONTENT_RELAY":return console.log("Background script relaying document content request to active tab"),r.tab&&r.tab.id?chrome.tabs.sendMessage(r.tab.id,{type:"GET_DOCUMENT_CONTENT_RELAY"},(e=>{console.log("Relay response received:",e),n(e)})):chrome.tabs.query({active:!0,currentWindow:!0},(e=>{e.length>0&&e[0].id?chrome.tabs.sendMessage(e[0].id,{type:"GET_DOCUMENT_CONTENT_RELAY"},(e=>{console.log("Relay response from query:",e),n(e)})):n({success:!1,error:"Could not find active tab for relay"})})),!0;case"OLLAMA_API_REQUEST":{console.log("Processing Ollama API request in background");const{baseUrl:e,model:o,prompt:r}=t.data||{};return fetch(`${e}/api/generate`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:o,prompt:r,stream:!1,options:{temperature:.7,num_predict:500}})}).then((e=>{if(!e.ok)throw new Error(`Ollama server returned ${e.status}: ${e.statusText}`);return e.json()})).then((e=>{console.log("Ollama API response received:",e),n({success:!0,data:e})})).catch((e=>{console.error("Error in Ollama API call:",e),n({success:!1,error:e.message})})),!0}case"GET_API_KEY":return chrome.storage.sync.get("openaiApiKey").then((e=>{n({success:!0,data:e.openaiApiKey||""})})).catch((e=>{console.error("Error getting API key:",e),n({success:!1,error:"Failed to retrieve API key"})})),!0;default:return console.log("Unhandled message type:",t.type),n({success:!1,error:`Unhandled message type: ${t.type}`}),!1}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsIm1hcHBpbmdzIjoibUJBTUEsSUFBSUEsRUFBd0MsU0FBVUMsRUFBU0MsRUFBWUMsRUFBR0MsR0FFMUUsT0FBTyxJQUFLRCxJQUFNQSxFQUFJRSxXQUFVLFNBQVVDLEVBQVNDLEdBQy9DLFNBQVNDLEVBQVVDLEdBQVMsSUFBTUMsRUFBS04sRUFBVU8sS0FBS0YsR0FBUyxDQUFFLE1BQU9HLEdBQUtMLEVBQU9LLEVBQUksQ0FBRSxDQUMxRixTQUFTQyxFQUFTSixHQUFTLElBQU1DLEVBQUtOLEVBQWlCLE1BQUVLLEdBQVMsQ0FBRSxNQUFPRyxHQUFLTCxFQUFPSyxFQUFJLENBQUUsQ0FDN0YsU0FBU0YsRUFBS0ksR0FKbEIsSUFBZUwsRUFJYUssRUFBT0MsS0FBT1QsRUFBUVEsRUFBT0wsUUFKMUNBLEVBSXlESyxFQUFPTCxNQUpoREEsYUFBaUJOLEVBQUlNLEVBQVEsSUFBSU4sR0FBRSxTQUFVRyxHQUFXQSxFQUFRRyxFQUFRLEtBSWpCTyxLQUFLUixFQUFXSyxFQUFXLENBQzdHSCxHQUFNTixFQUFZQSxFQUFVYSxNQUFNaEIsRUFBU0MsR0FBYyxLQUFLUyxPQUNsRSxHQUNKLEVBc0JBLFNBQVNPLEVBQXNCQyxHQUMzQixPQUFPbkIsRUFBVW9CLFVBQU0sT0FBUSxHQUFRLFlBQ25DLElBQUlDLEVBQ0osSUFDSUMsUUFBUUMsSUFBSSx5Q0FBMENKLEdBQ3RELE1BQU1LLFFBQWlCQyxNQUFNLEdBQUdOLGNBQ2hDLEdBQUlLLEVBQVNFLEdBQUksQ0FDYixNQUFNQyxRQUFhSCxFQUFTSSxPQUU1QixPQURBTixRQUFRQyxJQUFJLGtEQUEwRSxRQUF0QkYsRUFBS00sRUFBS0UsY0FBMkIsSUFBUFIsT0FBZ0IsRUFBU0EsRUFBR1MsS0FBS0MsR0FBTUEsRUFBRUMsT0FBTUMsS0FBSyxRQUMzSSxDQUNYLENBR0ksT0FEQVgsUUFBUVksS0FBSyxpQ0FBaUNWLEVBQVNXLFdBQVdYLEVBQVNZLGVBQ3BFLENBRWYsQ0FDQSxNQUFPQyxHQUVILE9BREFmLFFBQVFZLEtBQUssc0NBQXVDRyxJQUM3QyxDQUNYLENBQ0osR0FDSixDQXpDQUMsT0FBT0MsUUFBUUMsWUFBWUMsYUFBYUMsSUFDcENwQixRQUFRQyxJQUFJLHVCQUF3Qm1CLEdBQ3BDSixPQUFPSyxRQUFRQyxLQUNWQyxJQUFJLENBQ0xDLGFBQWEsRUFDYkMsYUFBYSxFQUNiQyxXQUFZLFNBQ1pDLFFBQVMsUUFDVEMsY0FBZSwyQkFFZGxDLE1BQUssS0FDTk0sUUFBUUMsSUFBSSxnQ0FFWkwsRUFBc0IseUJBQXlCLElBRTlDaUMsT0FBT2QsSUFDUmYsUUFBUWUsTUFBTSwrQkFBZ0NBLEVBQU0sR0FDdEQsSUEwQk5DLE9BQU9DLFFBQVFhLFVBQVVYLGFBQVksQ0FBQ1ksRUFBU0MsRUFBUUMsS0FDbkQsSUFBSWxDLEVBQUltQyxFQUFJQyxFQUFJQyxFQUdoQixPQUZBcEMsUUFBUUMsSUFBSSwrQkFBZ0M4QixFQUFTLFFBQVNDLEdBRXRERCxFQUFRTSxNQUNaLElBQUssMEJBbUJELE9BbEJBckMsUUFBUUMsSUFBSSw4QkFFWkwsR0FEcUMsUUFBdkJHLEVBQUtnQyxFQUFRMUIsWUFBeUIsSUFBUE4sT0FBZ0IsRUFBU0EsRUFBR0YsVUFBWSwwQkFFaEZILE1BQU00QyxJQUNQdEMsUUFBUUMsSUFBSSw0QkFBNkJxQyxHQUN6Q0wsRUFBYSxDQUNUTSxTQUFTLEVBQ1RELFlBQWFBLEdBQ2YsSUFFRFQsT0FBT2QsSUFDUmYsUUFBUWUsTUFBTSxvQ0FBcUNBLEdBQ25Ea0IsRUFBYSxDQUNUTSxTQUFTLEVBQ1RELGFBQWEsRUFDYnZCLE1BQU9BLEVBQU1nQixTQUNmLEtBRUMsRUFFWCxJQUFLLG9CQUFxQixDQUV0Qi9CLFFBQVFDLElBQUksbUNBQ1osTUFBTXVDLEdBQW9DLFFBQXZCTixFQUFLSCxFQUFRMUIsWUFBeUIsSUFBUDZCLE9BQWdCLEVBQVNBLEVBQUdyQyxVQUFZLHlCQXNCMUYsT0FyQkFNLE1BQU0sR0FBR3FDLGNBQ0o5QyxNQUFNUSxJQUNQLElBQUtBLEVBQVNFLEdBQ1YsTUFBTSxJQUFJcUMsTUFBTSwwQkFBMEJ2QyxFQUFTVyxXQUFXWCxFQUFTWSxjQUUzRSxPQUFPWixFQUFTSSxNQUFNLElBRXJCWixNQUFNVyxJQUNQTCxRQUFRQyxJQUFJLDJCQUE0QkksR0FDeEM0QixFQUFhLENBQ1RNLFNBQVMsRUFDVGhDLE9BQVFGLEVBQUtFLFFBQVUsSUFDekIsSUFFRHNCLE9BQU9kLElBQ1JmLFFBQVFlLE1BQU0sK0JBQWdDQSxHQUM5Q2tCLEVBQWEsQ0FDVE0sU0FBUyxFQUNUeEIsTUFBT0EsRUFBTWdCLFNBQ2YsS0FFQyxDQUNYLENBQ0EsSUFBSywyQkFBNEIsQ0FDN0IvQixRQUFRQyxJQUFJLHdEQUFpRixRQUF2QmtDLEVBQUtKLEVBQVExQixZQUF5QixJQUFQOEIsT0FBZ0IsRUFBU0EsRUFBR08sT0FDakksTUFBTUEsRUFBZ0MsUUFBdkJOLEVBQUtMLEVBQVExQixZQUF5QixJQUFQK0IsT0FBZ0IsRUFBU0EsRUFBR00sTUFxRDFFLE9BbkRBMUIsT0FBTzJCLFNBQVNDLGFBQWEsQ0FBRUMsYUFBYSxJQUFRLFNBQVVDLEdBQzFELE9BQU9wRSxFQUFVb0IsVUFBTSxPQUFRLEdBQVEsWUFDbkMsR0FBSWtCLE9BQU9DLFFBQVE4QixVQU1mLE9BTEEvQyxRQUFRZSxNQUFNLDRCQUE2QkMsT0FBT0MsUUFBUThCLGdCQUMxRGQsRUFBYSxDQUNUTSxTQUFTLEVBQ1R4QixNQUFPQyxPQUFPQyxRQUFROEIsVUFBVWhCLFVBSXhDLElBRUksTUFBTWlCLFFBQWE3QyxNQUFNLDRDQUE0Q3VDLElBQVMsQ0FDMUVPLFFBQVMsQ0FDTEMsY0FBZSxVQUFVSixJQUN6QixlQUFnQixzQkFHeEIsSUFBS0UsRUFBSzVDLEdBQ04sTUFBTSxJQUFJcUMsTUFBTSw0QkFBNEJPLEVBQUtuQyxXQUFXbUMsRUFBS2xDLGNBRXJFLE1BQU1SLFFBQWEwQyxFQUFLMUMsT0FDeEJOLFFBQVFDLElBQUksc0RBRVosSUFBSWtELEVBQVUsR0FDZCxHQUFJN0MsRUFBSzhDLE1BQVE5QyxFQUFLOEMsS0FBS0QsUUFDdkIsSUFBSyxNQUFNRSxLQUFxQi9DLEVBQUs4QyxLQUFLRCxRQUN0QyxHQUFJRSxFQUFrQkMsVUFDbEIsSUFBSyxNQUFNQyxLQUFRRixFQUNkQyxVQUFVRSxVQUFZLEdBQ25CRCxFQUFLRSxTQUNMRixFQUFLRSxRQUFRTixVQUNiQSxHQUFXSSxFQUFLRSxRQUFRTixTQU01Q25ELFFBQVFDLElBQUksYUFBYWtELEVBQVFPLG1DQUNqQ3pCLEVBQWEsQ0FBRU0sU0FBUyxFQUFNbEMsS0FBTSxDQUFFOEMsWUFDMUMsQ0FDQSxNQUFPUSxHQUNIM0QsUUFBUWUsTUFBTSxtQ0FBb0M0QyxHQUNsRCxNQUFNQyxFQUFlRCxhQUFlbEIsTUFBUWtCLEVBQUk1QixRQUFVOEIsT0FBT0YsR0FDakUxQixFQUFhLENBQ1RNLFNBQVMsRUFDVHhCLE1BQU82QyxHQUVmLENBQ0osR0FDSixLQUNPLENBQ1gsQ0FDQSxJQUFLLDZCQTBCRCxPQXpCQTVELFFBQVFDLElBQUkscUVBQ1IrQixFQUFPOEIsS0FBTzlCLEVBQU84QixJQUFJQyxHQUV6Qi9DLE9BQU9nRCxLQUFLQyxZQUFZakMsRUFBTzhCLElBQUlDLEdBQUksQ0FBRTFCLEtBQU0sK0JBQWlDbkMsSUFDNUVGLFFBQVFDLElBQUksMkJBQTRCQyxHQUN4QytCLEVBQWEvQixFQUFTLElBSzFCYyxPQUFPZ0QsS0FBS0UsTUFBTSxDQUFFQyxRQUFRLEVBQU1DLGVBQWUsSUFBU0osSUFDbERBLEVBQUtOLE9BQVMsR0FBS00sRUFBSyxHQUFHRCxHQUMzQi9DLE9BQU9nRCxLQUFLQyxZQUFZRCxFQUFLLEdBQUdELEdBQUksQ0FBRTFCLEtBQU0sK0JBQWlDbkMsSUFDekVGLFFBQVFDLElBQUksNkJBQThCQyxHQUMxQytCLEVBQWEvQixFQUFTLElBSTFCK0IsRUFBYSxDQUNUTSxTQUFTLEVBQ1R4QixNQUFPLHVDQUVmLEtBR0QsRUFFWCxJQUFLLHFCQUFzQixDQUN2QmYsUUFBUUMsSUFBSSwrQ0FFWixNQUFNLFFBQUVKLEVBQU8sTUFBRXdFLEVBQUssT0FBRUMsR0FBV3ZDLEVBQVExQixNQUFRLENBQUMsRUFxQ3BELE9BbkNBRixNQUFNLEdBQUdOLGlCQUF3QixDQUM3QjBFLE9BQVEsT0FDUnRCLFFBQVMsQ0FDTCxlQUFnQixvQkFFcEJHLEtBQU1vQixLQUFLQyxVQUFVLENBQ2pCSixNQUFPQSxFQUNQQyxPQUFRQSxFQUNSSSxRQUFRLEVBQ1JDLFFBQVMsQ0FDTEMsWUFBYSxHQUNiQyxZQUFhLFNBSXBCbkYsTUFBTVEsSUFDUCxJQUFLQSxFQUFTRSxHQUNWLE1BQU0sSUFBSXFDLE1BQU0sMEJBQTBCdkMsRUFBU1csV0FBV1gsRUFBU1ksY0FFM0UsT0FBT1osRUFBU0ksTUFBTSxJQUVyQlosTUFBTVcsSUFDUEwsUUFBUUMsSUFBSSxnQ0FBaUNJLEdBQzdDNEIsRUFBYSxDQUNUTSxTQUFTLEVBQ1RsQyxLQUFNQSxHQUNSLElBRUR3QixPQUFPZCxJQUNSZixRQUFRZSxNQUFNLDRCQUE2QkEsR0FDM0NrQixFQUFhLENBQ1RNLFNBQVMsRUFDVHhCLE1BQU9BLEVBQU1nQixTQUNmLEtBRUMsQ0FDWCxDQUNBLElBQUssY0FnQkQsT0FmQWYsT0FBT0ssUUFBUUMsS0FDVndELElBQUksZ0JBQ0pwRixNQUFNRixJQUNQeUMsRUFBYSxDQUNUTSxTQUFTLEVBQ1RsQyxLQUFNYixFQUFPdUYsY0FBZ0IsSUFDL0IsSUFFRGxELE9BQU9kLElBQ1JmLFFBQVFlLE1BQU0seUJBQTBCQSxHQUN4Q2tCLEVBQWEsQ0FDVE0sU0FBUyxFQUNUeEIsTUFBTyw4QkFDVCxLQUVDLEVBRVgsUUFNSSxPQUxBZixRQUFRQyxJQUFJLDBCQUEyQjhCLEVBQVFNLE1BQy9DSixFQUFhLENBQ1RNLFNBQVMsRUFDVHhCLE1BQU8sMkJBQTJCZ0IsRUFBUU0sVUFFdkMsRUFFZixHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZXdyaXRlLy4vc3JjL2JhY2tncm91bmQvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBCYWNrZ3JvdW5kIFNjcmlwdCBmb3IgVmliZVdyaXRlIGV4dGVuc2lvblxuICpcbiAqIFRoaXMgc2NyaXB0IHJ1bnMgaW4gdGhlIGJhY2tncm91bmQgYW5kIGhhbmRsZXMgY29tbXVuaWNhdGlvbiBiZXR3ZWVuXG4gKiBwb3B1cCwgY29udGVudCBzY3JpcHRzLCBhbmQgdGhlIHNlcnZlci5cbiAqL1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG4vLyBMaXN0ZW4gZm9yIGluc3RhbGxhdGlvbiBldmVudHNcbmNocm9tZS5ydW50aW1lLm9uSW5zdGFsbGVkLmFkZExpc3RlbmVyKChkZXRhaWxzKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJWaWJlV3JpdGUgaW5zdGFsbGVkOlwiLCBkZXRhaWxzKTsgLy8gU2V0IGRlZmF1bHQgc2V0dGluZ3NcbiAgICBjaHJvbWUuc3RvcmFnZS5zeW5jXG4gICAgICAgIC5zZXQoe1xuICAgICAgICB1c2VEYXJrTW9kZTogZmFsc2UsXG4gICAgICAgIGF1dG9TdWdnZXN0OiBmYWxzZSxcbiAgICAgICAgYWlQcm92aWRlcjogXCJvcGVuYWlcIixcbiAgICAgICAgYWlNb2RlbDogXCJncHQtNFwiLFxuICAgICAgICBvbGxhbWFCYXNlVXJsOiBcImh0dHA6Ly9sb2NhbGhvc3Q6MTE0MzRcIixcbiAgICB9KVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRGVmYXVsdCBzZXR0aW5ncyBpbml0aWFsaXplZFwiKTtcbiAgICAgICAgLy8gVGVzdCBPbGxhbWEgY29ubmVjdGl2aXR5IG9uIGluc3RhbGxcbiAgICAgICAgY2hlY2tPbGxhbWFDb25uZWN0aW9uKFwiaHR0cDovL2xvY2FsaG9zdDoxMTQzNFwiKTtcbiAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbml0aWFsaXppbmcgc2V0dGluZ3M6XCIsIGVycm9yKTtcbiAgICB9KTtcbn0pO1xuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNoZWNrIGlmIE9sbGFtYSBzZXJ2ZXIgaXMgYWNjZXNzaWJsZVxuZnVuY3Rpb24gY2hlY2tPbGxhbWFDb25uZWN0aW9uKGJhc2VVcmwpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRlc3RpbmcgY29ubmVjdGlvbiB0byBPbGxhbWEgc2VydmVyIGF0XCIsIGJhc2VVcmwpO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBmZXRjaChgJHtiYXNlVXJsfS9hcGkvdGFnc2ApO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHlpZWxkIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk9sbGFtYSBjb25uZWN0aW9uIHN1Y2Nlc3NmdWwuIEF2YWlsYWJsZSBtb2RlbHM6XCIsIChfYSA9IGRhdGEubW9kZWxzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWFwKChtKSA9PiBtLm5hbWUpLmpvaW4oXCIsIFwiKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYE9sbGFtYSBzZXJ2ZXIgcmV0dXJuZWQgc3RhdHVzICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkNvdWxkIG5vdCBjb25uZWN0IHRvIE9sbGFtYSBzZXJ2ZXI6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8gSGFuZGxlIG1lc3NhZ2VzIGZyb20gY29udGVudCBzY3JpcHRzIGFuZCBwb3B1cFxuY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlLmFkZExpc3RlbmVyKChtZXNzYWdlLCBzZW5kZXIsIHNlbmRSZXNwb25zZSkgPT4ge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICBjb25zb2xlLmxvZyhcIkJhY2tncm91bmQgcmVjZWl2ZWQgbWVzc2FnZTpcIiwgbWVzc2FnZSwgXCJmcm9tOlwiLCBzZW5kZXIpO1xuICAgIC8vIEhhbmRsZSBkaWZmZXJlbnQgbWVzc2FnZSB0eXBlc1xuICAgIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJDSEVDS19PTExBTUFfQ09OTkVDVElPTlwiOiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNoZWNraW5nIE9sbGFtYSBjb25uZWN0aW9uXCIpO1xuICAgICAgICAgICAgY29uc3QgdXJsID0gKChfYSA9IG1lc3NhZ2UuZGF0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmJhc2VVcmwpIHx8IFwiaHR0cDovL2xvY2FsaG9zdDoxMTQzNFwiO1xuICAgICAgICAgICAgY2hlY2tPbGxhbWFDb25uZWN0aW9uKHVybClcbiAgICAgICAgICAgICAgICAudGhlbigoaXNDb25uZWN0ZWQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk9sbGFtYSBjb25uZWN0aW9uIHJlc3VsdDpcIiwgaXNDb25uZWN0ZWQpO1xuICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGlzQ29ubmVjdGVkOiBpc0Nvbm5lY3RlZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjaGVja2luZyBPbGxhbWEgY29ubmVjdGlvbjpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBpc0Nvbm5lY3RlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gSW1wb3J0YW50OiBpbmRpY2F0ZXMgd2UnbGwgcmVzcG9uZCBhc3luY2hyb25vdXNseVxuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJHRVRfT0xMQU1BX01PREVMU1wiOiB7XG4gICAgICAgICAgICAvLyBHZXQgYXZhaWxhYmxlIG1vZGVscyBmcm9tIE9sbGFtYVxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJHZXR0aW5nIGF2YWlsYWJsZSBPbGxhbWEgbW9kZWxzXCIpO1xuICAgICAgICAgICAgY29uc3QgbW9kZWxVcmwgPSAoKF9iID0gbWVzc2FnZS5kYXRhKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuYmFzZVVybCkgfHwgXCJodHRwOi8vbG9jYWxob3N0OjExNDM0XCI7XG4gICAgICAgICAgICBmZXRjaChgJHttb2RlbFVybH0vYXBpL3RhZ3NgKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBPbGxhbWEgc2VydmVyIHJldHVybmVkICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXZhaWxhYmxlIE9sbGFtYSBtb2RlbHM6XCIsIGRhdGEpO1xuICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsczogZGF0YS5tb2RlbHMgfHwgW10sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2V0dGluZyBPbGxhbWEgbW9kZWxzOlwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gSW1wb3J0YW50OiBpbmRpY2F0ZXMgd2UnbGwgcmVzcG9uZCBhc3luY2hyb25vdXNseVxuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJHRVRfRE9DVU1FTlRfQ09OVEVOVF9BUElcIjoge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJCYWNrZ3JvdW5kOiByZWNlaXZlZCBHRVRfRE9DVU1FTlRfQ09OVEVOVF9BUEkgZm9yIGRvY1wiLCAoX2MgPSBtZXNzYWdlLmRhdGEpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5kb2NJZCk7XG4gICAgICAgICAgICBjb25zdCBkb2NJZCA9IChfZCA9IG1lc3NhZ2UuZGF0YSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmRvY0lkO1xuICAgICAgICAgICAgLy8gRXhjaGFuZ2UgT0F1dGggdG9rZW4gYW5kIGNhbGwgR29vZ2xlIERvY3MgUkVTVCBBUElcbiAgICAgICAgICAgIGNocm9tZS5pZGVudGl0eS5nZXRBdXRoVG9rZW4oeyBpbnRlcmFjdGl2ZTogdHJ1ZSB9LCBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2V0dGluZyBhdXRoIHRva2VuOlwiLCBjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBhdXRoZW50aWNhdGVkIHJlcXVlc3QgdG8gR29vZ2xlIERvY3MgQVBJXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwID0geWllbGQgZmV0Y2goYGh0dHBzOi8vZG9jcy5nb29nbGVhcGlzLmNvbS92MS9kb2N1bWVudHMvJHtkb2NJZH1gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW59YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBHb29nbGUgRG9jcyBBUEkgcmV0dXJuZWQgJHtyZXNwLnN0YXR1c306ICR7cmVzcC5zdGF0dXNUZXh0fWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QganNvbiA9IHlpZWxkIHJlc3AuanNvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBUEkgcmVzcG9uc2UgcmVjZWl2ZWQsIHByb2Nlc3NpbmcgZG9jdW1lbnQgY29udGVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZsYXR0ZW4gYm9keSBjb250ZW50IHRvIHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb250ZW50ID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uLmJvZHkgJiYganNvbi5ib2R5LmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN0cnVjdHVyYWxFbGVtZW50IG9mIGpzb24uYm9keS5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJ1Y3R1cmFsRWxlbWVudC5wYXJhZ3JhcGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbSBvZiBzdHJ1Y3R1cmFsRWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wYXJhZ3JhcGguZWxlbWVudHMgfHwgW10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS50ZXh0UnVuICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0udGV4dFJ1bi5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgKz0gZWxlbS50ZXh0UnVuLmNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEV4dHJhY3RlZCAke2NvbnRlbnQubGVuZ3RofSBjaGFyYWN0ZXJzIGZyb20gZG9jdW1lbnRgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IHRydWUsIGRhdGE6IHsgY29udGVudCB9IH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBkb2N1bWVudCB2aWEgQVBJOlwiLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6IFN0cmluZyhlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIkdFVF9ET0NVTUVOVF9DT05URU5UX1JFTEFZXCI6IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQmFja2dyb3VuZCBzY3JpcHQgcmVsYXlpbmcgZG9jdW1lbnQgY29udGVudCByZXF1ZXN0IHRvIGFjdGl2ZSB0YWJcIik7XG4gICAgICAgICAgICBpZiAoc2VuZGVyLnRhYiAmJiBzZW5kZXIudGFiLmlkKSB7XG4gICAgICAgICAgICAgICAgLy8gRm9yd2FyZCB0aGUgcmVxdWVzdCB0byBjb250ZW50IHNjcmlwdCBpbiB0aGUgYWN0aXZlIHRhYlxuICAgICAgICAgICAgICAgIGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHNlbmRlci50YWIuaWQsIHsgdHlwZTogXCJHRVRfRE9DVU1FTlRfQ09OVEVOVF9SRUxBWVwiIH0sIChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJlbGF5IHJlc3BvbnNlIHJlY2VpdmVkOlwiLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUcnkgdG8gZmluZCBhY3RpdmUgdGFiIGlmIHNlbmRlciB0YWIgbm90IGF2YWlsYWJsZVxuICAgICAgICAgICAgICAgIGNocm9tZS50YWJzLnF1ZXJ5KHsgYWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlIH0sICh0YWJzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWJzLmxlbmd0aCA+IDAgJiYgdGFic1swXS5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UodGFic1swXS5pZCwgeyB0eXBlOiBcIkdFVF9ET0NVTUVOVF9DT05URU5UX1JFTEFZXCIgfSwgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZWxheSByZXNwb25zZSBmcm9tIHF1ZXJ5OlwiLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogXCJDb3VsZCBub3QgZmluZCBhY3RpdmUgdGFiIGZvciByZWxheVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJPTExBTUFfQVBJX1JFUVVFU1RcIjoge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJQcm9jZXNzaW5nIE9sbGFtYSBBUEkgcmVxdWVzdCBpbiBiYWNrZ3JvdW5kXCIpO1xuICAgICAgICAgICAgLy8gRXh0cmFjdCBPbGxhbWEgQVBJIHJlcXVlc3QgZGV0YWlsc1xuICAgICAgICAgICAgY29uc3QgeyBiYXNlVXJsLCBtb2RlbCwgcHJvbXB0IH0gPSBtZXNzYWdlLmRhdGEgfHwge307XG4gICAgICAgICAgICAvLyBNYWtlIHRoZSBPbGxhbWEgQVBJIGNhbGwgZnJvbSB0aGUgYmFja2dyb3VuZCBzY3JpcHQgdG8gYXZvaWQgQ09SU1xuICAgICAgICAgICAgZmV0Y2goYCR7YmFzZVVybH0vYXBpL2dlbmVyYXRlYCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IG1vZGVsLFxuICAgICAgICAgICAgICAgICAgICBwcm9tcHQ6IHByb21wdCxcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGVyYXR1cmU6IDAuNyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bV9wcmVkaWN0OiA1MDAsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBPbGxhbWEgc2VydmVyIHJldHVybmVkICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiT2xsYW1hIEFQSSByZXNwb25zZSByZWNlaXZlZDpcIiwgZGF0YSk7XG4gICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiBPbGxhbWEgQVBJIGNhbGw6XCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2Uoe1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBJbXBvcnRhbnQ6IGluZGljYXRlcyB3ZSdsbCByZXNwb25kIGFzeW5jaHJvbm91c2x5XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIkdFVF9BUElfS0VZXCI6IHtcbiAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmNcbiAgICAgICAgICAgICAgICAuZ2V0KFwib3BlbmFpQXBpS2V5XCIpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3VsdC5vcGVuYWlBcGlLZXkgfHwgXCJcIixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBnZXR0aW5nIEFQSSBrZXk6XCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2Uoe1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IFwiRmFpbGVkIHRvIHJldHJpZXZlIEFQSSBrZXlcIixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIEltcG9ydGFudDogaW5kaWNhdGVzIHdlJ2xsIHJlc3BvbmQgYXN5bmNocm9ub3VzbHlcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVuaGFuZGxlZCBtZXNzYWdlIHR5cGU6XCIsIG1lc3NhZ2UudHlwZSk7XG4gICAgICAgICAgICBzZW5kUmVzcG9uc2Uoe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiBgVW5oYW5kbGVkIG1lc3NhZ2UgdHlwZTogJHttZXNzYWdlLnR5cGV9YCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5leHBvcnQge307XG4iXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsImNoZWNrT2xsYW1hQ29ubmVjdGlvbiIsImJhc2VVcmwiLCJ0aGlzIiwiX2EiLCJjb25zb2xlIiwibG9nIiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwiZGF0YSIsImpzb24iLCJtb2RlbHMiLCJtYXAiLCJtIiwibmFtZSIsImpvaW4iLCJ3YXJuIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImVycm9yIiwiY2hyb21lIiwicnVudGltZSIsIm9uSW5zdGFsbGVkIiwiYWRkTGlzdGVuZXIiLCJkZXRhaWxzIiwic3RvcmFnZSIsInN5bmMiLCJzZXQiLCJ1c2VEYXJrTW9kZSIsImF1dG9TdWdnZXN0IiwiYWlQcm92aWRlciIsImFpTW9kZWwiLCJvbGxhbWFCYXNlVXJsIiwiY2F0Y2giLCJvbk1lc3NhZ2UiLCJtZXNzYWdlIiwic2VuZGVyIiwic2VuZFJlc3BvbnNlIiwiX2IiLCJfYyIsIl9kIiwidHlwZSIsImlzQ29ubmVjdGVkIiwic3VjY2VzcyIsIm1vZGVsVXJsIiwiRXJyb3IiLCJkb2NJZCIsImlkZW50aXR5IiwiZ2V0QXV0aFRva2VuIiwiaW50ZXJhY3RpdmUiLCJ0b2tlbiIsImxhc3RFcnJvciIsInJlc3AiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsImNvbnRlbnQiLCJib2R5Iiwic3RydWN0dXJhbEVsZW1lbnQiLCJwYXJhZ3JhcGgiLCJlbGVtIiwiZWxlbWVudHMiLCJ0ZXh0UnVuIiwibGVuZ3RoIiwiZXJyIiwiZXJyb3JNZXNzYWdlIiwiU3RyaW5nIiwidGFiIiwiaWQiLCJ0YWJzIiwic2VuZE1lc3NhZ2UiLCJxdWVyeSIsImFjdGl2ZSIsImN1cnJlbnRXaW5kb3ciLCJtb2RlbCIsInByb21wdCIsIm1ldGhvZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdHJlYW0iLCJvcHRpb25zIiwidGVtcGVyYXR1cmUiLCJudW1fcHJlZGljdCIsImdldCIsIm9wZW5haUFwaUtleSJdLCJzb3VyY2VSb290IjoiIn0=